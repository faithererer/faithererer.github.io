<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>众数问题</title>
      <link href="/2023/09/17/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB/%E4%BC%97%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2023/09/17/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB/%E4%BC%97%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Description<br>给定含有$n$个元素的多重集合$S$，每个元素在$S$中出现的次数称为该元素的重数。多重集$S$中重数最大的元素称为众数。例如，$S={1,2,2,2,3,5}$。多重集S的众数是$2$，其重数为$3$。对于给定的由n 个自然数组成的多重集$S$，计算$S$的众数及其重数。如果出现多个众数，请输出最小的那个。</p><p>Input<br>输入数据的第1行是多重集$S$中元素个数$n\ (n&lt;1300000)$；接下来的n行中，每行有一个最多含有5位数字的自然数，。</p><p>Output<br>输出数据的第1行给出众数，第2行是重数。</p><p>Samples<br>Sample #1</p><div class="table-container"><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td>6<br/>1<br/>2<br/>2 <br/>2<br/>3<br/>5</td><td>2 <br/>3</td></tr></tbody></table></div><h1 id="方法一-map映射法"><a href="#方法一-map映射法" class="headerlink" title="方法一:map映射法"></a>方法一:map映射法</h1><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>遍历多重集合$S$,由于本题考查的是集合的众数和重数，两者有一种天然的一一对应关系，可以使用一个<code>map</code>维护一个元素与其重数的映射关系。每遍历一个元素<code>num</code>，使<code>map[num]++</code></p><p>遍历完成后，<code>map</code>中保存了每个元素的重数，然后遍历map，找到最大的重数，它就是要输出的重数，其对应的<code>key</code>就是要输出的众数。</p><p><code>std::map</code>基于红黑树，其遍历顺序依据标准库要求按照键值升序遍历，符合题目要求:</p><blockquote><p>如果出现多个众数，请输出最小的那个。</p></blockquote><p>这也是为什么没有使用<code>std::unordered_map</code>的原因，因为它的遍历是无序的，基于哈希表实现，即使它的插入和查找操作达到了 $O(1)$</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(n)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>-&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">input</span>(num)</span><br><span class="line">    map[num]++</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> zs=<span class="number">0</span>,cs=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(key in map)&#123;</span><br><span class="line">    <span class="keyword">if</span>(map[key]&gt;cs)&#123;</span><br><span class="line">        zs=key</span><br><span class="line">        cs=map[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(zs)</span><br><span class="line"><span class="built_in">print</span>(cs)</span><br></pre></td></tr></table></figure><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; myMap;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,num;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        myMap[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> zs=<span class="number">0</span>,cs=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=myMap.<span class="built_in">begin</span>();it!=myMap.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second&gt;cs)&#123;</span><br><span class="line">            zs=it-&gt;first;</span><br><span class="line">            cs=it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;zs&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;cs&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>第一层循环:</li></ul><p>​        $N<em>1=0+\sum</em>{i=1}^{n-1} log\ i=log \ (n-1)! $</p><ul><li><p>第二层循环:</p><p>  $N_2=n \cdot log \ n  $</p></li></ul><p>$N=N_1+N2=nlogn+log(n-1)!$</p><p>因为当$n&gt;=1$时,$N_2&gt;=N_1$</p><blockquote><p>$proof:$</p><p>$令f(n)=log \ (n-1)!$ </p><p>$g(n)=nlogn$</p><p>$做e的指数,不会改变两者的大小关系:$</p><p>$e^{f(n)}$和$e^{g(n)}$</p><p>$即:$</p><p>$e^{log \ (n-1)!}=(n-1)!$</p><p>$e^{nlogn}=n^n$</p><p>当$n&gt;=1$时，$(n-1)!&lt;=n^n$</p><p>即:$g(n)&gt;=f(n),\ \ \ n&gt;=1$</p></blockquote><p><img src="%E4%BC%97%E6%95%B0%E9%97%AE%E9%A2%98.assets/image-20230917164705433.png" alt="image-20230917164705433"></p><p>所以时间复杂度是$O(NlogN)$</p><h1 id="方法二-排序法"><a href="#方法二-排序法" class="headerlink" title="方法二: 排序法"></a>方法二: 排序法</h1><h2 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h2><p>可以通过排序来获得元素与其重数的对应关系，因为集合中的元素在排序后，相同的元素，肯定是排列在一起的。然后我们遍历排序后的S数组，使用打擂台的方式得出众数和重数。</p><h3 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(n)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>-&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">input</span>(s[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s[])</span><br><span class="line"><span class="type">int</span> temp_zs=s[<span class="number">0</span>],temp_cs=<span class="number">0</span>,zs=<span class="number">0</span>,cs=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>-&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==temp_zs)&#123;</span><br><span class="line">        temp_cs++;</span><br><span class="line">        <span class="keyword">if</span>(i!=s.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp_cs&gt;cs)&#123;</span><br><span class="line">            zs=temp_zs</span><br><span class="line">            cs=temp_cs;</span><br><span class="line">        &#125;</span><br><span class="line">        temp_zs=s[i]</span><br><span class="line">        temp_cs=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(zs)</span><br><span class="line"><span class="built_in">print</span>(cs)</span><br></pre></td></tr></table></figure><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a[i];a[i]=a[j];a[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>,j=r+<span class="number">1</span>,mid=s[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(s[i]&lt;mid);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(s[j]&gt;mid);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;        </span><br><span class="line">            <span class="built_in">swap</span>(s,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qsort</span>(l,j);</span><br><span class="line">    <span class="built_in">qsort</span>(j+<span class="number">1</span>,r);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,num;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        s.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qsort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> temp_zs=s[<span class="number">0</span>],temp_cs=<span class="number">0</span>,zs=<span class="number">0</span>,cs=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==temp_zs)&#123;</span><br><span class="line">            temp_cs++;</span><br><span class="line">            <span class="keyword">if</span>(i!=s.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp_cs&gt;cs)&#123;</span><br><span class="line">            zs=temp_zs;</span><br><span class="line">            cs=temp_cs;</span><br><span class="line">        &#125;</span><br><span class="line">        temp_zs=s[i];</span><br><span class="line">        temp_cs=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;zs&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;cs&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><p>第一个循环</p><p>  $N_1=O(N)$</p></li><li><p>排序</p><p>  $N_2=O(NlogN)$</p></li><li><p>第二个循环</p><p>  $N_3=O(N)$</p></li></ul><p>综上复杂度是$O(NlogN)$</p><h1 id="方法三-分治法"><a href="#方法三-分治法" class="headerlink" title="方法三:分治法"></a>方法三:分治法</h1><h2 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h2><p>可以采用分治的思想，对于集合$S$中序列的众数和对应重数，我们可以将从$S$的规模入手，进行子问题的分割，递归的分割，直到集合分为单元素集合时，停止分割，此时每个单元素是该单元素集合的众数，重数是1,然后合并子问题，得到原集合$S$的众数和重数。此方法的难点之一是如何进行子问题的合并，我们可以采用关联容器<code>map</code>来保存元素和其重数的映射关系，这样保证了分割子问题之间的数据共享。</p><h3 id="伪代码-2"><a href="#伪代码-2" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">findModeAndCount</span><span class="params">(<span class="type">int</span> s[], <span class="type">int</span> l, <span class="type">int</span> r, myMap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        mYmap[s[l]]++</span><br><span class="line">        <span class="keyword">return</span> &#123;s[l],myMap[s[l]]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; lRes=<span class="built_in">findModeAndCount</span>(s,l,mid)</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; rRes=<span class="built_in">findModeAndCount</span>(s,mid+<span class="number">1</span>,r)    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(lRes.second==rRes.second)&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.first&lt;rRes.first?lRes:rRes</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.second&gt;rRes.second?lRes:rRes</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    <span class="built_in">input</span>(n)</span><br><span class="line">    <span class="built_in">input</span>(s[])</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res = <span class="built_in">findModeAndCount</span>(<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.first)</span><br><span class="line">    <span class="built_in">print</span>(res.second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">findModeAndCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; s, <span class="type">int</span> l, <span class="type">int</span> r, unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; myMap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        myMap[s[l]]++;</span><br><span class="line">        <span class="keyword">return</span> &#123;s[l],myMap[s[l]]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; lRes = <span class="built_in">findModeAndCount</span>(s,l,mid,myMap);</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; rRes = <span class="built_in">findModeAndCount</span>(s,mid+<span class="number">1</span>,r,myMap);</span><br><span class="line">    <span class="keyword">if</span>(lRes.second==rRes.second)&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.first&lt;rRes.first?lRes:rRes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.second&gt;rRes.second?lRes:rRes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; myMap;</span><br><span class="line">    <span class="type">int</span> n,num;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        s.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res = <span class="built_in">findModeAndCount</span>(s,<span class="number">0</span>,n<span class="number">-1</span>,myMap);</span><br><span class="line">    cout&lt;&lt;res.first&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;res.second&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><p>输入$S$：</p><p>  $O(N)$</p></li><li><p>函数<code>findModeAndCount()</code></p><p>  考虑分治策略，每次都是从集合的中部分割,每次递归内操作皆是常数操作，可以写出时间复杂函数的递推式:</p><script type="math/tex; mode=display">  \begin{equation}  \left\{      \begin{aligned}       &T(n)=2\cdot T(n/2)+O(1),\ n>=2 \\      &T(1)=O(1)\ , n=1      \end{aligned}   \right.  \end{equation}</script><p>  依据解决关于递归函数时间复杂度的<a href="https://blog.csdn.net/qq_40773984/article/details/127096776?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E4%B8%BB%E5%AE%9A%E7%90%86&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-3-127096776.nonecase&amp;spm=1018.2226.3001.4450">Master Theorem</a>,$T(n)=aT(n/b)+f(n)$</p><p>  $a=2,b=2,f(n)=O(1)$</p><p>  $n^{log_b{a}}=n^{log_21}=1=f(n)$</p></li></ul><p>​        $T(n)=O(n^{log_b{a}}logn)=O(logn)$</p><p>​        所以时间复杂度:$O(logN)$</p><p>综上时间复杂度是$O(N)$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理OJ</title>
      <link href="/2023/09/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/09/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://acm.sdut.edu.cn/onlinejudge3/problems/3666">A - 小C语言—词法分析程序</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string kind[<span class="number">5</span>] = &#123; <span class="string">&quot;keyword&quot;</span>,<span class="string">&quot;identifier&quot;</span>,<span class="string">&quot;integer&quot;</span>,<span class="string">&quot;boundary&quot;</span>,<span class="string">&quot;operator&quot;</span> &#125;;</span><br><span class="line">string key[<span class="number">6</span>] = &#123; <span class="string">&quot;main&quot;</span>,<span class="string">&quot;if&quot;</span>,<span class="string">&quot;else&quot;</span>,<span class="string">&quot;for&quot;</span>,<span class="string">&quot;while&quot;</span>,<span class="string">&quot;int&quot;</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Check</span><span class="params">(string token)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(token[<span class="number">0</span>]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;token[<span class="number">0</span>]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">2</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;token&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(token==key[i])&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;token&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;token&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;str)&#123;</span><br><span class="line">        string token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">//遇到界符，往往表示单词结束，判断</span></span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>||str[i] == <span class="string">&#x27;)&#x27;</span>||str[i]==<span class="string">&#x27;&#123;&#x27;</span>||str[i]==<span class="string">&#x27;&#125;&#x27;</span>||str[i]==<span class="string">&#x27;,&#x27;</span>||str[i]==<span class="string">&#x27;;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(token.<span class="built_in">length</span>())&#123;</span><br><span class="line">                    <span class="built_in">Check</span>(token);</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">3</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;str[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;<span class="comment">//遇到运算符，往往表示单词结束，判断是否为双目运算符，是则输出，否则单目运算符，输出单目运算符</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;+&#x27;</span>||str[i]==<span class="string">&#x27;-&#x27;</span>||str[i]==<span class="string">&#x27;*&#x27;</span>||str[i]==<span class="string">&#x27;/&#x27;</span>||str[i]==<span class="string">&#x27;=&#x27;</span>||str[i]==<span class="string">&#x27;&gt;&#x27;</span>||str[i]==<span class="string">&#x27;&lt;&#x27;</span>||str[i]==<span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(token.<span class="built_in">length</span>())&#123;</span><br><span class="line">                    <span class="built_in">Check</span>(token);</span><br><span class="line">                &#125;</span><br><span class="line">                token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;len&amp;&amp;str[i+<span class="number">1</span>]==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">4</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;str[i]&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">4</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;str[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//该字符不是界符也不是运算符，加入token中</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                token+=str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="comment">//每次循环结束，判断token是否为空，不为空则检查其类型</span></span><br><span class="line">        <span class="keyword">if</span>(token.<span class="built_in">length</span>())&#123;</span><br><span class="line">            <span class="built_in">Check</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://acm.sdut.edu.cn/onlinejudge3/contests/4108/problems/B">B - 识别浮点常量问题</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNum</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findP</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countP</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;       </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSign</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>||c==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSmallNum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p_l=<span class="built_in">findP</span>(l,r,s);</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//判断小数点个数</span></span><br><span class="line"><span class="keyword">if</span>(!(<span class="built_in">countP</span>(l,r,s)==<span class="number">1</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//判小数点左侧是否有数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p_l;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//判小数点右侧是否有数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p_l+<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==l&amp;&amp;<span class="built_in">isSign</span>(s[l]))&#123;</span><br><span class="line"><span class="keyword">if</span>(r-l+<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindE</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;e&#x27;</span>||s[i]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isInt</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==l&amp;&amp;<span class="built_in">isSign</span>(s[l]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(r-l+<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;;               </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>, r=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[l]==<span class="string">&#x27; &#x27;</span>) l++;</span><br><span class="line">    <span class="keyword">while</span>(s[r]==<span class="string">&#x27; &#x27;</span>) r--;</span><br><span class="line">    <span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//3e-.3</span></span><br><span class="line">    <span class="type">int</span> res=<span class="built_in">FindE</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isSmallNum</span>(l, r, s))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res==l||res==r)&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isSmallNum</span>(l, res<span class="number">-1</span>, s)&amp;&amp;!<span class="built_in">isInt</span>(l,res<span class="number">-1</span>,s))&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isInt</span>(res+<span class="number">1</span>,r,s))&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_496. 下一个更大元素 I</title>
      <link href="/2023/09/02/leetcode%E9%A2%98%E8%A7%A3/leetcode_496/"/>
      <url>/2023/09/02/leetcode%E9%A2%98%E8%A7%A3/leetcode_496/</url>
      
        <content type="html"><![CDATA[<p>$nums1$ 中数字 $x$ 的 <strong>下一个更大元素</strong> 是指 $x$ 在 $nums2$ 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 $x$ 大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 $nums1$ 和 $nums2$ ，下标从 <strong>0</strong> 开始计数，其中$nums1$ 是 $nums2$ 的子集。</p><p>对于每个 $0 &lt;= i &lt; nums1.length$ ，找出满足 $nums1[i] == nums2[j]$ 的下标 $j$ ，并且在 $nums2$ 确定 $nums2[j]$ 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 $-1$ 。</p><p>返回一个长度为 $nums1.length$ 的数组 $ans$ 作为答案，满足 $ans[i]$ 是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,1,2], nums2 = [1,3,4,2].</span><br><span class="line">输出：[-1,3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br><span class="line">- 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [2,4], nums2 = [1,2,3,4].</span><br><span class="line">输出：[3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000$</li><li>$0 &lt;= nums1[i], nums2[i] &lt;= 10^{4}$</li><li>$nums1$和$nums2$中所有整数 <strong>互不相同</strong></li><li>$nums1$ 中的所有整数同样出现在 $nums2$ 中</li></ul><p><strong>进阶：</strong>你可以设计一个时间复杂度为 $O(nums1.length + nums2.length)$ 的解决方案吗？</p><p>首先暴力写一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums2.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==nums2.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    nums1[i]=-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums2[j]==nums1[i])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=j+<span class="number">1</span>;k&lt;nums2.length;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nums2[k]&gt;nums1[i])&#123;</span><br><span class="line">                            nums1[i]=nums2[k];</span><br><span class="line">                            flag=<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(k==nums2.length-<span class="number">1</span>)&#123;</span><br><span class="line">                            nums1[i]=-<span class="number">1</span>;</span><br><span class="line">                            flag=<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>$O(N^3)$的时间复杂度，有点哈人，想想还有什么好方法？</p><p>看了题解，发现可以用栈来做，我实在想不出这道题和栈有什么关系？</p><p>看了看官方题解，发现和单调栈有关系。单调栈是啥？已经忘了，复习一下。</p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><a href="https://oi-wiki.org/ds/monotonous-stack/">来自OiWiki的定义</a></p><p>不学了，累了，明天再写。</p><hr><p>9.5更新:</p><p>单调栈内的元素是是按照一定的大小来排列的。<strong>由栈顶到栈底为序</strong>分为单调递增栈和单调递减栈。</p><p>对于一组数字序列，入单调递增栈，遍历：</p><ul><li>如果此时栈为空或者当前入栈元素&gt;栈顶元素，则入栈</li><li>如果入栈元素&lt;栈顶元素，则将当前栈顶元素弹出，继续进行此步骤，直到满足条件一</li></ul><p>这个过程，有什么作用呢？最典型的例子，我们可以通过此种方式找到某个数右边比它大的第一个数。</p><p>为什么？</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><h3 id="proof1-在原序列中，证明栈顶-b-的左边最小数是它所压的元素-a"><a href="#proof1-在原序列中，证明栈顶-b-的左边最小数是它所压的元素-a" class="headerlink" title="$proof1:$在原序列中，证明栈顶$b$的左边最小数是它所压的元素$a$"></a>$proof1:$在原序列中，证明栈顶$b$的左边最小数是它所压的元素$a$</h3><p>首先对于单调递减栈内，$b$上面压着$a$，在原序列中,有以下的事实:</p><script type="math/tex; mode=display">\begin{aligned}&0.\ b在a的右边\\&1.\ b>a(满足规则1)\\&2.\ b和a之间的数字nums都有:nums>a(如果nums<a，意味着a将被弹出，ab无法相遇)\\&3.\ 考察nums和b由于b需要与a相遇，意味着b需要使nums弹出，此时应该满足:b<nums\end{aligned}</script><p>因此对于序列$[…a…nums…b…]$有</p><ul><li>$a&lt;b$</li><li>$nums&gt;a$</li><li>$nums&gt;b$</li></ul><p>也就是说$b$左边最小的数就是$a$.</p><h3 id="proof2-在原序列中-证明新来元素-c-是当前栈顶-b-的右边最小元素"><a href="#proof2-在原序列中-证明新来元素-c-是当前栈顶-b-的右边最小元素" class="headerlink" title="$proof2:$在原序列中,证明新来元素$c$是当前栈顶$b$的右边最小元素"></a>$proof2:$在原序列中,证明新来元素$c$是当前栈顶$b$的右边最小元素</h3><p>在$proof1$基础上，我们继续遍历序列此时遇到一个待考察入栈元素$c$,他有以下两种情况:</p><ul><li>允许直接入栈,此时$c&gt;b$,相关证明已经在$proof1$阐述。</li><li>不允许直接入栈,此时$c&lt;b$</li></ul><p>如果触发第二种条件，对于$[…b…nums…c…]$,说明:</p><ul><li>$nums&gt;b$，否则b将会在$c$到来之前弹出</li><li>$nums&gt;c$，否则nums不会弹出，$c$也不会和$b$相遇</li></ul><p>也就是说$b$右边最小的数就是$c$</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>对于序列$[…a…nums1…b…nums2…c…]$,当使用单调递减栈对其遍历时，对于栈顶$b$,其所压元素$a$和代入考察入栈元素$c$有:</strong></p><ul><li><strong>$b$的最左边最小元素是$a$</strong></li><li><strong>如果$c$入栈使$b$弹出，则$b$右边最小元素是$c$</strong>.</li></ul><p>对于临界条件,比如遍历完成后剩余的栈元素，下面压着的是其左边最小的元素，右边最小的元素都不存在。</p><hr><p>回到这个题他说找下一个更大的数，我直接用单调递增栈来做好吧，既然是”下一个”也就是说我不用关系$proof1$中的相关结论。</p><p>直接写代码好吧:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack =<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums2.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()||stack.peek()&gt;nums2[i])&#123;</span><br><span class="line">                stack.add(nums2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">                    <span class="keyword">if</span>(num&lt;nums2[i])&#123;</span><br><span class="line">                        map.put(stack.pop(),nums2[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(num&gt;nums2[i]||stack.isEmpty())&#123;</span><br><span class="line">                        stack.add(nums2[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] answers = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">            answers[i]=map.getOrDefault(nums1[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码也是调试了一个小时才通好吧。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_20. 有效的括号</title>
      <link href="/2023/09/02/leetcode%E9%A2%98%E8%A7%A3/leetcode_20/"/>
      <url>/2023/09/02/leetcode%E9%A2%98%E8%A7%A3/leetcode_20/</url>
      
        <content type="html"><![CDATA[<p>给定一个只包括 <code>(</code>，<code>)</code>，<code>&#123;</code>，<code>&#125;</code>，<code>[</code>，<code>]</code> 的字符串 $s$ ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= s.length &lt;= 10^{4}$</li><li>$s$ 仅由括号 $’()[]{}’$ 组成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            Character character=s.charAt(i);  </span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()||(!(map.get(stack.peek()).equals(character))))&#123;</span><br><span class="line">                stack.push(character);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(map.get(stack.peek())==character)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次思路是这样的，就是维护一个栈，遍历字符串获取字符，如果栈空或者两者不匹配直接入栈，否则(即两者匹配)直接弹出栈顶。字符串遍历完毕后，如果栈空则是合法字符串，否则不合法。<br>我这样做时间和空间都只打败了百分之十几的玩家。想想还有哪里可以优化呢？</p><p>尝试把for循环优化一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">char</span> character:s.toCharArray())</span><br></pre></td></tr></table></figure><br>不行，只提高了一丢丢，急了。。。</p><p>把map给优化了，奶奶的用直接if判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> character:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">                stack.push(character);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==<span class="string">&#x27;(&#x27;</span>&amp;&amp;character==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==<span class="string">&#x27;&#123;&#x27;</span>&amp;&amp;character==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==<span class="string">&#x27;[&#x27;</span>&amp;&amp;character==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(character==<span class="string">&#x27;&#125;&#x27;</span>||character==<span class="string">&#x27;)&#x27;</span>||character==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>充分运用了<code>if-else if</code>的特性，随之而来的是代码可读性的下降，时空效率超过了50%玩家,满足了。。。</p><p>也就是说hashmap的取效率比if判断低，这个也是可以理解的，两者都是常数级$O(1)$的时间复杂度,但是hashmap是要计算hash值的，哈希冲突太多会退化到$O(N)$,而if判断只是简单的比较。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_933. 最近的请求次数</title>
      <link href="/2023/09/02/leetcode%E9%A2%98%E8%A7%A3/leetcode_933/"/>
      <url>/2023/09/02/leetcode%E9%A2%98%E8%A7%A3/leetcode_933/</url>
      
        <content type="html"><![CDATA[<p>写一个 $RecentCounter$ 类来计算特定时间范围内最近的请求。</p><p>请你实现 $RecentCounter$ 类：</p><ul><li>$RecentCounter()$ 初始化计数器，请求数为 0 。</li><li>$int ping(int t)$ 在时间 $t$ 添加一个新请求，其中 $t$ 表示以毫秒为单位的某个时间，并返回过去 $3000$ 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 $[t-3000, t]$ 内发生的请求数。</li></ul><p><strong>保证</strong> 每次对 $ping$ 的调用都使用比之前更大的 $t$ 值。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]</span><br><span class="line">[[], [1], [100], [3001], [3002]]</span><br><span class="line">输出：</span><br><span class="line">[null, 1, 2, 3, 3]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">RecentCounter recentCounter = new RecentCounter();</span><br><span class="line">recentCounter.ping(1);     // requests = [1]，范围是 [-2999,1]，返回 1</span><br><span class="line">recentCounter.ping(100);   // requests = [1, 100]，范围是 [-2900,100]，返回 2</span><br><span class="line">recentCounter.ping(3001);  // requests = [1, 100, 3001]，范围是 [1,3001]，返回 3</span><br><span class="line">recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= t &lt;= 10^{9}$</li><li>保证每次对 $ping$ 调用所使用的 $t$ 值都 <strong>严格递增</strong></li><li>至多调用 $ping$ 方法 $10^{4}$ 次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecentCounter</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecentCounter</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ping</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        queue.add(t);</span><br><span class="line">        <span class="keyword">while</span>(t-queue.peek()&gt;<span class="number">3000</span>)&#123;</span><br><span class="line">            queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目第一次看，看不懂，后来看懂了，还是不会，看了讲解视频顿悟。因为<code>ping t</code>是递增的，所以过去3000ms的边界到队尾的元素肯定是&lt;=3000ms的，我们只需要维护这段队列就可以了，ping请求发生时，我们让他入队，然后直接用当前时间减去队首，如果大于3000ms，就把队首元素出队，直到队首元素小于等于3000ms，然后返回队列的长度就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_206. 反转链表</title>
      <link href="/2023/09/01/leetcode%E9%A2%98%E8%A7%A3/leetcode_206/"/>
      <url>/2023/09/01/leetcode%E9%A2%98%E8%A7%A3/leetcode_206/</url>
      
        <content type="html"><![CDATA[<p>给你单链表的头节点 $head$ ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure></p><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure></p><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 $[0, 5000]$</li><li>$-5000 &lt;= Node.val &lt;= 5000$</li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> p.next;</span><br><span class="line">            p.next=pre;</span><br><span class="line">            pre=p;</span><br><span class="line">            p=next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个我一开始没做出来，看了题解才会，呜呜呜。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_203. 移除链表元素</title>
      <link href="/2023/09/01/leetcode%E9%A2%98%E8%A7%A3/leetcode_203/"/>
      <url>/2023/09/01/leetcode%E9%A2%98%E8%A7%A3/leetcode_203/</url>
      
        <content type="html"><![CDATA[<p>给你一个链表的头节点 $head$ 和一个整数 $val$ ，请你删除链表中所有满足 $Node.val == val$ 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure></p><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>列表中的节点数目在范围 $[0, 10^{4}]$ 内</li><li>$1 &lt;= Node.val &lt;= 50$</li><li>$0 &lt;= val &lt;= 50$</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p0</span> <span class="operator">=</span> p;</span><br><span class="line">        <span class="keyword">while</span>(p.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.next.val==val)&#123;</span><br><span class="line">                p.next=p.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p=p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p0.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里产生了疑惑，对于下面两行代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">p0</span> <span class="operator">=</span> p;</span><br></pre></td></tr></table></figure><br><code>p</code>在后续的操作中会改变，但是<code>p0</code>不会改变，这是为什么呢？两者是同一对象的引用啊。通过询问chatgpt4，得到了答案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是因为在Java中，引用变量（比如 p 和 p0）实际上存储的是对象在内存中的地址。当我们说 &quot;p 和 p0 是同一个对象的引用&quot; 时，我们的意思是它们存储的地址是一样的，也就是说它们都指向内存中的同一个位置。</span><br><span class="line"></span><br><span class="line">然而，当我们在代码中写 p = p.next; 时，我们实际上改变的是 p 存储的地址，而不是这个地址指向的对象本身。这行代码的意思是 &quot;让 p 存储 p.next 当前存储的地址&quot;。这就导致了 p 现在指向了链表中的下一个节点，而 p0 还是指向原来的节点。</span><br><span class="line"></span><br><span class="line">因此，p 的改变并不会影响 p0。因为 p 和 p0 是独立的变量，当我们改变 p 存储的地址时，p0 存储的地址并不会改变。这就是为什么在 while 循环后，p 和 p0 的值会不同。</span><br><span class="line"></span><br><span class="line">这是Java语言中对引用的处理方式，也是很多其他面向对象语言的通用规则。希望这个解释能帮助你理解。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_27. 移除元素</title>
      <link href="/2023/08/31/leetcode%E9%A2%98%E8%A7%A3/leetcode_27/"/>
      <url>/2023/08/31/leetcode%E9%A2%98%E8%A7%A3/leetcode_27/</url>
      
        <content type="html"><![CDATA[<p>给你一个数组 $nums$ 和一个值 $val$，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 $val$ 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 $O(1)$ 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a> 修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$0 &lt;= nums.length &lt;= 100$</li><li>$0 &lt;= nums[i] &lt;= 50$</li><li>$0 &lt;= val &lt;= 100$</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=val)&#123;</span><br><span class="line">                nums[idx++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种类似的思路在283中也运用了。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_283. 移动零</title>
      <link href="/2023/08/31/leetcode%E9%A2%98%E8%A7%A3/leetcode_283_%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2023/08/31/leetcode%E9%A2%98%E8%A7%A3/leetcode_283_%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<p>给定一个数组 $nums$，编写一个函数将所有 $0$ 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li>$1 &lt;= nums.length &lt;= 10^{4}$</li><li>$-2^{31} &lt;= nums[i] &lt;= 2^{31} - 1$</li></ul><p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ok=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-ok;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    nums[j]=nums[j+<span class="number">1</span>];    </span><br><span class="line">                &#125;</span><br><span class="line">                ok++;</span><br><span class="line">                nums[nums.length-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[idx++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=idx;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双指针:</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_485. 最大连续 1 的个数</title>
      <link href="/2023/08/31/leetcode%E9%A2%98%E8%A7%A3/leetcode_485/"/>
      <url>/2023/08/31/leetcode%E9%A2%98%E8%A7%A3/leetcode_485/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/max-consecutive-ones/">485. 最大连续 1 的个数</a></p><p>给定一个二进制数组 $nums$ ， 计算其中最大连续 $1$ 的个数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,0,1,1,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,1,1,0,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^{5}$</li><li>$nums[i]$ 不是 $0$ 就是 $1$.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length)&#123;</span><br><span class="line">            <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;nums.length&amp;&amp;nums[i++]==<span class="number">1</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;j)&#123;</span><br><span class="line">                max=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我遇到了一个问题，就是内循环的条件<code>i&lt;nums.length&amp;&amp;nums[i++]==1</code>当我交换位置时，就会报数组越界的错误，我知道原因是因为<code>i++</code>的自增导致后面<code>i&lt;num.length</code>的判断失误，但是当我改成<code>nums[i++]==1&amp;&amp;i-1&lt;nums.length</code>还是会错。。。</p><p>直接写一个debug程序追踪一下这些变量打断点逐步观察这些变量，发现<code>nums[i++]</code>会越界。</p><p>结论就是条件表达式是自左而右依次进行的，第一个条件表达式的相关变量会影响后续表达式的值，对于<code>&amp;&amp;</code>，第一个表达式为<code>false</code>则后续条件表达式不会执行，这也正是题解所写那样写不会越界的原因。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三-每日任务</title>
      <link href="/2023/08/29/%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8A%A1/myTask/"/>
      <url>/2023/08/29/%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8A%A1/myTask/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>四级没过,内心受到沉重打击，且临近毕业，碌碌无为，一事无成。因此发奋图强，以一雪前耻，以求无怨无悔。</p><h1 id="2023-08"><a href="#2023-08" class="headerlink" title="2023-08"></a>2023-08</h1><h2 id="2023-08-29"><a href="#2023-08-29" class="headerlink" title="2023-08-29"></a>2023-08-29</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>编译原理</p>            </div><!-- <div class='checkbox red times'><input type="checkbox" />            <p>checked</p>            </div> --><h2 id="2023-08-31"><a href="#2023-08-31" class="headerlink" title="2023-08-31"></a>2023-08-31</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>算法副本定档</p>            </div><blockquote><p>经过斟酌，我选择通过以分模块的方式来刷leetcode的题来提高和巩固我的算法能力</p></blockquote><h2 id="2023-09-01"><a href="#2023-09-01" class="headerlink" title="2023-09-01"></a>2023-09-01</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>leetcode-链表</p>            </div><h2 id="2023-09-02"><a href="#2023-09-02" class="headerlink" title="2023-09-02"></a>2023-09-02</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>leetcode-队列，栈</p>            </div><blockquote><p>单调栈知识欠缺</p><h2 id="2023-09-05"><a href="#2023-09-05" class="headerlink" title="2023-09-05"></a>2023-09-05</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>编译原理</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>单调栈问题解决</p>            </div><h2 id="2023-09-09"><a href="#2023-09-09" class="headerlink" title="2023-09-09"></a>2023-09-09</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>编译原理</p>            </div></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringBoot解决跨域请求</title>
      <link href="/2023/08/07/SpringBoot/%E4%BD%BF%E7%94%A8springboot%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2023/08/07/SpringBoot/%E4%BD%BF%E7%94%A8springboot%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当我用js的axios库向指定api发送请求获取数据时常常会遇到跨域请求问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Access</span> to <span class="title class_">XMLHttpRequest</span> at <span class="string">&#x27;https://www.**&#x27;</span> <span class="keyword">from</span> origin <span class="string">&#x27;http://127.0.0.1:5501&#x27;</span> has been blocked by <span class="variable constant_">CORS</span> <span class="attr">policy</span>: <span class="title class_">No</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>我尝试使用springboot代理此次请求。</p><p>编写一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">proxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPic</span><span class="params">(String kwd)</span>&#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        RestTemplate restTemplate=<span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">        String url1=<span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br><span class="line">        Map&lt;String, String&gt;params=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;p&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        HttpEntity&lt;Map&lt;String, String&gt;&gt; entity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(params, headers);</span><br><span class="line">        String url=<span class="string">&quot;https://www.pixivs.cn/ajax/search/artworks/&quot;</span>+kwd;</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        headers.add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>);</span><br><span class="line">        String res= restTemplate.exchange(url,HttpMethod.GET,entity ,String.class).getBody();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止谷歌重定向</title>
      <link href="/2023/08/07/%E7%BB%8F%E9%AA%8C/%E9%98%B2%E6%AD%A2%E8%B0%B7%E6%AD%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2023/08/07/%E7%BB%8F%E9%AA%8C/%E9%98%B2%E6%AD%A2%E8%B0%B7%E6%AD%8C%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>我用的是谷歌的 Chrome 浏览器，默认的 Google 搜索引擎，用的是 Google.com 的网址，可不知咋的，这两天所有的搜索结果都转到了 Google.com.hk 上去了。</p><p>在 Google 首页及搜索设置中找了一圈，也没能把它改回为Google.com 的搜索结果。只好上网寻找解决办法，发现其实相当简单，不用其它类似文章写的那么复杂。</p><p>原理：只要告诉 <strong>Google</strong>.com 不要进行区域重定向（No Country Redirection，简称NCR）。</p><p>具体做法：在网址栏打入：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.google.com/ncr</span><br></pre></td></tr></table></figure><br>然后回车即可。</p><p>还没有改过来？哦，你忘了最重要的一步，即在完成上步操作后，立即重启 Google Chrome 浏览器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫——Jsoup</title>
      <link href="/2023/07/12/%E7%88%AC%E8%99%AB/Java%E7%88%AC%E8%99%AB/"/>
      <url>/2023/07/12/%E7%88%AC%E8%99%AB/Java%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Jsoup介绍"><a href="#Jsoup介绍" class="headerlink" title="Jsoup介绍"></a>Jsoup介绍</h1><p><a href="https://jsoup.org/">官网</a></p><h1 id="下载和使用"><a href="#下载和使用" class="headerlink" title="下载和使用"></a>下载和使用</h1><p><a href="https://jsoup.org/download">下载jar包</a></p><p>通过添加Libraries的方式引入：</p><p>1、首先在根目录下创建一个 libs 的目录</p><p>2、打开 File -&gt; Project Structure</p><p>3、单击 Libraries -&gt; “+” -&gt; “Java” -&gt; 选择我们导入的项目主目录，点击OK</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/07/11/SpringBoot/SpringBoot/"/>
      <url>/2023/07/11/SpringBoot/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h1><p><strong>本地仓库配置</strong>：</p><p><code>conf-&gt;settings.xml</code>里设置本地仓库存储路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并在IDEA设置中设置其主目录路径，配置文件路径和仓库路径。</p><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><p>java项目的修改需要重启项目，开发效率低很麻烦，可以进行热部署。</p><p>Spring Boot提供了<strong>spring-boot-devtools</strong>组件，使得无须手动重启SpringBoot应用即可重新编译、启动项目，大大缩短编译启动的时间。</p><p>devtools会监听classpath下的文件变动，触发Restart类加载器重新加载该类，从而实现类文件和属性文件的热部署。</p><p>并不是所有的更改都需要重启应用(如静态资源、视图模板)，可以通过设置spring.devtools.restart.exclude属性来指定一些文件或目录的修改不用重启应用。</p><ul><li><p><strong>引入spring-boot-devtools</strong>：</p><p>  加入依赖   在<code>pom.xml</code>将以下标签加入到<code>&lt;dependencies&gt;ADD_IT&lt;/dependencies&gt;</code>:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后同步依赖，如果没有会下载。</p></li><li><p>在<code>application.properties</code>中配置<code>devtools</code>:</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热部署生效</span></span><br><span class="line"><span class="attr">spring.devtools.restart.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 监听目录</span></span><br><span class="line"><span class="attr">spring.devtools.restart.additional-paths</span>=<span class="string">src/main/java</span></span><br></pre></td></tr></table></figure></li><li><p>在设置中找到<code>构建执行部署-&gt;编译器</code>勾选<code>自动构建项目</code></p></li><li><p>在设置中找到<code>高级设置-&gt;编译器</code>勾选<code>即使开发的应用程序当前正在运行，也允许自动make启动</code></p></li></ul><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><ul><li>Spring Boot将传统Web开发的mvc、json、tomcat等框架整合，提供了spring-boot-starter-web组件，简化了Web应用配置。</li><li>创建SpringBoot项目勾选Spring Web选项后，会自动将spring-boot-starter-web组件加入到项目中</li><li>spring-boot-starter-web启动器主要包括web、webmvc、json、tomcat等基础依赖组件，作用是提供Web开发场景所需的所有底层依赖。</li><li>webmvc为Web开发的基础框架，json为JSON数据解析组件，tomcat为自带的容器依赖。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121029003.png" alt="image-20230712102857157"></p><p><strong><code>@RestController</code>会将对象数据以<code>json</code>的形式返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由映射：</p><ul><li>RequestMapping注解主要负责URL的路由映射。它可以添加在Controller<strong>类</strong>或者具体的<strong>方法</strong>上。</li><li>如果添加在Controller类上，则这个Controller中的所有路由映射都将会映射规则，如果添加在方法上，则只对当前方法生效。</li><li>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则用的属性参数如下:<ul><li>value:请求URL的路径，支持URL模板、正则表达式</li><li>method: HTTP请求方法</li><li>consumes:请求的媒体类型(Content-Type)，如application/jsonproduces:响应的媒体类型</li><li>headers:请求的参数及请求头的值</li></ul></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307301019158.png" alt="image-20230730101858020"></p><h1 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h1><p>使用IDEA创建Spring Boot项目，会默认创建出classpath:/static/目录，静态资源一般放在这个目录下即可。<br>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略。<br>在application.properties中直接定义过滤规则和静态资源位置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/static</span></span><br></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121054747.png" alt="image-20230712105412775"></p><p>Spring Boot工程嵌入的tomcat限制了请求的文件大小，每个文件的配置最大为1Mb，单次请求的文件的总数不能大于10Mb。<br>要更改这个默认值需要在配置文件（如application.properties）中加入两个配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure><p>一个文件上传的demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">uploadController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(String nickname, MultipartFile photo, HttpServletRequest httpServletRequest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 打印一系列值</span></span><br><span class="line">        System.out.println(nickname);</span><br><span class="line">        System.out.println(photo.getOriginalFilename()+photo.getSize());</span><br><span class="line">        System.out.println(photo.getContentType());</span><br><span class="line">        <span class="comment">//获取/upload目录的物理路径</span></span><br><span class="line">        String path=httpServletRequest.getServletContext().getRealPath(<span class="string">&quot;/upload/&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        saveFile(photo,path);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">saveFile</span><span class="params">(MultipartFile photo, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        File dir= <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(path+photo.getOriginalFilename());</span><br><span class="line">        System.out.println(file.getPath());</span><br><span class="line">        <span class="comment">// 保存到指定文件</span></span><br><span class="line">        photo.transferTo(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器在Web系统中非常常见，对于某些全局统一的操作，我们可以把它提取到拦截器中实现。总结起来，拦截器大致有以下几种使用场景:</p><ul><li><strong>权限检查</strong>:如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面。</li><li><strong>性能监控</strong>:有时系统在某段时间莫名其妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时</li><li><strong>通用行为</strong>:读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有提取Locale、Theme信息等，只要是多个处理程序都需要的，即可使用拦截器实现。</li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121235074.png" alt="image-20230712123537213"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121237054.png" alt="image-20230712123743141"></p><p>拦截器demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoginInterceptor&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).addPathPatterns(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h1><p>api接口文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加s wagger2相关功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加swagger-ui相关功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//告诉Spring容器，这个类是一个配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">//启用Swagger2功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//com包下所有API都交给Swagger2管理</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//API文档页面显示信息</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;演示项目API&quot;</span>)<span class="comment">//标题</span></span><br><span class="line">                .description(<span class="string">&quot;学习Swagger2的演示项目&quot;</span>)<span class="comment">//描述</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mvc配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1><p>加入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatisPlus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysq1驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据连接池druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="comment"># 数据库连接池技术</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"># 数据库驱动</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/qq?useSSL=false</span></span><br><span class="line"><span class="comment"># 账号密码</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">111111</span></span><br><span class="line"><span class="comment"># 日志输出格式</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>在主启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com/example/first_demo/Mapper&quot;)</span></span><br></pre></td></tr></table></figure><p>在mapper接口实现查询数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">qqMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM qq WHERE qq=3417759874&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">Select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Controller调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">qqController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> qqMapper qqMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list=qqMapper.Select();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>CURD操作数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">userMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user va1ues(#&#123;id&#125; , #&#123;username&#125; ,#&#123;password&#125; ,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username &#125; , password=#&#123;password&#125; ,birthday=#&#123;birthday&#125; where id=#&#123;id]&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="meta">@sel1ect( &quot;select * from user where id=#&#123;id&#125;&quot;)</span>User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="meta">@select(&quot;select * from user&quot;)</span>List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>特性，在plus版本上述也可省略:他会自动寻找，<strong>前提是实体和表名一致</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface qqMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h2><div class="table-container"><table><thead><tr><th>注解</th><th>功能</th></tr></thead><tbody><tr><td>@Insert</td><td>实现插入</td></tr><tr><td>@Update</td><td>实现更新</td></tr><tr><td>@Delete</td><td>实现删除</td></tr><tr><td>@Select</td><td>实现查询</td></tr><tr><td>@Result</td><td>实现结果集封装</td></tr><tr><td>@Results</td><td>可以与@Result一起使用，封装多个结果集</td></tr><tr><td>@one</td><td>实现一对一结果集封装</td></tr><tr><td>@Many</td><td>实现一对多结果集封装</td></tr></tbody></table></div><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>demo1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">link</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addC&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">!flag</span>&gt;</span>消失<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;u in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span>&#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(u,i) in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span>&#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;,&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">img</span>:<span class="string">&#x27;./107702902_p0_master1200.jpg&#x27;</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">user_List</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">addC</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">flag</span>=!<span class="variable language_">this</span>.<span class="property">flag</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p><code>v-html</code>会渲染html标签</p></li><li><p><code>:属性</code>用于给html标签的属性赋值，原型是<code>v-bind:属性</code></p></li><li><p><code>v-on:click</code>是Vue对<code>button</code>标签封装的用于监听事件的新属性，可以简写为<code>@click</code></p></li><li><p><code>v-if</code>用于标签的取舍<code>v-if=true</code>保留，否则取消，同样的还有<code>v-else-if</code>,<code>v-else</code>,一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 或者 <code>v-else-if</code> 元素后面，否则它将不会被识别。</p></li><li><p><code>`v-for</code> 是 Vue.js 框架中的一个指令，用于在模板中循环渲染列表数据。使用 <code>v-for</code>，您可以遍历一个数组或对象，并为每个元素或属性生成对应的 HTML 元素或组件。可使用<code>u in user_List</code>和<code>(u,i) in user_List</code>两种风格来遍历。需要注意的是，为了优化渲染性能，每个循环项都应该有一个唯一的 <code>key</code> 属性。这可以帮助 Vue.js 更好地跟踪和更新列表中的元素。</p></li><li><p><code>v-model</code>页面&lt;—-&gt;属性，<code>:value</code>页面&lt;—-属性,需要给列表加<code>key</code>否则在列表的元素状态不会绑定</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;u in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> &#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(u,i) in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;,&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">message</span>: <span class="string">&#x27;Hello Vuzze!&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">img</span>:<span class="string">&#x27;107702902_p0_master1200.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">flag</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">link</span>: <span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;链接&lt;/a&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">user_List</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">id</span>:<span class="number">1</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">id</span>:<span class="number">2</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="attr">id</span>:<span class="number">3</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">nextId</span>:<span class="number">4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="title function_">addC</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">flag</span>=!<span class="variable language_">this</span>.<span class="property">flag</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="title function_">addUser</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">user_List</span>.<span class="title function_">unshift</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="variable language_">this</span>.<span class="property">name</span>,<span class="string">&quot;age&quot;</span>:<span class="variable language_">this</span>.<span class="property">age</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">nextId</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307131734863.png" alt="image-20230713173436881"></p><p>安装指令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p>这一指令将会安装并执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具。你将会看到一些诸如 TypeScript 和测试支持之类的可选功能提示：</p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ul><li>在<code>./components</code>创建自己的组件<code>my.vue</code></li><li>将<code>my.vue</code>导入到<code>App.vue</code></li><li><code>npm run dev</code></li></ul><h2 id="组件间的传值"><a href="#组件间的传值" class="headerlink" title="组件间的传值"></a>组件间的传值</h2><p>组件可以由内部的Data提供数据，也可以由父组件通过<code>prop</code>的方式传值。兄弟组件之间可以通过<code>Vuex</code>等统─数据源提供数据共享。</p><p>在<code>App.vue</code>和<code>my.vue</code>传值：</p><ul><li><p>在<code>App.vue</code>导入</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> myy <span class="keyword">from</span> <span class="string">&#x27;./components/my.vue&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注册</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="title class_">HelloWorld</span>,</span><br><span class="line">      <span class="title class_">TheWelcome</span>,</span><br><span class="line">      myy</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;爱来自App.vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>  现在在<code>App.vue</code>中可以使用<code>my.vue</code></p></li><li><p>在<code>my.vue</code>添加</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  即可在<code>App.vue</code>导入后作为属性使用</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;myy titlse=<span class="string">&quot;哈哈哈&quot;</span> ccc=<span class="string">&quot;大大&quot;</span>&gt; &lt;/myy&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="ElementUi"><a href="#ElementUi" class="headerlink" title="ElementUi"></a>ElementUi</h1><ul><li><p>安装</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure></li><li><p>导入<code>main.js</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用in<code>main.js</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">//一定要放最后挂载</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>导入样例(以表格为例):</p><ul><li>找到源码,放入<code>Table.vue</code></li><li>在<code>App.vue</code>导入，引用，注册，正常显示</li></ul></li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>在实际项目开发中，前端页面所需要的数据往往需要从服务器端获取，这必然涉及与服务器的通信。<br>Axios是一个基于promise 网络请求库，作用于node.js和浏览器中。<br>Axios在浏览器端使用XMLHttpRequests发送网络请求，并能自动完成JSON数据的转换。</p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><ul><li><p>导入<code>main.js</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li><p>GET请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>POST请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>生命周期</strong>:Vue.js 是一个基于组件的前端框架，它有一套生命周期钩子函数，<strong>用于在组件的不同阶段执行特定的代码</strong>。这些生命周期钩子函数允许您    在组件创建、更新和销毁的不同时间点执行自定义逻辑。</p><ol><li><code>beforeCreate</code>：在实例初始化之后、数据观测 (data observation) 和事件配置 (event/watcher setup) 之前被调用。在这个阶段，组件实例还没有被创建，因此无法访问到组件的数据和方法。</li><li><code>created</code>：在实例创建完成后被调用。在这个阶段，组件实例已经创建，可以访问到组件的数据和方法。通常在这个阶段进行一些初始化操作，如获取数据、订阅事件等。</li><li><code>beforeMount</code>：在组件挂载到 DOM 之前被调用。在这个阶段，模板已经编译完成，但尚未将组件渲染到页面上。</li><li><code>mounted</code>：在组件挂载到 DOM 后被调用。在这个阶段，组件已经被渲染到页面上，可以进行 DOM 操作、发送请求等。通常在这个阶段进行一些需要操作 DOM 的初始化工作。</li><li><code>beforeUpdate</code>：在组件更新之前被调用，即在数据发生变化导致组件重新渲染之前。在这个阶段，可以对组件的数据进行修改或进行一些准备工作。</li><li><code>updated</code>：在组件更新完成后被调用。在这个阶段，组件已经完成数据的更新和重新渲染。</li><li><code>beforeUnmount</code>：在组件销毁之前被调用。在这个阶段，组件实例仍然可用，可以进行一些清理工作，如取消订阅、清除定时器等。</li><li><code>unmounted</code>：在组件销毁后被调用。在这个阶段，组件实例已经被销毁，无法再访问到组件的数据和方法。</li></ol><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>在create阶段进行数据请求:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App.vue created&#x27;</span>)</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/user&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此时请求会出现跨域请求（CROS）阻截</p><blockquote><p>为了保证浏览器的安全，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源，称为同源策略，同源策略是浏览器安全的基石<br>同源策略(Sameoriginpolicy)是一种约定，它是浏览器最核心也最基本的安全功能<br>所谓同源（即指在同一个域）就是两个页面具有相同的协议(protocol)，主机(host)和端口号(port)<br><strong>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</strong>，<strong>此时无法读取非同源网页的Cookie，无法向非同源地址发送AJAX请求</strong></p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>CORS (Cross-Origin Resource Sharing）是由W3C制定的一种跨域资源共享技术标准，其目的就是为了解决前端的跨域请求。</p><p>CORS可以在不破坏即有规则的情况下，通过后端服务器实现CORS接口，从而实现跨域通信。</p><p>CORS将请求分为两类:简单请求和非简单请求，分别对跨域通信提供了支持。</p><ul><li><p>简单请求</p><p>  请求方法:GET、POST、HEAD<br>  除了以下的请求头字段之外，没有自定义的请求头:<br>  Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type<br>  Content-Type的值只有以下三种:<br>  text/plain、multipart/form-data、application/x-www-form-urlencoded</p><ul><li><p>处理</p><p>  对于简单请求，CORS的策略是请求时在请求头中增加一个Origin字段，</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost :8080</span><br><span class="line">Origin: http://localhost:8081</span><br><span class="line">Referer: http://localhost:8081/index.html</span><br></pre></td></tr></table></figure><p>  服务器收到请求后，根据该字段判断是否允许该请求访问，如果允许，则在HTTP头信息中添加Access-Control-Allow-Origin字段。<br>  坛</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-origin<span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost:8081</span></span><br><span class="line">Content-Length<span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">Content-Type<span class="punctuation">:</span>text/plain;</span><br><span class="line">charset=UTF<span class="number">-8</span></span><br><span class="line">Date<span class="punctuation">:</span> Thu<span class="punctuation">,</span><span class="number">12</span> Jul <span class="number">2018</span> <span class="number">12</span><span class="punctuation">:</span><span class="number">51</span><span class="punctuation">:</span><span class="number">14</span> GMT</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>非简单请求</p><p>  简单请求之外都是非简单请求</p><p>  对于非简单请求的跨源请求，浏览器会在真实请求发出前增加一次OPTION请求，称为预检请求(preflight request)<br>  预检请求将真实请求的信息，包括请求方法、自定义头字段、源信息添加到HTTP头信息字段中，询问服务器是否允许这样的操作。<br>  例如一个GET请求:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /test HTTP/1.1</span><br><span class="line">Origin: http://www.test.com</span><br><span class="line">Access-Control-Request-Method: GET</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: www.test.com</span><br></pre></td></tr></table></figure><p>  Access-Control-Request-Method表示请求使用的HTTP方法，Access-Control-Request-Headers包含请求的自定义头字段</p></li></ul><pre><code>服务器收到请求时，需要分别对Origin、Access-Control-Request-Method、Access-Control-Request-Headers进行验证，验证通过后，会在返回HTTP头信息中添加:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http: //www.test.com</span><br><span class="line">Access-Control-Allow-Methods: GET,POST,PUT,DELETE</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials:true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>Access-Control-Allow-Methods、Access-Control-Allow-Headers:真实请求允许的方法、允许使用的字段Access-Control-Allow-Credentials:是否允许用户发送、处理cookieAccess-Control-Max-Age:预检请求的有效期，单位为秒，有效期内不用重新发送预检请求。</code></pre><p>在Springboot中在mvc配置类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span> <span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//允许跨域访问的路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//允许跨域访问的源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)<span class="comment">//允许请求方</span></span><br><span class="line">                .maxAge(<span class="number">168000</span>)<span class="comment">//预检间隔时间</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);<span class="comment">//允许头部设置</span></span><br><span class="line"><span class="comment">//                .allowCredentials(true);//是否发送cookie ps.这个加了就无法生效我也不知道为什么</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>如果不想自定义策略使用默认配置，只需要在相关Controller中添加注解<code>@CrossOrigin</code>即可</strong></p><h1 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h1><p>掌握了以上的知识，我们尝试将后端的数据渲染到前端页面。</p><p>我们尝试从数据库取出数据，以表格形式显示在前端。</p><ul><li><p>前端通过<code>axios</code>向后端发送请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">qq</span>: string</span><br><span class="line">  <span class="attr">phone</span>: string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tableData = ref&lt;<span class="title class_">User</span>[]&gt;([]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Table.vue created&#x27;</span>)</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/user&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">   tableData.<span class="property">value</span>= response.<span class="property">data</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>  这是Vue3的语法，<code>created</code>变成了<code>onMounted</code></p><p>  <code>()=&#123;&#125;</code>是回调函数</p></li></ul><ul><li><p>后端开启<code>/user</code>路由，返回数据：</p><ul><li><p>Mapper接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">QQMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM qq WHERE qq=3417759874\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot; OR qq=690420902\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot; OR qq=669630546\n&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;qq_phone&gt; <span class="title function_">find</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span><span class="comment">//跨域请求允许</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QQMapper qqMapper;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;qq_phone&gt; <span class="title function_">query</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;qq_phone&gt; list=qqMapper.find();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>前端得到数据渲染</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      :row-class-name=&quot;tableRowClassName&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;qq&quot; label=&quot;qq&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;phone&quot; label=&quot;phone&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在实际项目开发中，几乎每个组件中都会用到axios 发起数据请求。此时会遇到如下两个问题:</p><ul><li>每个组件中都需要导入axios</li><li>每次发请求都需要填写完整的请求路径</li></ul><p>可以通过全局配置的方式解决上述问题在<code>main.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置请求根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line"><span class="comment">// 全局属性</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios</span><br></pre></td></tr></table></figure><p>在某个组件中<code>xxx.vue</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curInstance= <span class="title function_">getCurrentInstance</span>()！;<span class="comment">//添加非空断言&#x27;!&#x27;否则编译器报错可能为空，即使项目正常运行</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Table.vue created&#x27;</span>)  </span><br><span class="line">    <span class="keyword">const</span> &#123;$axios&#125;=curInstance.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>;</span><br><span class="line">    $axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">     tableData.<span class="property">value</span>= response.<span class="property">data</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>Vue路由<code>vue-router</code>是官方的路由插件，能够轻松的管理SPA项目中组件的切换。<br>Vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来<br>vue-router目前有3.x的版本和4.x的版本，vue-router 3.x只能结合vue2进行使用，vue-router 4.x只能结合vue3进行使用</p><p><a href="https://router.vuejs.org/zh/introduction.html">官方文档</a></p><p>安装: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>有三个组件:<code>Discover.vue</code> <code>Friends.vue</code> <code>My.vue</code>，我想通过<code>/discover</code>,<code>/friends</code>,<code>/my.vue</code>这三个路由来控制它们的显示</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>新建文件夹<code>router</code>保存路由文件</p></li><li><p>新建<code>index.js</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Discover</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Discover.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">My</span> <span class="keyword">from</span> <span class="string">&#x27;../components/My.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friends</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Friends.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/discover&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Discover</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">My</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/friends&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Friends</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> route;</span><br></pre></td></tr></table></figure><ul><li><code>main.js</code>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Vue Router</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>在根组件通过<code>&lt;router-link to=&quot;/name&quot;&gt;&lt;/router-link&gt;</code>来进行跳转，组件内容会渲染到<code>&lt;router-view&gt;&lt;/router-view&gt;</code></li></ul><h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><p>在参数”<code>route</code>中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/my&#x27;<span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> My<span class="punctuation">,</span></span><br><span class="line">    children<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span>path<span class="punctuation">:</span>&#x27;sing&#x27;<span class="punctuation">,</span>component<span class="punctuation">:</span>Sing<span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>这样写当访问<code>/my/sing</code>时会渲染<code>Sing.vue</code>的内容</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>在参数”<code>route</code>中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attr">routes</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attr">routes</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/product/1&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,           </span><br><span class="line">       &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/product/2&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,           </span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/product/2&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,           </span><br><span class="line">       &#125;,        </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们给每个商品做对应渲染，如果按照刚才的方法代码复用性很差，有1亿个商品，难不成我要配置1亿个路由？</p><p>因此需要动态路由。</p><p><strong>动态路由</strong>指的是:把Hash地址中可变的部分定义为参数项，从而提高路由规则的复用性。在vue-router 中使用英文的冒号(:)来定义路由的参数项。示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">path</span>: <span class="string">&#x27;/product/:id &#x27;</span>,component :<span class="title class_">Product</span>&#125;</span><br></pre></td></tr></table></figure><p>在组件中可以通过<code>$route.params.id</code>获取<code>id</code>的值，名字不一定非得是<code>id</code></p><h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><p>对于组件化开发来说，大型应用的状态往往跨越多个组件。在多层嵌套的父子组件之间传递状态已经十分麻烦，而Vue更是没有为兄弟组件提供直接共享数据的办法。<br>基于这个问题，许多框架提供了解决方案——使用全局的状态管理器，将所有分散的共享数据交由状态管理器保管，Vue也不例外。<br>Vuex是一个专为Vue.js应用程序开发的状态管理库，采用集中式存储管理应用的所有组件的状态。<br>简单的说，<strong>Vuex用于管理分散在Vue各个组件中的数据。</strong></p><p><a href="https://vuex.vuejs.org/zh/index.html">官网地址</a></p><ul><li><p>安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure></li></ul><p>每一个Vuex应用的核心都是一个store，与普通的全局对象不同的是，基于Vue数据与视图绑定的特点，当store中的状态发生变化时，与之绑定的视图也会被重新渲染。<br>store中的状态不允许被直接修改，改变store中的状态的唯一途径就是显式地提交(commit) mutation，这可以让我们方便地跟踪每一个状态的变化。在大型复杂应用中，如果无法有效地跟踪到状态的变化，将会对理解和维护代码带来极大的困扰。<br>Vuex中有5个重要的概念: State、Getter、Mutation、Action、Module。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307151140442.png" alt="image-20230715114007596"></p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>State用于维护所有应用层的状态，并确保应用只有唯一的数据源.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的 store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  state () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果我们想在其他组件访问<code>count</code>可以用<code>this.$store.count</code>获取</p><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>Getter维护由State派生的一些状态，这些状态随着State状态的变化而变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createstore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        todos : [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>,<span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">2</span>,<span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters : &#123;</span><br><span class="line">            doneTodos : <span class="function">(<span class="params">state</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">done</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>在组件中，可以直接使用store.commit来提交mutation,也可以先用mapMutation辅助函数将其映射下来</p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action类似Mutation，不同在于:</p><p>Action不能直接修改状态，只能通过提交mutation来修改，</p><p>Action可以包含异步操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createstore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations : &#123;</span><br><span class="line">        increment (state) &#123;</span><br><span class="line">            state.<span class="property">count</span>++ <span class="comment">//直接修改状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions : &#123;</span><br><span class="line">        increment (context) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>) <span class="comment">//只能提交来修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中，可以直接使用<code>this.$store.dispatch(&#39;xxx&#39;)</code>分发action，或者使用<code>mapActions</code>辅助函数先将其映射下来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods : &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([</span><br><span class="line">    <span class="string">&#x27;increment &#x27;</span>,<span class="comment">// 将`this.increment()映射为“‘this.$store.dispatch( &#x27; increment &#x27;)</span></span><br><span class="line">    <span class="comment">//mapActions`也支持载荷:</span></span><br><span class="line">    <span class="string">&#x27;incrementBy&#x27;</span><span class="comment">//将‘this. incrementBy(amount)”映射为‘this.$store.dispatch(&#x27; incrementBy&#x27;，amount))])，</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    state () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">      increment (state) &#123;</span><br><span class="line">        state.<span class="property">count</span>++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> app.<span class="title function_">use</span>(store);</span><br></pre></td></tr></table></figure><h1 id="Mock-js"><a href="#Mock-js" class="headerlink" title="Mock.js"></a>Mock.js</h1><p>Mock.js是一款前端开发中拦截Ajax请求再生成随机数据响应的工具，可以用来模拟服务器响应.<br>优点是非常简单方便,无侵入性,基本覆盖常用的接口数据类型..<br>支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。</p><p><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">官方文档</a></p><p>安装: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307151351102.png" alt="image-20230715135128820"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
            <tag> 全栈 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法模板</title>
      <link href="/2023/07/09/%E7%AE%97%E6%B3%95/myTemplate/"/>
      <url>/2023/07/09/%E7%AE%97%E6%B3%95/myTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l-<span class="number">1</span>,j=r+<span class="number">1</span>,x=a[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(a[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(x&lt;a[j]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a,l,j);</span><br><span class="line">    qsort(a,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的思想很简单，但是它的边界处理真的很傻x，稍不留神就会无限递归或无线循环。</p><p><strong>我曾如是写道:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> begin, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin&gt;=end) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=begin,j=end,x=arr[begin+end&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[i]&lt;x) i++;</span><br><span class="line">        <span class="keyword">while</span>(x&lt;arr[j]) j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">            swap(arr,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(arr,begin, i-<span class="number">1</span>);</span><br><span class="line">    qsort(arr, i+<span class="number">1</span>,end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当它在以下测试用例会无限循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><p>它会进入<strong>无限循环</strong>，<code>i</code>,<code>j</code>指针连动都不带动的！！！</p><p>而<code>do while</code>则会一言不合先动指针，然后再判断，这样指针就不会停滞下来。</p><p><strong>我曾如是写道:</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l-<span class="number">1</span>,j=r+<span class="number">1</span>,x=a[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(a[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(x&lt;a[j]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a,l,i-<span class="number">1</span>);</span><br><span class="line">    qsort(a,i+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况会造成<strong>无限递归</strong>的问题，实际上<code>x=a[l+r&gt;&gt;1]</code>和<code>qsort(a,l,j); qsort(a,j+1,r);</code>是相关联的，你也许会对分界点<code>j</code>的处理感到困扰。</p><p>且看<strong>证明</strong>：</p><p><strong>1.</strong>进行边界分析是为了避免分治时出现被分为0和n的情况，造成无限分治内存超限问题。<br><strong>2</strong>.若以j为分界点，对于<code>quick_sort(q, l, j)</code>, <code>quick_sort(q, j + 1, r)</code>，<code>j</code>有可能取<code>l~r</code>的任何一个值，若<code>j</code>取<code>l</code>，则<code>quick_sort(q, l + 1, r)</code>执行时会产生分割，不会出现<code>0</code>和<code>n</code>的情况；若<code>j</code>取<code>r</code>，则<code>quick_sort(q, l, r)</code>执行时会分割为<code>n</code>，会导致无限分治。<strong>本条结论：若在递归分治前保持<code>j = r</code>，那么就会出现无限分治的情况</strong><br><strong>3</strong>.所以只要在进入分治前不要让<code>j</code>取到<code>r</code>就可以了。那什么时候会取到r呢？初始化完毕时，<code>j</code>的值为<code>r + 1</code>，当执行过一次<code>do j--; while(q[j] &gt; x)</code>后，<code>j</code>变为<code>r</code>，并且恰好在此之后j都不会发生改变，即<code>do j--; while(q[j] &gt; x)</code>只会执行一次，如果保持<code>j = r</code>不变的话，那么<code>i</code>会在此之前一直自增到<code>i = r</code>，此时<code>j = r</code>; <code>i = r</code>不满足<code>i &lt; j</code>循环结束，此时，整个<code>while(i &lt; j) &#123;&#125;</code>循环只进行了<code>1</code>轮，分治，从而导致分治出了<code>0</code>和<code>n</code>两个情况。<strong>本条结论：若要在递归分治前保持<code>j = r</code>，那么<code>while(i &lt; j) &#123;&#125;</code>只能执行一次</strong><br><strong>4</strong>.现在把焦点转移到<code>x</code>的取值上，第3点说到，若出现无限分治问题，<code>i</code>会一直自增到<code>i = r</code>，若出现这种情况，那么<code>x</code>的取值一定是<code>q[r]</code>，因为如果<code>x</code>的值不为<code>q[r]</code>，那么一定会在x处存在<code>q[i] == x</code>，而<code>q[i] == x</code>会导致i自增暂时停止，那么就会往下执行，执行<code>do j--;</code>，判断后进入第二轮<code>while(i &lt; j) &#123;&#125;</code>循环，进入第二轮循环会使j自减至少两次，而他的初值为<code>r + 1</code>，也就是说，j的值不会一直保持在<code>j = r</code>上，也就不会导致无限分治。<strong>本条结论：若<code>x</code>的取值不为<code>q[r]</code>，那么<code>while(i &lt; j) &#123;&#125;</code>会至少执行两次，因此在进行递归分治前，<code>j</code>的值是一定小于<code>r</code>的。</strong><br><strong>5</strong>.<code>l + r &gt;&gt; 1</code>的值一定是小于r的，不会取到r，而<code>l + r + 1 &gt;&gt; 1</code>的值一定是大于<code>l</code>的，不会取到l<br>所以综合2、3、4、5的结论就得出了<strong>若以j为分界点，x取<code>q[l + r &gt;&gt; 1]</code>，此时不会出现无限分治的情况；若以<code>i</code>为分界点，<code>x</code>取<code>q[l + r + 1 &gt;&gt; 1]</code>，此时不会出现无限分治的情况</strong></p><blockquote><p>坑是真的多</p></blockquote><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(low&gt;high) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                <span class="keyword">return</span> binary_search(mid+<span class="number">1</span>, high, nums, target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                <span class="keyword">return</span> binary_search(low, mid-<span class="number">1</span>, nums, target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="number">0</span>, nums.length-<span class="number">1</span>, nums, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯相关(待更)</title>
      <link href="/2023/07/09/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao/"/>
      <url>/2023/07/09/%E8%93%9D%E6%A1%A5%E6%9D%AF/lanqiao/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题"><a href="#2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题" class="headerlink" title="2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题"></a><a href="https://www.dotcpp.com/oj/train/1097/">2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题</a></h1>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSP430单片机课设</title>
      <link href="/2023/06/18/%E5%8D%95%E7%89%87%E6%9C%BA/DBSend/"/>
      <url>/2023/06/18/%E5%8D%95%E7%89%87%E6%9C%BA/DBSend/</url>
      
        <content type="html"><![CDATA[<p>我们组完成的项目是远程温度检测系统设计。</p><h1 id="要实现的东西"><a href="#要实现的东西" class="headerlink" title="要实现的东西"></a>要实现的东西</h1><p>课设要做温度监视并且通过串口发送到PC和阿里云。主要功能是通过ds18b20传感器获取温度信息传给单片机，然后单片机通过串口给pc发送温度信息，同时给esp8266发送指令将温度信息上传到阿里云。</p><p>材料:</p><ul><li>DS18B20温度传感器</li><li>MSP430f169</li><li>esp8266</li><li>杜邦线</li></ul><h1 id="学习一下DS18B20"><a href="#学习一下DS18B20" class="headerlink" title="学习一下DS18B20"></a>学习一下DS18B20</h1><p>ds18b20是一个单总线的传感器，只通过一个引脚DQ便可进行数据传输。</p><ul><li>测温范围为-55℃到+125℃，在-10℃到+85℃范围内误差为±0.4°。</li><li>返回16位二进制温度数值</li></ul><p>引脚图：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302008086.png" alt="image-20230630163247929"></p><p>内部由 <strong>64 位ROM，高速暂存器，存储器</strong> 组成。</p><ul><li><p>64位ROM</p><p>  64 位ROM存储独有的序列号。</p><p>  ROM中的64位序列号是出厂前被光刻好的，它可以看作是该DS18B20的地址序列码，每个DS18B20的64位序列号均不相同。这样就可以实现一根总线上挂接多个DS18B20的目的。（但是我们不挂载多个）</p></li><li><p>高速暂存器</p><ul><li>温度传感器</li><li>一个字节的温度上限和温度下限报警触发器(TH和TL)</li><li><strong>配置寄存器允许用户设定9位，10位，11位和12位的温度分辨率，分别对应着温度的分辨率为：0.5°C，0.25°C，0.125°C，0.0625°C，默认为12位分辨率，</strong></li></ul></li><li><p>存储器：由一个高速的RAM和一个可擦除的EEPROM组成，EEPROM存储高温和低温触发器(TH和TL)以及配置寄存器的值，(就是存储低温和高温报警值以及温度分辨率)</p></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007739.png" alt="image-20230630170054847"></p><p>高速暂存器由9个字节组成</p><ul><li>字节0~1 是温度存储器，用来存储转换好的温度。第0个字节存储温度低8位，第一个字节存储温度高8位</li><li>字节2~3 是用户用来设置最高报警和最低报警值(TH和TL)。</li><li>字节4 是配置寄存器，用来配置转换精度，可以设置为9~12 位。</li><li>字节5~7 保留位。芯片内部使用</li><li>字节8 CRC校验位。是64位ROM中的前56位编码的校验码。由CRC发生器产生。</li></ul><h2 id="温度存储机制"><a href="#温度存储机制" class="headerlink" title="温度存储机制"></a>温度存储机制</h2><p>DS18B20的核心功能是直接温度-数字测量。其温度转换可由用户自定义为9、10、11、12位精度分别为0.5℃、0.25℃、0.125℃、0.0625℃分辨率。DS18B20采用16位补码的形式来存储温度数据，温度是摄氏度。当温度转换命令发布后，经转换所得的温度值以二字节补码形式存放在高速暂存存储器的第0和第1个字节。</p><p>高字节的五个S为符号位，温度为正值时S=1,温度为负值时S=0</p><p>剩下的11位为温度数据位，对于12位分辨率，所有位全部有效，对于11位分辨率，位0(bit0)无定义，对于10位分辨率，位0和位1无定义,对于9位分辨率，位0，位1，和位2无定义。<br><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007871.png" alt="image-20230630170742227"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007294.png" alt="image-20230630170857707"></p><h2 id="配置寄存器"><a href="#配置寄存器" class="headerlink" title="配置寄存器"></a>配置寄存器</h2><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007877.png" alt="image-20230630171111477"></p><p>在配置寄存器中，我们可以通过R0和R1设置DS18B20的转换分辨率，DS18B20在上电后默认R0=1和R1=1(12分辨率)，寄存器中的第7位和第0位到4位保留给设备内部使用。</p><h2 id="工作步骤"><a href="#工作步骤" class="headerlink" title="工作步骤"></a>工作步骤</h2><p>DS18B20的工作步骤可以分为三步：</p><p>1.初始化DS18B20<br>2.执行ROM指令<br>3.执行DS18B20功能指令</p><p><strong>其中第二步执行ROM指令，也就是访问每个DS18B20，搜索64位序列号，读取匹配的序列号值，然后匹配对应的DS18B20，如果我们仅仅使用单个DS18B20，可以直接跳过ROM指令。而跳过ROM指令的字节是0xCC。</strong></p><h3 id="1-初始化DS18B20"><a href="#1-初始化DS18B20" class="headerlink" title="1.初始化DS18B20"></a>1.初始化DS18B20</h3><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007086.png" alt="image-20230630171557953"></p><p>DQ管脚的常态是高电平。</p><p>根据时序图我们得出初始化的步骤：</p><ul><li>1.单片机拉低总线至少480us，产生复位脉冲，然后释放总线（拉高电平）转为接收模式。</li><li>2.这时DS8B20检测到请求之后，会拉低信号，大约持续60~240us表示应答。</li><li>3.DS8B20拉低电平的60~240us之间，单片机读取总线的电平，如果是低电平，那么表示初始化成功</li><li>4.DS18B20拉低电平60~240us之后，会释放总线。</li></ul><p>根据此我们可以写出MSP430的初始化代码(我把DQ接到了单片机的P10端口)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DS18B20_Reset</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">  DQDIR|=BIT0;<span class="comment">//输出模式</span></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低电平,单片机拉低总线至少480us</span></span><br><span class="line">  delay_us(<span class="number">500</span>);</span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高电平</span></span><br><span class="line">  delay_us(<span class="number">70</span>); <span class="comment">//60-240内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">DS18B20_Check</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> retry=<span class="number">0</span>;</span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//置为输入模式，DS18B20会拉低电平</span></span><br><span class="line">  <span class="keyword">while</span>((DQIN&amp;BIT0)&amp;&amp;retry&lt;<span class="number">270</span>)&#123;</span><br><span class="line">    delay_us(<span class="number">1</span>);</span><br><span class="line">    retry++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(retry&gt;=<span class="number">270</span>)&#123;<span class="comment">//检测是否拉低了电平</span></span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没拉</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//拉了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-执行ROM指令"><a href="#2-执行ROM指令" class="headerlink" title="2.执行ROM指令"></a>2.执行ROM指令</h3><p>我们首先需要掌握，如何向DS18B20写数据。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007165.png" alt="image-20230630173848300"></p><p><strong>总线控制器通过控制单总线高低电平持续时间从而把逻辑1或0写DS18B20中。每次只传输1位数据</strong></p><p>根据时序图我们得出以下结论</p><p><strong>写0</strong>:</p><ul><li>1.拉低总线持续60-120us</li><li>2.释放总线(拉高电平)</li></ul><p><strong>写1:</strong></p><ul><li>拉低总线2-15us</li><li>释放总线</li></ul><p>代码实现:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DS_Write_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span>&#123;</span><br><span class="line">  DQDIR|=BIT0;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> temp;    </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">    temp=data&amp;<span class="number">0x01</span>;<span class="comment">//处理位：最低位，通过移位来L-H逐位处理</span></span><br><span class="line">    data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp)&#123;<span class="comment">//1</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//0</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>掌握了写操作，我们还需要知道写什么：</p><p>常用的是：</p><p><strong>跳过ROM0xCC</strong></p><p><strong>温度转换 0x44</strong></p><blockquote><p>开启温度读取转换，读取好的温度会存储在高速暂存器的第0个和第一个字节中</p></blockquote><p><strong>读取温度 0xBE</strong></p><blockquote><p>读取高速暂存器存储的数据（共9个Byte）</p></blockquote><p><strong>对于本步骤我们选择直接跳过ROM指令</strong></p><h3 id="3-执行DS18B20功能指令"><a href="#3-执行DS18B20功能指令" class="headerlink" title="3.执行DS18B20功能指令"></a>3.执行DS18B20功能指令</h3><p>在此之前我们先了解以下怎么读DS18B20来自的数据</p><p><strong>读操作和写操作一样，也是按位读取，从低位向高位</strong></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007647.png" alt="image-20230630175657075"></p><p>根据时序图，我们总结如下步骤</p><ul><li>拉低总线至少1us，然后释放总线</li><li>开始读取，在一个读时隙内，若为1则释放总线为高电平，若为0则拉低电平。</li></ul><p>因此代码这样写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Bit</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data;</span><br><span class="line">  DQDIR|=BIT0;<span class="comment">//输出模式</span></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">  delay_us(<span class="number">2</span>);  </span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高，释放总线</span></span><br><span class="line">  </span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//输入</span></span><br><span class="line">  delay_us(<span class="number">12</span>); </span><br><span class="line">  <span class="keyword">if</span>(DQIN&amp;BIT0)&#123;</span><br><span class="line">    data=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    data=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  delay_us(<span class="number">50</span>); </span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Byte</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> data=<span class="number">0</span>,j;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">     data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">     j=DS_Read_Bit();</span><br><span class="line">     <span class="keyword">if</span>(j)&#123;</span><br><span class="line">      data|=<span class="number">0x80</span>; </span><br><span class="line">     &#125;</span><br><span class="line">     delay_us(<span class="number">30</span>);    </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了以上函数我们就可以从DS18B20取出温度的数据了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="title function_">Read_Temper</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> TH,TL,sign=<span class="number">0</span>;</span><br><span class="line">  <span class="type">short</span> tem;</span><br><span class="line">  DS18B20_Start() ;</span><br><span class="line">  DS18B20_Reset(); <span class="comment">//DS18B20复位</span></span><br><span class="line">  DS18B20_Check(); </span><br><span class="line">  DS_Write_Byte(<span class="number">0xcc</span>);<span class="comment">// skip rom</span></span><br><span class="line">  DS_Write_Byte(<span class="number">0xbe</span>);<span class="comment">// convert</span></span><br><span class="line">delay_us(<span class="number">750</span>);<span class="comment">//等待转换</span></span><br><span class="line">  TL=DS_Read_Byte();</span><br><span class="line">  TH=DS_Read_Byte();</span><br><span class="line">  <span class="keyword">if</span>(TH&lt;&lt;<span class="number">8</span>)&#123;<span class="comment">//负数，获取原码</span></span><br><span class="line">    TH=~TH;</span><br><span class="line">    TL=~TL;</span><br><span class="line">    sign=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tem=TH;</span><br><span class="line">  tem&lt;&lt;=<span class="number">8</span>;</span><br><span class="line">  tem+=TL;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//(((TH&lt;&lt;8) | TL)*0.0625);</span></span><br><span class="line">  tem=(<span class="type">float</span>)tem*<span class="number">0.625</span>;</span><br><span class="line">  <span class="keyword">if</span>(sign)&#123;</span><br><span class="line">    <span class="keyword">return</span> -tem;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> tem;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个疑点：为什么得到的数值要乘0.625呢？</strong></p><p>关于这个我思考了很久，一直在想0.625和12位分辨率的关系，结果发现官方文档里写了他们的对应关系，也就是说这不是算出来的是规定的，这也推出了一些结论：</p><p>小数位是低四位因为 $2^{-4}=0.0625$ 也就是说，寄存器内每步进1相当于温度步进0.0625。因需要如此处理，而代码中乘0.625是原来真实的值扩大了十倍，最后取整相当于保留了小数点后一位。而<code>（float）expression</code>的作用则是使计算更精确。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007038.png" alt="image-20230630195438080"></p><h1 id="学习一下串口"><a href="#学习一下串口" class="headerlink" title="学习一下串口"></a>学习一下串口</h1><p>司马自动更新操你妈</p><p><a href="https://baike.baidu.com/item/串口通信/3775296?fromModule=lemma_inlink">串口通信</a>(Serial Communication)， 是指外设和计算机间，通过数据<a href="https://baike.baidu.com/item/信号线/8807477?fromModule=lemma_inlink">信号线</a> 、地线、控制线等，按位进行传输数据的一种通讯方式。</p><p><strong>UART</strong>是通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器,是设备间进行异步通信的关键模块。UART负责处理数据总线和串行口之间的串/并、并/串转换，并规定了帧格式；通信双方只要采用相同的帧格式和波特率，就能在未共享时钟信号的情况下，仅用两根信号线（Rx 和Tx）就可以完成通信过程，因此也称为异步串行通信。</p><h2 id="MSP430UART初始化配置步骤"><a href="#MSP430UART初始化配置步骤" class="headerlink" title="MSP430UART初始化配置步骤:"></a>MSP430UART初始化配置步骤:</h2><ul><li><p><code>SWRT</code>复位(UxCTL)</p><p>  该位的状态影响着其他一些控制位和状态位的状态。在串行口的使用过程中，这一位是比较重要的控制位。一次正确的 USART 模块初始化应该是这样的顺序：先在 SWRST=1 情况下设置串行口；然后设置<br>  SWRST=0；最后如果需要中断，则设置相应的中断使能。  </p>  <table>      <tr>          <td>SWRT</td><td>0</td>      </tr>      <tr>              <td>SWRT</td><td>1</td>      </tr>  </table></li><li><p>设置字符长度<code>CHAR</code>(UxCTL)</p>  <table>      <tr>          <td>0</td><td>7位</td>      </tr>      <tr>              <td>1</td><td>8位</td>      </tr>  </table></li><li><p>设置串口时钟<code>SSEL</code>(UxTCTL )</p><p>  这两位确定波特率发生器的时钟源  </p>  <table>          <tr>                  <td>0</td><td>外部时钟 UCLKI</td>          </tr>          <tr>                  <td>1</td><td>辅助时钟 ACLK</td>          </tr>          <tr>                  <td>2</td><td>子系统时钟 SMCLK</td>          </tr>          <tr>                  <td>3</td><td>子系统时钟 SMCLK</td>          </tr>  </table></li><li><p>设置波特率寄存器UxBRx</p><p>  UxBR0 和 UxBR1 两个寄存器用于存放波特率分频因子的整数部分。<br>  其中 UXBR0 位低字节，UXBR1 为高字节。两字节和起来为一个 16 位字，成为 UBR。在异步通信时，UBR 的允许值不小于 3。如果 UBR&lt;3，则接收和发送会发生不可预测的错误  </p>  <table>          <tr>                  <td>UxBR0</td><td>低字节</td>          </tr>          <tr>                  <td>UxBR1</td><td>高字节</td>          </tr>     </table></li><li><p>设置UxMCTL 波特率调整寄存器  </p><p>  如果波特率发生器的输入频率BRCLK不是所需的波特率的整数倍，带有一小数，则整数部分写入UBR<br>  寄存器，小数部分由调整控制寄存器 UxCTL 的内容反映。波特率由以下公式计算：<br>  波特率 = BRCLK / (UBR+ (M7+M6+..+M0) / 8 )<br>  其中 M0,M1,…M6 及 M7 为控制器 UxMCTL 中的各位。调整寄存器的 8 为分别对应 8 次分频，如果<br>  M＝1，则相应次的分频增加一个时钟周期；如果 Mi＝0，则分频计数器不变  </p></li><li><p>配置串口模块控制寄存器<code>MEx</code></p>  <table>          <tr>                  <td>UTXE0</td><td>串口 0 的发送允许</td>          </tr>          <tr>                  <td>URXE0</td><td>串口 0 的接收允许</td>          </tr>          <tr>                  <td>UTXE1</td><td>串口 1 的发送允许</td>          </tr>          <tr>                  <td>URXE1</td><td>串口 1 的接收允许</td>          </tr>            <tr>                  <td>0</td><td>禁止</td>          </tr>             <tr>                  <td>1</td><td>允许</td>          </tr>  </table></li><li><p>SWRST=0</p></li><li><p>配置接收中断控制<code>IE</code></p>  <table>          <tr>                  <td>UTXIE0</td><td>串口 0 的发送中断允许</td>          </tr>          <tr>                  <td>URXIE0</td><td>串口 0 的接收中断允许</td>          </tr>          <tr>                  <td>UTXIE1</td><td>串口 1 的发送中断允许</td>          </tr>          <tr>                  <td>URXIE1</td><td>串口 1 的接收中断允许</td>          </tr>            <tr>                  <td>0</td><td>禁止</td>          </tr>             <tr>                  <td>1</td><td>允许</td>          </tr>  </table></li><li><p>设置IO口为普通I/O模式，设置IO口方向为输出</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P3SEL|= BIT4;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">P3DIR|= BIT4;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">P3SEL|= BIT5;</span><br></pre></td></tr></table></figure></li></ul><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UART0_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该位的状态影响着其他一些控制位和状态位的状态。在串行口的使用过程中，这一位是比较重要的控</span></span><br><span class="line"><span class="comment">  制位。一次正确的 USART 模块初始化应该是这样的顺序：先在 SWRST=1 情况下设置串行口；然后设置</span></span><br><span class="line"><span class="comment">  SWRST=0；最后如果需要中断，则设置相应的中断使能。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  U0CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U0CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U0TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U0BR1=baud_h;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U0BR0=baud_l;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U0MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME1|=UTXE0;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME1|=URXE0;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U0CTL&amp;=~SWRST;</span><br><span class="line">  IE1|=URXIE0;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT4;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT4;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送函数"><a href="#发送函数" class="headerlink" title="发送函数"></a>发送函数</h2><p>IFG1 中断标志寄存器 1<br>IFG2 中断标志寄存器 2</p><table>        <tr>                <td>UTXIFG0</td><td>串口 0 的发送中断标志</td>        </tr>        <tr>                <td>URXIFG0</td><td>串口 0 的接收中断标志</td>        </tr>        <tr>                <td>UTXIFG1</td><td>串口 1 的发送中断标志</td>        </tr>        <tr>                <td>URXIFG1</td><td>串口 1 的接收中断标志</td>        </tr>          <tr>                <td>0</td><td>无中断请求标志</td>        </tr>           <tr>                <td>1</td><td>有中断请求标志</td>        </tr></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte</span><span class="params">(uchar data)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>((IFG1&amp;UTXIFG0)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U0TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Str</span><span class="params">(uchar *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte(*s++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相应的中断函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART0RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART0_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data=<span class="number">0</span>;</span><br><span class="line">  data=U0RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>我的温度数据是short型两个字节，而串口是按字节逐位发送如何发送呢？</p><p>我目前只能一个字节一个字节的发，结果是整数十六进制的形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> highByte = (tt &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>; <span class="comment">// 高字节</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> lowByte = tt &amp; <span class="number">0xFF</span>; <span class="comment">// 低字节</span></span><br></pre></td></tr></table></figure><p>（写完整篇后更新）解决了，可以数字转换成字符串形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">Do_Num2Str</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">  <span class="type">char</span> str[<span class="number">5</span>]=&#123;<span class="number">0x30</span>+t/<span class="number">100</span>,<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>+t%<span class="number">10</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_temp_toPc</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* str=Do_Num2Str(t);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> v=<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">    Send_Str_to_0(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学习一下ESP8266"><a href="#学习一下ESP8266" class="headerlink" title="学习一下ESP8266"></a>学习一下ESP8266</h1><p><strong>ESP8266</strong> 是一款由上海<a href="https://zh.wikipedia.org/w/index.php?title=乐鑫信息科技&amp;action=edit&amp;redlink=1">乐鑫信息科技</a><a href="https://zh.wikipedia.org/wiki/ESP8266开发板#cite_note-Espressif_ESP8266-1">[1]</a>开发的可以作为<a href="https://zh.wikipedia.org/wiki/微控制器">微控制器</a>使用的成本极低且具有完整<a href="https://zh.wikipedia.org/wiki/TCP/IP协议栈">TCP/IP协议栈</a>的Wi-Fi <a href="https://zh.wikipedia.org/wiki/IoT">IoT</a>控制芯片。</p><p><strong>MQTT</strong>：一种通讯协议</p><p>我们只是使用，并不关注其原理</p><h2 id="烧写固件"><a href="#烧写固件" class="headerlink" title="烧写固件"></a>烧写固件</h2><p>一般的esp8266芯片需要烧录MQTT固件才能进行连接阿里云的功能</p><p>首先在<a href="https://docs.ai-thinker.com/esp8266">安信可的网站</a>下载固件，和烧录相关程序。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027436.png" alt="image-20230703161027070"></p><p>其中esp8266与USB-串口连线如下：</p><table>        <tr>                <td>TTL</td><td>ESP8266</td>        </tr>        <tr>                <td>3V3</td><td>3V3</td>        </tr>        <tr>                <td>GND</td><td>GND</td>        </tr>        <tr>                <td>GND</td><td>IO0</td>        </tr>          <tr>                <td>RX/TX</td><td>TX/RX</td>        </tr>           <tr>                <td>GND</td><td>RST</td>        </tr></table><p>当程序显示<code>等待上电复位时</code>让RST接地,然后拉高。</p><p>这样就完成了烧录</p><h2 id="完成与阿里云的通讯"><a href="#完成与阿里云的通讯" class="headerlink" title="完成与阿里云的通讯"></a>完成与阿里云的通讯</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AT+RST</span><br><span class="line">//用于重置</span><br><span class="line"> </span><br><span class="line">AT+CWMODE=1</span><br><span class="line">//设置当前模式为STA模式</span><br><span class="line"> </span><br><span class="line">AT+CWLAP</span><br><span class="line">//查看当前环境下的WIFI</span><br><span class="line"> </span><br><span class="line">AT+CWJAP=&quot;WIFI名称&quot;,&quot;WIFI密码&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AT+MQTTUSERCFG=0,1,&quot;client_id&quot;,&quot;username&quot;,&quot;password&quot;,0,0,&quot;&quot;</span><br><span class="line">//client_id随便写，username和password填生成的参数</span><br><span class="line"> </span><br><span class="line">AT+MQTTCLIENTID=0,&quot;ClientId&quot;</span><br><span class="line">//ClientId填生成的参数，注意要在每个逗号前加分隔符&quot;\&quot;</span><br><span class="line"> </span><br><span class="line">AT+MQTTCONN=0,&quot;连接域名&quot;,1883,1</span><br><span class="line">//连接域名填上面生成的，注意要去掉端口号1883，因为后面已经设置了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关参数由该软件生成。<img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027801.png" alt="image-20230703161938924"></p><p>成功之后阿里云的云平台的相关设备会显示在线。</p><h1 id="与阿里云进行数据交互"><a href="#与阿里云进行数据交互" class="headerlink" title="与阿里云进行数据交互"></a>与阿里云进行数据交互</h1><h2 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h2><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027063.png" alt="image-20230703163750214"></p><p>复制内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AT+MQTTSUB=0,&quot;topic&quot;,1</span><br><span class="line">//&quot;topic&quot;改为我们刚刚复制的内容</span><br><span class="line"><span class="meta prompt_">///sys/iknjuQejQ6d/$</span><span class="language-bash">&#123;deviceName&#125;/thing/service/property/set</span></span><br><span class="line"><span class="meta prompt_">//$</span><span class="language-bash">&#123;deviceName&#125;用我们上文新建设备时候的name</span></span><br></pre></td></tr></table></figure><p>成功则显示在下图</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027281.png" alt="image-20230703164938420"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>按顺序操作</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027448.png" alt="image-20230703165357091"></p><p>可以看见右方返回参数，串口助手也返回了相关信息</p><h2 id="上报数据"><a href="#上报数据" class="headerlink" title="上报数据"></a>上报数据</h2><p>复制该内容</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027951.png" alt="image-20230703165552998"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AT+MQTTPUB=0,&quot;topic&quot;,&quot;data&quot;,1,0</span><br><span class="line">//&quot;topic&quot;选择复制的/sys/iknjuQejQ6d/$&#123;deviceName&#125;/thing/event/property/post</span><br><span class="line"><span class="meta prompt_">//$</span><span class="language-bash">&#123;deviceName&#125;填对应的deviceName</span></span><br><span class="line">//&quot;data&quot;采用json数据格式，&#123;\&quot;params\&quot;:&#123;\&quot;temperature\&quot;:20&#125;&#125;，其中temperature为属性的标识符</span><br></pre></td></tr></table></figure><p>成功上传数据！！！<img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027931.png" alt="image-20230703170245805"></p><h1 id="esp8266与MSP430f149的交互"><a href="#esp8266与MSP430f149的交互" class="headerlink" title="esp8266与MSP430f149的交互"></a>esp8266与MSP430f149的交互</h1><p>先找到引脚功能表</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027824.png" alt="image-20230703183526488"></p><p>UART0在MSP430f169有现成的接口，用于和PC通信，UART1的TXD和RXD分别位于<code>P36</code>和<code>P37</code>这两个IO接口。</p><p>如下初始化设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UART1_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  U1CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U1CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U1TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U1BR1=<span class="number">0</span>;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U1BR0=<span class="number">69</span>;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U1MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME2|=UTXE1;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME2|=URXE1;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U1CTL&amp;=~SWRST;</span><br><span class="line">  IE2|=URXIE1;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT6;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT6;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UART1对应esp8266芯片，向其发送数据，相当于对它发送命令，其向主控机返回的信息，可以通过中断函数向UART0发送数据，显示在串口调试助手用于调试。</p><p>定义相关功能函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_0</span><span class="params">(uchar data)</span><span class="comment">//发至UART0</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG1&amp;UTXIFG0)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U0TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_1</span><span class="params">(uchar data)</span><span class="comment">//发至UART1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG2&amp;UTXIFG1)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U1TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_0</span><span class="params">( uchar *s)</span><span class="comment">//发至UART1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_0(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_1</span><span class="params">( <span class="type">char</span> *s)</span><span class="comment">//发至UART1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_1(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART1RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART1_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U1RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART0RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART0_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U0RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上功能就可以完成向阿里云转发上传温度数据了！</p><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;msp430f169.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DQOUT P1OUT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DQDIR P1DIR</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DQIN P1IN</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Port_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">P4SEL = <span class="number">0x00</span>;</span><br><span class="line">  P4DIR = <span class="number">0xFF</span>;                   <span class="comment">//数据口输出模式</span></span><br><span class="line">  P5SEL = <span class="number">0x00</span>;</span><br><span class="line">  P5DIR|= BIT5 + BIT6 + BIT7;     <span class="comment">//控制口设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DS18B20_Reset</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">  DQDIR|=BIT0;<span class="comment">//输出模式</span></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低电平,单片机拉低总线至少480us</span></span><br><span class="line">  delay_us(<span class="number">500</span>);</span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高电平</span></span><br><span class="line">  delay_us(<span class="number">70</span>); <span class="comment">//60-240内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">DS18B20_Check</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> retry=<span class="number">0</span>;</span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//置为输入模式，DS18B20会拉低电平</span></span><br><span class="line">  <span class="keyword">while</span>((DQIN&amp;BIT0)&amp;&amp;retry&lt;<span class="number">270</span>)&#123;</span><br><span class="line">    delay_us(<span class="number">1</span>);</span><br><span class="line">    retry++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(retry&gt;=<span class="number">270</span>)&#123;<span class="comment">//检测是否拉低了电平</span></span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没拉</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//拉了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.单片机拉低总线至少480us，产生复位脉冲，然后释放总线（拉高电平）。</span></span><br><span class="line"><span class="comment">2.这时DS8B20检测到请求之后，会拉低信号，大约60~240us表示应答。</span></span><br><span class="line"><span class="comment">3.DS8B20拉低电平的60~240us之间，单片机读取总线的电平，如果是低电平，那么表示初始化成功</span></span><br><span class="line"><span class="comment">4.DS18B20拉低电平60~240us之后，会释放总线。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DS_Write_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span>&#123;</span><br><span class="line">  DQDIR|=BIT0;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> temp;    </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">    temp=data&amp;<span class="number">0x01</span>;<span class="comment">//处理位：最低位，通过移位来L-H逐位处理</span></span><br><span class="line">    data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp)&#123;<span class="comment">//1</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//0</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Bit</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data;</span><br><span class="line">  </span><br><span class="line">  DQDIR|=BIT0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">  delay_us(<span class="number">2</span>);  </span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高，释放总线</span></span><br><span class="line">  </span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//输入</span></span><br><span class="line">  delay_us(<span class="number">12</span>); </span><br><span class="line">  <span class="keyword">if</span>(DQIN&amp;BIT0)&#123;</span><br><span class="line">    data=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    data=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  delay_us(<span class="number">50</span>); </span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Byte</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> data=<span class="number">0</span>,j;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">     data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">     j=DS_Read_Bit();</span><br><span class="line">     <span class="keyword">if</span>(j)&#123;</span><br><span class="line">      data|=<span class="number">0x80</span>; </span><br><span class="line">     &#125;</span><br><span class="line">     delay_us(<span class="number">30</span>);    </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> data;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART0_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该位的状态影响着其他一些控制位和状态位的状态。在串行口的使用过程中，这一位是比较重要的控</span></span><br><span class="line"><span class="comment">  制位。一次正确的 USART 模块初始化应该是这样的顺序：先在 SWRST=1 情况下设置串行口；然后设置</span></span><br><span class="line"><span class="comment">  SWRST=0；最后如果需要中断，则设置相应的中断使能。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  U0CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U0CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U0TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U0BR1=<span class="number">0</span>;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U0BR0=<span class="number">69</span>;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U0MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME1|=UTXE0;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME1|=URXE0;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U0CTL&amp;=~SWRST;</span><br><span class="line">  IE1|=URXIE0;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT4;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT4;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART1_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  U1CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U1CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U1TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U1BR1=<span class="number">0</span>;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U1BR0=<span class="number">69</span>;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U1MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME2|=UTXE1;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME2|=URXE1;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U1CTL&amp;=~SWRST;</span><br><span class="line">  IE2|=URXIE1;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT6;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT6;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_0</span><span class="params">(uchar data)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG1&amp;UTXIFG0)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U0TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_1</span><span class="params">(uchar data)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG2&amp;UTXIFG1)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U1TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_0</span><span class="params">( uchar *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_0(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_1</span><span class="params">( <span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_1(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DS18B20_Start</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;                  </span><br><span class="line">  DS18B20_Reset();   </span><br><span class="line">  aa=DS18B20_Check(); </span><br><span class="line">  DS_Write_Byte(<span class="number">0xcc</span>);<span class="comment">// skip rom</span></span><br><span class="line">  DS_Write_Byte(<span class="number">0x44</span>);<span class="comment">// convert</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="title function_">Read_Temper</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> TH,TL,sign=<span class="number">0</span>;</span><br><span class="line">  <span class="type">short</span> tem;</span><br><span class="line">  DS18B20_Start() ;</span><br><span class="line">  DS18B20_Reset(); <span class="comment">//DS18B20复位</span></span><br><span class="line">  DS18B20_Check(); </span><br><span class="line">  DS_Write_Byte(<span class="number">0xcc</span>);<span class="comment">// skip rom</span></span><br><span class="line">  DS_Write_Byte(<span class="number">0xbe</span>);<span class="comment">// convert</span></span><br><span class="line">  delay_us(<span class="number">750</span>);<span class="comment">//等待转换</span></span><br><span class="line">  TL=DS_Read_Byte();</span><br><span class="line">  TH=DS_Read_Byte();</span><br><span class="line">  <span class="keyword">if</span>(TH&lt;&lt;<span class="number">8</span>)&#123;</span><br><span class="line">    TH=~TH;</span><br><span class="line">    TL=~TL;</span><br><span class="line">    sign=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tem=TH;</span><br><span class="line">  tem&lt;&lt;=<span class="number">8</span>;</span><br><span class="line">  tem+=TL;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">//(((TH&lt;&lt;8) | TL)*0.0625);</span></span><br><span class="line">  tem=(<span class="type">float</span>)tem*<span class="number">0.625</span>;</span><br><span class="line">  <span class="keyword">if</span>(sign)&#123;</span><br><span class="line">    <span class="keyword">return</span> -tem;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> tem;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Display_Temp</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    LCD_write_char(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    t=<span class="number">-1</span>*t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> sw,gw,xs1,xs2;</span><br><span class="line">  <span class="type">short</span> bt=t;</span><br><span class="line">  xs1=bt%<span class="number">10</span>;</span><br><span class="line">  gw=(bt%<span class="number">100</span>-bt%<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">  sw=bt/<span class="number">100</span>;</span><br><span class="line">  LCD_write_char(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0x30</span>+sw);</span><br><span class="line">  LCD_write_char(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0x30</span>+gw);</span><br><span class="line">  LCD_write_char(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  LCD_write_char(<span class="number">4</span>,<span class="number">1</span>,<span class="number">0x30</span>+xs1);</span><br><span class="line">  delay_ms(<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">my_strcat</span><span class="params">(<span class="type">char</span> *str1, <span class="type">char</span> *str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* result; </span><br><span class="line">    <span class="keyword">while</span> (*str1 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        *result = *str1;</span><br><span class="line">        result++;</span><br><span class="line">        str1++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        *result = *str2;</span><br><span class="line">        result++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *result = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在结果字符串末尾添加字符串结束标志</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">Do_Num2Str</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="type">char</span> str[<span class="number">5</span>]=&#123;<span class="number">0x30</span>+t/<span class="number">100</span>,<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>+t%<span class="number">10</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_temp_toPc</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* str=Do_Num2Str(t);</span><br><span class="line">    <span class="comment">//Send_Byte_0(0x30+t/100);</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> v=<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//Send_Byte_0(v);</span></span><br><span class="line">    <span class="comment">//Send_Byte_0(0x2e);</span></span><br><span class="line">    <span class="comment">//Send_Byte_0(0x30+t%10);</span></span><br><span class="line">    Send_Str_to_0(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WIFI_GOT</span><span class="params">()</span>&#123;</span><br><span class="line">  delay_ms(<span class="number">3000</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+CWJAP=\&quot;SSID\&quot;,\&quot;PWD\&quot;\r\n&quot;</span>); </span><br><span class="line">  delay_ms(<span class="number">6000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Aliyun_conn</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+MQTTUSERCFG=0,1,\&quot;NULL\&quot;,\&quot;DEVICENAME\&quot;,&quot;</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;\&quot;\&quot;,0,0,\&quot;\&quot;\r\n&quot;</span>);</span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+MQTTCLIENTID=0,\&quot;\r\n&quot;</span>);</span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+MQTTCONN=0,\&quot;,1883,1\r\n&quot;</span>); </span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// Stop watchdog timer to prevent time out reset</span></span><br><span class="line">  WDTCTL = WDTPW + WDTHOLD;</span><br><span class="line">  Clock_Init();                       <span class="comment">//系统时钟设置</span></span><br><span class="line">  Port_init();</span><br><span class="line">  UART0_Init();</span><br><span class="line">  UART1_Init();</span><br><span class="line">  delay_ms(<span class="number">100</span>); </span><br><span class="line">  LCD_init();                         <span class="comment">//液晶参数初始化设置</span></span><br><span class="line">  LCD_clear();                     <span class="comment">//清屏</span></span><br><span class="line">  _EINT();</span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">  WIFI_GOT();</span><br><span class="line">  Aliyun_conn();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    delay_ms(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">short</span> t=Read_Temper();</span><br><span class="line">    <span class="keyword">if</span>(aa==<span class="number">0</span>)&#123;</span><br><span class="line">      LCD_write_str(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;ok&quot;</span>); </span><br><span class="line">      delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(aa==<span class="number">1</span>)&#123;</span><br><span class="line">      LCD_write_str(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;no&quot;</span>); </span><br><span class="line">      delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Send_temp_toPc(t);</span><br><span class="line">    Display_Temp(t);</span><br><span class="line">    <span class="type">char</span>* temS=Do_Num2Str(t);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      Send_Str_to_1(<span class="string">&quot;AT+MQTTPUB=0,\&quot;/sys/a1grBfxFQal/esp8266/thing/event/property/post\&quot;,\&quot;&#123;\\\&quot;params\\\&quot;:&#123;\\\&quot;CurrentTemperature\\\&quot;:&quot;</span>);</span><br><span class="line">      Send_Str_to_1(temS);</span><br><span class="line">      Send_Str_to_1(<span class="string">&quot;&#125;&#125;\&quot;,1,0\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LCD_clear();</span><br><span class="line">    delay_ms(<span class="number">1000</span>); </span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART1RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART1_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U1RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART0RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART0_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U0RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过阿里云平台<code>IoT Sutdio</code>可以开发一个物联网APP来方便查看温度</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050042551.png" alt="image-20230705003904473"></p><h1 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h1><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307051322217.png" alt="image-20230705132215490"></p><p><strong>An unforgettable journey！！！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> MSP430 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS_课设</title>
      <link href="/2023/06/18/OS/OS%E8%AF%BE%E8%AE%BE/"/>
      <url>/2023/06/18/OS/OS%E8%AF%BE%E8%AE%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="配置VScode"><a href="#配置VScode" class="headerlink" title="配置VScode"></a>配置VScode</h1><ul><li><p>安装C/C++扩展</p></li><li><p>安装完成之后，直接在VsCode中按 <code>ctrl+shift+p</code>快捷键,选择<code>C/C++编辑UI</code>。</p></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006628.png" alt="image-20230618182000074"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182035387.png" alt="image-20230618171213466"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006081.png" alt="image-20230618171938200"></p><ul><li><p>在目录下新建<code>output</code>文件夹，在task.json中划线部分修改为<code>output</code>，这样生成的<code>exe</code>就会保存至<code>/output</code>文件夹下</p><p>  <img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006200.png" alt="image-20230618182628771"></p></li></ul><p>我想让程序输出在外部终端，发现C/C++插件现在的版本无法做到这一点，需要回退，而我的vscode TMD无法安装这个插件的历史版本，于是经过搜索知道，在<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">网页</a>抓包把版本信息替换为想要的版本 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-vscode/vsextensions/cpptools/1.8.4/vspackage?targetPlatform=win32-x64</span><br></pre></td></tr></table></figure><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006466.png" alt="image-20230618195057503"></p><p>在<code>lauch.json</code>中添加<code>&quot;externalConsole&quot;: true</code></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006392.png" alt="image-20230618195230187"></p><p>输出如图：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006298.png" alt="image-20230618195535278"></p><p>是的，又出现了中文乱码！！！！而在vscode内部终端则正常，一眼丁真鉴定为，cmd的编码。经过查询，按以下方法可以成功更改编码。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182007512.png" alt="image-20230618195918187"></p><p>在cmd输入<code>chcp</code>返回<code>Active code page: 65001</code>说明成功更改为<code>utf-8</code></p><p>再次运行：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182007626.png" alt="image-20230618200530767"></p><p>成功！，虽然字体也变了的说，但是也可以接受吧。。。</p><p>不要忘记修改<code>output</code>文件夹配置：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182035173.png" alt="image-20230618202224084"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182035234.png" alt="image-20230618202301910"></p><h1 id="OS文件系统知识梳理"><a href="#OS文件系统知识梳理" class="headerlink" title="OS文件系统知识梳理"></a>OS文件系统知识梳理</h1><ul><li>定义：文件就是一组有意义的信息/数据的集合</li><li>属性<ul><li>文件名 ：同一目录下不允许有重名文件</li><li>标识符：具有唯一性，用于区分各个文件的一种内部名称</li><li>文件类型</li><li>位置：文件存放的路径（用户使用），在外层中的地址（OS使用，对用户透明）</li><li>大小</li><li>创建时间，上次修改时间</li><li>文件所有者信息</li><li>保护信息：对文件进行保护的访问控制信息</li></ul></li></ul><h2 id="文件内部的组织形式（逻辑结构）"><a href="#文件内部的组织形式（逻辑结构）" class="headerlink" title="文件内部的组织形式（逻辑结构）"></a>文件内部的组织形式（逻辑结构）</h2><p>所谓逻辑结构就是站在用户的观点来看，文件内部的数据应该是如何组织起来的</p><ul><li><p>无结构文件,如.txt,由一些二进制和字符流组成，又称为流式文件</p></li><li><p>有结构文件，如.csv,sql_table,由一组相似的记录组成，又称记录文件</p><p>  根据各条长度是否相等，分为定长记录和可变长记录(常见)</p><ul><li><p>记录是一组相关数据项的集合，和sql的元组很像捏</p></li><li><p>逻辑结构</p><ul><li><p>顺序文件：记录间在逻辑上顺序排列，记录可定长可变长</p><ul><li><p>又分为串（记录之间的顺序于关键字无关，通常按存放顺序）和顺序结构（记录之间的顺序按关键字顺序排列）</p></li><li><p>存储</p><ul><li><p>链式存储</p></li><li><p>顺序存储</p><p>  <img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152401.png" alt="image-20230619094303733"></p></li></ul></li><li><p>索引文件</p><ul><li><p>对于可变长的记录文件，使用顺序文件的逻辑结构时，访问第i条记录，需要重头遍历，对于此类文件，我们采用索引文件结构。因为索引文件本身是定长记录，因此可以快速找到第i个记录对应的索引项，将索引号作为关键字，可实现顺序结构，支持折半查找。</p><p>| 索引号 | 长度m | 指针ptr |<br>| :——: | :—-: | ———- |<br>|   0    | $m_0$ |         |<br>|  …   |  …  |         |<br>|   i    | $m_i$ |         |</p></li></ul></li><li><p>索引顺序文件</p><ul><li>每个索引项对应一个记录，可能索引文件会比文件本身大，降低存储空间利用率，因此采用索引文件和顺序文件的折中。</li><li>与索引文件区别是，它的索引项指向的是一组记录</li></ul></li><li><p>多级索引顺序文件</p><ul><li>如果文件超大，需要采用，类似二级页表</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote><p>目录是一种数据结构，用于标志系统中的文件及其物理位置</p><p>供检索时使用</p></blockquote><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152291.png" alt="image-20230619100732670"></p><ul><li><p>文件控制块(FCB)</p><ul><li><p>FCB的有序集合称为文件目录，FCB包括基本信息(文件名，物理地址，逻辑结构，物理结构)，存取控制信息，使用信息。最重要的就是文件名和文件存放的物理地址，可以实现按名存取。</p></li><li><p>操作</p><ul><li><p>搜索，用户使用文件系统需要根据文件名搜索目录，找到该文件对应的目录项</p></li><li><p>创建文件，创建一个新文件，需要在其所属的目录中增加一个目录项</p></li><li><p>删除文件，需要在所属目录删除对应的目录项</p></li><li><p>显示目录，显示目录的文件和属性</p></li><li><p>修改目录，某些文件属性保存在目录中，当这些属性变化时需要修改目录</p></li><li><p>结构</p><ul><li><p>单级目录</p><ul><li>实现了按名存取，但是不允许文件重名</li></ul></li><li><p>两级目录</p><ul><li><p>分为：</p><ul><li><p>主文件目录（MFD）<br>  | 列名1 | 列名2 | 列名3 |<br>  | ——- | ——- | ——- |<br>  | 内容1 | 内容2 | 内容3 |<br>  | 内容4 | 内容5 | 内容6 |</p><p>  |  MFD  |<br>  | ——- |<br>  | User1 |<br>  |  …  |</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>                - 用户文件目录（UFD）                    | 文件名 | ..   | 存放位置 |                    | :-----: | ----- | :-----: |                    |   a    |      |   ...    |                    |   b    |      |    ..    |                两级目录不同用户允许文件重名，也可以实现在目录上实现访问限制            - 多级目录（树形目录结构）                - ![image-20230619110407145](https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152388.png)            - 无环图目录结构                - ![image-20230619111003269](https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152015.png)</code></pre><h2 id="应提供的功能"><a href="#应提供的功能" class="headerlink" title="应提供的功能"></a>应提供的功能</h2><ul><li><p>创建文件</p><ul><li><p>需要提供</p><ul><li>所需外存空间大小(如：一个盘块,1KB)</li><li>文件存放路径(D:/Demo)</li><li><p>文件名</p></li><li><p>OS做的事情:</p><ul><li>在外存中找到文件所需空间</li><li>根据路径信息，找到该目录对应的目录文件</li><li>在目录中添加该文件的目录项</li></ul></li></ul></li></ul></li><li><p>读文件</p><ul><li>需要提供<ul><li>打开文件表的文件编号</li><li>指明读入多少数据</li><li>放在内存的位置</li></ul></li><li>OS做的事情<ul><li>将r指针指向的外存中，将用户指定大小的数据读入用户指定的内存区域</li></ul></li></ul></li><li><p>写文件</p><ul><li>需要提供<ul><li>打开文件表的文件编号</li><li>写回多少数据</li><li>写会外存的数据放在内存中的位置</li></ul></li><li>OS做的事情<ul><li>从指定的内存中，将用户指定大小的数据写回w指针指向的外存</li></ul></li></ul></li><li><p>删除文件</p><ul><li>需要提供<ul><li>存放路径</li><li>文件名</li></ul></li><li>OS做的事情<ul><li>找到文件名对应的目录项</li><li>根据该目录项在外存的位置，文件大小等信息,回收文件占用的磁盘块</li><li>删除对应目录项</li></ul></li></ul></li><li><p>打开文件</p><ul><li><p>需要提供</p><ul><li>存放路径</li><li>文件名</li><li>操作类型（r,rw等）</li></ul></li><li><p>OS做的事情</p><ul><li><p>根据路径找到目录文件</p></li><li><p>检查用户是否具有指定的操作权限</p></li><li><p>将目录项复制到内存中的”打开文件表”中，并将对应表目的编号返回给用户，之后用户使用打开文件表的编号来指明要操作的文件。</p><p>  <img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152267.png" alt="image-20230619113515732"></p></li></ul></li></ul></li><li><p>关闭文件</p><ul><li>需要提供<ul><li>打开文件表</li></ul></li><li>OS做的事情<ul><li>将进程的打开文件表的对应表项删除</li><li>回收分配给该文件的内存空间等资源</li><li>系统表打开计数器-1，如果为0则删除系统表对应表项。</li></ul></li></ul></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152802.png" alt="image-20230619115042260"></p><h2 id="如何存放在外存（物理结构）："><a href="#如何存放在外存（物理结构）：" class="headerlink" title="如何存放在外存（物理结构）："></a>如何存放在外存（物理结构）：</h2><p>物理结构就是从OS的观点来看，文件的数据如何存放在外存中的</p><ul><li><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152371.png" alt="image-20230619091646943"></li></ul><p>其他功能：文件共享，文件保护</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string command;<span class="comment">//用户指令</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; path_list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">File</span>&#123;<span class="comment">//定义文件信息</span></span><br><span class="line">    string filename;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    string content=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">time_t</span> time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>&#123;<span class="comment">//定义用户信息</span></span><br><span class="line">    string user_name;</span><br><span class="line">    string pwd; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir</span>&#123; <span class="comment">//目录信息</span></span><br><span class="line">    string dir_name;</span><br><span class="line">    vector&lt;<span class="keyword">struct</span> File&gt; file;</span><br><span class="line">    vector&lt;<span class="keyword">struct</span> Dir&gt; dir;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir_Node</span>&#123;<span class="comment">//目录联系信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir</span> dir;</span><br><span class="line">    vector&lt;<span class="keyword">struct</span> Dir_Node*&gt; child;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Thread_Open_File_Table</span>&#123;<span class="comment">//进程打开文件列表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">File</span> file;</span><br><span class="line">    <span class="type">int</span> permission; <span class="comment">//1读，2写，3读写 </span></span><br><span class="line">    <span class="type">char</span>* p;<span class="comment">//读写指针</span></span><br><span class="line">    <span class="type">int</span> index;<span class="comment">//系统索引号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sys_Open_File_Table</span>&#123;<span class="comment">//系统打开文件列表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">File</span> file;</span><br><span class="line">    <span class="type">int</span> permission; <span class="comment">//1读，2写，3读写 </span></span><br><span class="line">    <span class="type">char</span>* p;<span class="comment">//读写指针</span></span><br><span class="line">    <span class="type">int</span> index;<span class="comment">//系统索引号</span></span><br><span class="line">    <span class="type">int</span> count;<span class="comment">//引用计数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">struct</span> User&gt; MFD; <span class="comment">//主目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Welcome</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Command_Judge</span><span class="params">(string command)</span></span>; <span class="comment">//判断指令</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_User</span><span class="params">()</span></span>;<span class="comment">//创建用户</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show_User</span><span class="params">()</span></span>; <span class="comment">//显示用户信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Login_In</span><span class="params">(<span class="keyword">struct</span> User u)</span></span>; <span class="comment">//用户登录判定</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dir</span><span class="params">()</span></span>; <span class="comment">////显示当前目录下的文件信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Node_Dir</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd</span><span class="params">(string dir_name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd_Rollback</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MkDir</span><span class="params">(string dir_name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Open</span><span class="params">(string filename)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Read</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Write</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Create</span><span class="params">(string fileName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showU</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowFileInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *pDir_root=<span class="keyword">new</span> Dir_Node;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *pCurDir=pDir_root; <span class="comment">//当前目录</span></span><br><span class="line">vector&lt;<span class="keyword">struct</span> Sys_Open_File_Table&gt; SOFT; <span class="comment">//系统打开文件表</span></span><br><span class="line">vector&lt;<span class="keyword">struct</span> Thread_Open_File_Table&gt; TOFT;<span class="comment">//进程打开文件表</span></span><br><span class="line"><span class="type">time_t</span> now_time; <span class="comment">//时间戳变量</span></span><br><span class="line">string Login_In_status=<span class="string">&quot;&quot;</span>;<span class="comment">//登录状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Welcome</span>();</span><br><span class="line">    pDir_root-&gt;dir.dir_name=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    pDir_root-&gt;parent=<span class="literal">nullptr</span>;</span><br><span class="line">    path_list.<span class="built_in">push_back</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        now_time=<span class="built_in">time</span>(<span class="literal">NULL</span>);<span class="comment">//实时时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path_list.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==path_list.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                cout&lt;&lt;path_list[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;path_list[i]&lt;&lt;<span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Login_In_status!=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;Login_In_status&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;: &gt;&gt;&gt; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;command;</span><br><span class="line">        <span class="built_in">Command_Judge</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Command_Judge</span><span class="params">(string command)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(command==<span class="string">&quot;help&quot;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;dir-----显示当前目录文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;mkdir-----新建目录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;cd-----切换到指定目录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;cd..-----回退一级目录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;del-----删除文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;open-----打开文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;create-----新建文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;read-----读文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;write-----写文件&quot;</span>&lt;&lt;endl;        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;close-----关闭文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;create_user-----创建用户&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;login-----用户登录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;showU-----显示用户信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;showF-----显示文件详细信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;dir&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Dir</span>();</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;exit&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;create_user&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Create_User</span>();</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">struct</span> User u;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入用户名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;u.user_name;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入密码&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;u.pwd;</span><br><span class="line">        <span class="built_in">Login_In</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;cd&quot;</span>)&#123;</span><br><span class="line">        string dir_name;</span><br><span class="line">        cin&gt;&gt;dir_name;</span><br><span class="line">        <span class="built_in">Cd</span>(dir_name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;cd..&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Cd_Rollback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;mkdir&quot;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入新建目录名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string dir_name;</span><br><span class="line">        cin&gt;&gt;dir_name;</span><br><span class="line">        <span class="built_in">MkDir</span>(dir_name);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;create&quot;</span>)&#123;</span><br><span class="line">        string fileName;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;fileName;</span><br><span class="line">        <span class="keyword">while</span>(fileName.<span class="built_in">find</span>(<span class="string">&quot;/&quot;</span>)!=std::string::npos)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件名不能包含&#x27;/&#x27; !!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cin&gt;&gt;fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fileName.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>)==std::string::npos||fileName.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>)==fileName.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件必须有后缀 !!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cin&gt;&gt;fileName;</span><br><span class="line">        &#125;         </span><br><span class="line">       </span><br><span class="line">        <span class="built_in">Os_Create</span>(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;open&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string fileName;</span><br><span class="line">        cin&gt;&gt;fileName;</span><br><span class="line">        <span class="built_in">Os_Open</span>(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;write&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Os_Write</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;read&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Os_Read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;showU&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">showU</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;showF&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">ShowFileInfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;不是命令&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Login_In</span><span class="params">(<span class="keyword">struct</span> User u)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MFD[i].user_name==u.user_name)&#123;</span><br><span class="line">            <span class="keyword">if</span>(MFD[i].pwd==u.pwd)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;登录成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">                Login_In_status=u.user_name;<span class="comment">//登录状态改变</span></span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==u.user_name)&#123;</span><br><span class="line">                        pCurDir=pCurDir-&gt;child[i];</span><br><span class="line">                        path_list.<span class="built_in">push_back</span>(u.user_name);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;密码错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;用户名不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dir</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;pCurDir-&gt;child[i]-&gt;dir.dir_name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;pCurDir-&gt;dir.file[i].filename&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Node_Dir</span><span class="params">(<span class="keyword">struct</span> Dir_Node *pcurDir, <span class="keyword">struct</span> Dir newDir)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *child_node=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    child_node-&gt;dir=newDir;</span><br><span class="line">    child_node-&gt;parent=pcurDir;</span><br><span class="line"></span><br><span class="line">    pcurDir-&gt;child.<span class="built_in">push_back</span>(child_node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Node_File</span><span class="params">(<span class="keyword">struct</span> Dir_Node *pcurDir, <span class="keyword">struct</span> Dir newDir)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *child_node=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    child_node-&gt;dir.file=newDir.file;</span><br><span class="line">    child_node-&gt;parent=pcurDir;</span><br><span class="line"></span><br><span class="line">    pcurDir-&gt;child.<span class="built_in">push_back</span>(child_node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;非根目录无法创建用户!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">User</span> u;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入用户名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;u.user_name;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入密码&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;u.pwd;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MFD[i].user_name==u.user_name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户名已存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MFD.<span class="built_in">push_back</span>(u);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *dn=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir</span> d;</span><br><span class="line">    d.dir_name=u.user_name;</span><br><span class="line">    dn-&gt;dir=d;</span><br><span class="line">    <span class="built_in">Insert_Node_Dir</span>(pCurDir, dn-&gt;dir);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd</span><span class="params">(string dir_name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent==<span class="literal">nullptr</span>)&#123;<span class="comment">//判断是否为根目录</span></span><br><span class="line">        <span class="keyword">if</span>(Login_In_status==<span class="string">&quot;no&quot;</span>)&#123;<span class="comment">//判断是否登录</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;请先登录&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(Login_In_status==dir_name)&#123;<span class="comment">//判断是否为当前用户</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==dir_name)&#123;</span><br><span class="line">                        pCurDir=pCurDir-&gt;child[i];</span><br><span class="line">                        path_list.<span class="built_in">push_back</span>(dir_name);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==dir_name)&#123;</span><br><span class="line">            pCurDir=pCurDir-&gt;child[i];</span><br><span class="line">            path_list.<span class="built_in">push_back</span>(dir_name);</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;目录不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd_Rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent==<span class="literal">nullptr</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已经到达最顶级目录！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        pCurDir=pCurDir-&gt;parent;</span><br><span class="line">        path_list.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MkDir</span><span class="params">(string dir_name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;根目录无法创建非用户目录!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==dir_name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;目录已存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *dn=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir</span> d;</span><br><span class="line">    d.dir_name=dir_name;</span><br><span class="line">    dn-&gt;dir=d;</span><br><span class="line">    <span class="built_in">Insert_Node_Dir</span>(pCurDir, dn-&gt;dir);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Open</span><span class="params">(string filename)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==filename)&#123;</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;文件不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Thread_Open_File_Table</span> toft;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Sys_Open_File_Table</span> soft;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;<span class="comment">//标志系统打开文件表是否存在该文件</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;权限: 1:读   2.写    3.读写&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> s;</span><br><span class="line">        cin&gt;&gt;s;<span class="comment">//声明权限</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="number">1</span>)</span><br><span class="line">            toft.permission=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">2</span>)</span><br><span class="line">            toft.permission=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">3</span>)</span><br><span class="line">            toft.permission=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在系统打开表中寻找,根据文件名</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;SOFT.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(SOFT[i].file.filename==filename)&#123;<span class="comment">//存在则计数器加一，并复制到进程的打开文件表中</span></span><br><span class="line">                soft.file.filename=filename;</span><br><span class="line">                SOFT[i].count++;</span><br><span class="line">                toft.file.filename=filename;</span><br><span class="line">                toft.index=i; <span class="comment">//系统打开文件表的编号作为进程打开文件表的索引</span></span><br><span class="line">                TOFT.<span class="built_in">push_back</span>(toft);</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;<span class="comment">//不存在则，加入到系统的打开文件表，并复制到进程的打开文件表中</span></span><br><span class="line">            soft.file.filename=filename;</span><br><span class="line">            soft.count=<span class="number">1</span>;</span><br><span class="line">            SOFT.<span class="built_in">push_back</span>(soft);</span><br><span class="line">            toft.file.filename=filename;</span><br><span class="line">            toft.index=SOFT.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            TOFT.<span class="built_in">push_back</span>(toft);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;打开成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string fileName;</span><br><span class="line">    <span class="type">int</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> flag2=<span class="literal">false</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;fileName;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==fileName)&#123;<span class="comment">//寻找目录是否存在该文件名</span></span><br><span class="line">            flag=<span class="literal">true</span>; <span class="comment">//存在</span></span><br><span class="line">            <span class="comment">// 查找进程打开文件表是否存在</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;TOFT.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(TOFT[j].file.filename==fileName)&#123;</span><br><span class="line">                    flag2=<span class="literal">true</span>; <span class="comment">//存在</span></span><br><span class="line">                    <span class="keyword">if</span>(TOFT[j].permission==<span class="number">2</span>||TOFT[j].permission==<span class="number">3</span>)&#123;<span class="comment">//判断权限</span></span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;输入内容&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        string content;</span><br><span class="line">                        cin&gt;&gt;content;</span><br><span class="line">                        pCurDir-&gt;dir.file[i].content=content;</span><br><span class="line">                        pCurDir-&gt;dir.file[i].size=content.<span class="built_in">size</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;没有写权限&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2==<span class="literal">false</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件未打开&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前目录不存在该文件&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;写入成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> flag2=<span class="literal">false</span>;</span><br><span class="line">    string fileName;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;fileName;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==fileName)&#123;<span class="comment">//判断当前目录是否存在该文件</span></span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;TOFT.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(TOFT[j].file.filename==fileName)&#123;<span class="comment">//判断进程打开文件表是否存在该文件</span></span><br><span class="line">                    flag2=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(TOFT[j].permission==<span class="number">1</span>||TOFT[j].permission==<span class="number">3</span>)&#123;<span class="comment">//判断权限</span></span><br><span class="line">                        cout&lt;&lt;pCurDir-&gt;dir.file[i].content&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;没有读权限&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2==<span class="literal">false</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件未打开&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前目录不存在该文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Del</span><span class="params">(string filename)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==filename)&#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            pCurDir-&gt;dir.file.<span class="built_in">erase</span>(pCurDir-&gt;dir.file.<span class="built_in">begin</span>()+i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前目录不存在该文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;删除成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Create</span><span class="params">(string fileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==fileName)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;当前目录已存在该文件，无法继续创建&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">File</span> file;</span><br><span class="line">    file.filename=fileName;</span><br><span class="line">    file.size=file.content.<span class="built_in">size</span>();</span><br><span class="line">    file.time=now_time;</span><br><span class="line">    pCurDir-&gt;dir.file.<span class="built_in">push_back</span>(file);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show_User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;MFD[i].user_name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showU</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;用户名&quot;</span>&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;MFD[i].user_name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string filename;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;TOFT.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(TOFT[i].file.filename==filename)&#123;</span><br><span class="line">            SOFT[TOFT[i].index].count--;</span><br><span class="line">            <span class="keyword">if</span>(SOFT[TOFT[i].index].count==<span class="number">0</span>)</span><br><span class="line">                SOFT.<span class="built_in">erase</span>(SOFT.<span class="built_in">begin</span>()+TOFT[i].index);</span><br><span class="line">            TOFT.<span class="built_in">erase</span>(TOFT.<span class="built_in">begin</span>()+i);</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;关闭成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowFileInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::right);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;文件名\t\t文件大小\t创建时间戳\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;pCurDir-&gt;dir.file[i].filename&lt;&lt;<span class="string">&quot;\t\t&quot;</span>&lt;&lt;pCurDir-&gt;dir.file[i].size&lt;&lt;<span class="string">&quot;\t\t&quot;</span>&lt;&lt;pCurDir-&gt;dir.file[i].time&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">        cout.<span class="built_in">unsetf</span>(ios::right);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;欢迎使用文件系统&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入help以查看帮助&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库复习</title>
      <link href="/2023/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93/DBSend/"/>
      <url>/2023/06/04/%E6%95%B0%E6%8D%AE%E5%BA%93/DBSend/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="1-1-GO"><a href="#1-1-GO" class="headerlink" title="1.1 GO"></a>1.1 GO</h2><p>数据：描述事物的<strong>符号</strong>记录。</p><p>数据库：数据库是长期储存在计算机内、有组织的、可共享的大量数据的<strong>集合</strong>。</p><p>数据库管理系统：数据库管理系统是位于<strong>用户与操作系统</strong>之间的一层数据管理<strong>软件</strong>，它是一个大型复杂的软件系统，它主要用于科学地组织和存储数据、高效地获取和维护数据。</p><ul><li>数据库管理系统的功能：<ul><li>数据定义功能</li><li>数据组织，存储和管理</li><li>数据操纵功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li></ul></li></ul><p>数据库系统=数据库+数据库管理系统+应用程序+数据库管理员（DBA）</p><p><strong>数据库系统的特点：</strong></p><ul><li><p><strong>数据结构化</strong></p><blockquote><p>数据的整体结构化是数据库的主要特征之一，它不再仅仅针对某一个应用，而是面向全组织，不仅数据内部结构化，整体也是结构化的，数据之间具有联系，数据记录可以变长，数据的最小存取单位是数据项。</p></blockquote></li><li><p><strong>数据的共享性高，冗余度低且易扩充</strong></p><ul><li>数据共享好处<ul><li>减少数据冗余，节约存储空间。</li><li>避免数据之间的不相容性与不一致性。</li><li>使系统易于扩充。</li></ul></li></ul></li><li><p><strong>数据独立性高</strong></p><blockquote><p>数据独立性由数据库管理系统的二级映像功能来保证，它主要分为：物理独立性和逻辑独立性。<br>物理独立性：指<strong>用户的应用程序</strong>与数据库中数据的物理存储是相互独立的，当数据的物理存储改变了，应用程序不用改变。<br>逻辑独立性：指<strong>用户的应用程序</strong>与数据库中数据的逻辑结构是相互独立的，当数据的逻辑结构改变了，应用程序不用改变。</p></blockquote></li><li><p><strong>数据由数据库管理系统统一管理和控制</strong></p><blockquote><p>数据库管理系统提供的数据控制功能。<br>（1）、数据的安全性（Security）保护：保护数据以防止不合法的使用造成的数据的泄密和破坏。<br>（2）、数据的完整性（Integrity）检查：保证数据的正确性、有效性和相容性。<br>（3）、并发（Concurrency）控制：对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。<br>（4）、数据库恢复（Recovery）技术：将数据库从错误状态恢复到某一已知的正确状态。</p></blockquote></li></ul><h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p><strong>数据模型</strong>是对现实世界数据特征的抽象</p><p>数据模型是数据库系统的核心和基础。</p><p>数据模型的要求：</p><ul><li>能比较真实地模拟现实世界。</li><li>容易为人所理解。</li><li>便于在计算机上实现。</li></ul><p>两类数据模型：</p><ul><li><p>概念模型</p><blockquote><p>概念模型也称信息模型，它是<strong>按用户的观点</strong>来对数据和信息建模，用于数据库设计.</p></blockquote><p>  概念模型的用途:</p><ul><li>概念模型用于信息世界的建模。</li><li>是现实世界到机器世界的一个中间层次。</li><li>是数据库设计的有力工具。</li><li><p>数据库设计人员和用户之间进行交流的语言。</p><p>概念模型的要求：</p></li><li><p>较强的语义表达能力。</p></li><li><p>简单、清晰、易于用户理解。</p><p>概念模型的表示：</p></li><li><p>实体-联系法，该方法使用E-R图来描述现实世界的概念模型，E-R方法也被称为E-R模型</p><p>信息世界的基本概念：</p></li><li><p>实体（Entity）：客观存在并可相互区别的事物称为实体。</p></li><li>属性（Attribute）：实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画。例如学生实体可以由学号、姓名、性别、出生年份、系、入学时间等属性组成。（94002268，张山，男，1976，计算机系，1994）这些属性组合起来表征了一个学生。</li><li>码（Key）：唯一标识实体的属性集称为码。例如学号是学生实体的码。</li><li>域（Domain）：属性的取值范围称为该属性的域。例如，学号的域为8位整数，姓名的域为字符串集合，年龄的域为小于38的整数，性别的域为（男，女）。</li><li>实体型（Entity Type） ：具有相同属性的实体必然具有共同的特征和性质。用<strong>实体名及其属性名</strong>集合来抽象和刻画同类实体，称为实体型。例如，学生（学号，姓名，性别，出生年份，系，入学时间）就是一个实体型。</li><li>实体集（Entity Set）：同型实体的集合称为实体集。例如，全体学生就是一个实体集。</li><li>联系（Relationship） ：在现实世界中，事物内部以及事物之间是有联系的，这些联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。实体内部的联系通常是指组成实体的各属性之间的联系。实体之间的联系通常是指不同实体集之间的联系。<ul><li>类型<ul><li>1:1</li><li>1:n</li><li>m:n</li></ul></li></ul></li></ul></li><li><p>逻辑模型和物理模型</p><blockquote><ul><li>逻辑模型主要包括层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。<strong>按计算机系统的观点</strong>对数据建模，用于DBMS实现。</li><li>物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li></ul></blockquote></li></ul><p>常见的数据模型：</p><ul><li>层次模型（Hierarchical Model）</li><li>网状模型（Network Model）</li><li>关系模型（Relational Model)）<ul><li>优点<ul><li>建立在严格的数学概念的基础上。</li><li>概念单一。</li><li>关系模型的存取路径对用户透明。</li></ul></li><li>缺点<ul><li>存取路径对用户透明，查询效率往往不如格式化数据模型。</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度。</li></ul></li></ul></li><li>面向对象数据模型（Object Oriented Data Model）</li><li>对象关系数据模型（Object Relational Data Model）</li><li>半结构化数据模型（Semistruture Data Model）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Git添加代理</title>
      <link href="/2023/06/04/git%E4%BB%A3%E7%90%86/"/>
      <url>/2023/06/04/git%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git config --global 协议.proxy 协议://ip地址:端口号</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">只对github.com</span></span><br><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:7891</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消代理</span></span><br><span class="line">git config --global --unset http.https://github.com.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给markdown文档添加参考文献引用</title>
      <link href="/2023/04/06/%E7%BB%99markdown%E6%96%87%E6%A1%A3%E6%B7%BB%E5%8A%A0%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E5%BC%95%E7%94%A8/"/>
      <url>/2023/04/06/%E7%BB%99markdown%E6%96%87%E6%A1%A3%E6%B7%BB%E5%8A%A0%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## Markdown 增加文献引用</span><br><span class="line"></span><br><span class="line">这边文章是介绍如何在 Markdown 中增加文献引用。[<span class="tag">&lt;<span class="name">sup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>](#refer-anchor-1)</span><br><span class="line"></span><br><span class="line">## 参考</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- [1] [百度学术](http://xueshu.baidu.com/)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- [2] [Wikipedia](https://en.wikipedia.org/wiki/Main_Page)</span><br></pre></td></tr></table></figure><h2 id="Markdown-增加文献引用"><a href="#Markdown-增加文献引用" class="headerlink" title="Markdown 增加文献引用"></a>Markdown 增加文献引用</h2><p>这边文章是介绍如何在 Markdown 中增加文献引用。<a href="#refer-anchor-1"><sup>1</sup></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div id="refer-anchor-1"></div><ul><li>[1] <a href="http://xueshu.baidu.com/">百度学术</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2] <a href="https://en.wikipedia.org/wiki/Main_Page">Wikipedia</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS_PV操作</title>
      <link href="/2023/04/06/OS/OS_PV%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/04/06/OS/OS_PV%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是PV操作"><a href="#什么是PV操作" class="headerlink" title="什么是PV操作"></a>什么是PV操作</h1><p>PV操作就是荷兰语<strong>P</strong>asseren（通过），<strong>V</strong>rijgeven（释放）的简称。对应的就是wait等待，signal释放操作。</p><p>P操作就是，将进程从运行态转化为阻塞态，直到它被另一个进程唤醒</p><p>V操作就是，将一个处于阻塞态的进程唤醒。</p><h1 id="P操作"><a href="#P操作" class="headerlink" title="P操作"></a>P操作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=s<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span>(s&lt;<span class="number">0</span>)&#123;</span><br><span class="line">P();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="V操作"><a href="#V操作" class="headerlink" title="V操作"></a>V操作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=s+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(s&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">V();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抢占式优先级调度算法和非抢占式优先级调度算法"><a href="#抢占式优先级调度算法和非抢占式优先级调度算法" class="headerlink" title="抢占式优先级调度算法和非抢占式优先级调度算法"></a>抢占式优先级调度算法和非抢占式优先级调度算法</h1><p>抢占式优先级调度算法可以使当前正在执行的进程被更高优先级的进程所打断，并立即切换到新的进程。这种调度算法通常会导致频繁的上下文切换，但是可以保证高优先级进程的响应时间，从而提高系统的实时性能。</p><p>而非抢占式优先级调度算法则不允许其他进程打断当前进程的执行，只有在当前进程自愿放弃CPU控制权时才会进行进程切换。这种调度算法相对稳定，但是可能会导致低优先级进程长时间等待，影响系统的响应速度和实时性能。</p><p>即抢占式优先级调度算法进行V操作时，唤醒的进程为优先级最高的进程，而非抢占式优先级调度算法的V操作则无作为，继续执行当前进程，完成后再执行其他进程。</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> PV操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_3_无重复字符的最长子串</title>
      <link href="/2023/03/28/leetcode%E9%A2%98%E8%A7%A3/leetcode_3_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2023/03/28/leetcode%E9%A2%98%E8%A7%A3/leetcode_3_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 $s$ ，请你找出其中不含有重复字符的  <strong>最长子串</strong>  的长度。</p><p> <strong>示例 1:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p> <strong>示例 2:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p> <strong>示例 3:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong> </p><ul><li>$0 &lt;= s.length &lt;= 5 * 10^{4}$</li><li>$s$ 由英文字母、数字、符号和空格组成</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>朴素的思想就是设置双重循环，外循环<code>i</code>根据字符串长度确定循环次数，内循环指针<code>j</code>指向，外循环当前的指针<code>i</code>，从<code>j</code>向后遍历一个字符，根据map的特性来得到本轮的最大无重复字串的长度，存储到<code>temp</code>，每轮内循环结束，就比较和<code>max</code>的大小，更新<code>max</code>.</p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDA[初始化map,temp&#x3D;0,max&#x3D;0]--&gt;B[设置双循环,遍历字符串]--&gt;E[外循环 i 从头遍历字符串]--&gt;C[内循环指针j指向外循环变量i,并向后遍历]--&gt;D{当前指针所指\n字符是否已在\nmap的key中?}--是--&gt;F[比较temp与max更新max,打破内循环]--&gt;ED--否--&gt;G[temp++,\n当前字符加入map]--&gt;H{当前字符是\n否到达最后一位?}--是--&gt;I[比较temp和max\n更新max]I--&gt;S{j指到到字符串末尾?}--是--&gt;ES--否--&gt;C  </pre></div><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>; <span class="comment">//存储最大无重复子串长度</span></span><br><span class="line">        <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            temp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;s.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(s.charAt(j)))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;max)&#123;</span><br><span class="line">                        max=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(s.charAt(j), <span class="number">1</span>);</span><br><span class="line">                    temp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s.length()-<span class="number">1</span>==j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;max)&#123;</span><br><span class="line">                        max=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h1><p>其实这是一道滑动窗口问题</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口。</p><p>分类：窗口有两类，一种是固定大小类的窗口，一类是大小动态变化的窗口。</p><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><ul><li>利用滑动窗口获取平滑的数据，如一段连续时间的数据平均值，能够有更好的稳定性，如温度监测。</li></ul><p>什么情况可以用滑动窗口来解决实际问题呢？</p><ul><li>一般给出的数据结构是数组或者字符串</li><li>求取某个子串或者子序列最长最短等最值问题或者求某个目标值时</li><li>该问题本身可以通过暴力求解</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid 语法</title>
      <link href="/2023/03/22/mermaid/"/>
      <url>/2023/03/22/mermaid/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Mermaid是一种基于Javascript的绘图工具，使用类似于Markdown的语法，使用户可以方便快捷地通过代码创建图表。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>所有流程图均由<strong>节点</strong>、几何形状和<strong>边</strong>、箭头或线组成</p><h3 id="定义流程图的方向"><a href="#定义流程图的方向" class="headerlink" title="定义流程图的方向"></a>定义流程图的方向</h3><ul><li><p>LR——从左到右</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    Start --&gt; Stop  </pre></div></li><li><p>TB——从上到下</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    Start --&gt; Stop  </pre></div></li></ul><ul><li>TD - 自上而下/与TB相同  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    Start --&gt; Stop  </pre></div></li></ul><h3 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h3><ul><li><p>圆角矩形节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1(This is the text in the box)</span><br></pre></td></tr></table></figure> <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1(This is the text in the box)  </pre></div></li><li><p><strong>体育场形节点</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1([This is the text in the box])</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1([This is the text in the box])  </pre></div></li><li><p><strong>子程序形状的节点</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1[[This is the text in the box]]</span><br></pre></td></tr></table></figure> <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1[[This is the text in the box]]  </pre></div></li><li><p>圆柱形节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1[(Database)]</span><br></pre></td></tr></table></figure> <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1[(Database)]  </pre></div></li><li><p><strong>圆圈形式的节点</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1((This is the text in the circle))</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1((This is the text in the circle))  </pre></div></li><li><p><strong>不对称形状的节点</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1&gt;This is the text in the box]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1&gt;This is the text in the box]  </pre></div></li><li><p><strong>菱形</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1&#123;This is the text in the box&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1{This is the text in the box}  </pre></div></li></ul><ul><li><p><strong>平行四边形</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    id1[\This is the text in the box\]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD id1[\This is the text in the box\]  </pre></div></li><li><p><strong>平行四边形 （反向）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    id1[/This is the text in the box/]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD id1[&#x2F;This is the text in the box&#x2F;]  </pre></div></li><li><p><strong>梯形</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[/Christmas\]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD A[&#x2F;Christmas\]  </pre></div></li><li><p><strong>梯形（反向）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    B[\Go shopping/]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD B[\Go shopping&#x2F;]  </pre></div>    </li></ul><h3 id="节点之间的链接"><a href="#节点之间的链接" class="headerlink" title="节点之间的链接"></a>节点之间的链接</h3><ul><li><p>基本</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flowchart LR</span><br><span class="line">    A--&gt;B</span><br><span class="line">    C---&gt;D</span><br><span class="line">    E --- F</span><br><span class="line">    G-- This is the text! ---H</span><br><span class="line">    I---|This is the text|J</span><br><span class="line">    K-- text --&gt;L</span><br><span class="line">    M-.-&gt;N;</span><br><span class="line">    O-. text .-&gt; P</span><br><span class="line">    Q ==&gt; R</span><br><span class="line">    S == text ==&gt; T</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    A--&gt;B    C---&gt;D    E --- F    G-- This is the text! ---H    I---|This is the text|J    K-- text --&gt;L    M-.-&gt;N;    O-. text .-&gt; P    Q &#x3D;&#x3D;&gt; R    S &#x3D;&#x3D; text &#x3D;&#x3D;&gt; T  </pre></div></li></ul><p>​        </p><ul><li><p>其他用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">   A -- text --&gt; B -- text2 --&gt; C</span><br><span class="line">   a --&gt; b &amp; c--&gt; d</span><br><span class="line">   E &amp; F--&gt; G &amp; H</span><br><span class="line">   I --o J</span><br><span class="line">   K --x L</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR   A -- text --&gt; B -- text2 --&gt; C   a --&gt; b &amp; c--&gt; d   E &amp; F--&gt; G &amp; H   I --o J   K --x L  </pre></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;</span><br><span class="line">    B --&gt;|Yes| C[OK]</span><br><span class="line">    C --&gt; D[Rethink]</span><br><span class="line">    D --&gt; B</span><br><span class="line">    B ----&gt;|No| E[End]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    A[Start] --&gt; B{Is it?}    B --&gt;|Yes| C[OK]    C --&gt; D[Rethink]    D --&gt; B    B ----&gt;|No| E[End]  </pre></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2_两数相加</title>
      <link href="/2023/03/18/leetcode%E9%A2%98%E8%A7%A3/leetcode_2_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2023/03/18/leetcode%E9%A2%98%E8%A7%A3/leetcode_2_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个  <strong>非空</strong>  的链表，表示两个非负的整数。它们每位数字都是按照  <strong>逆序</strong>  的方式存储的，并且每个节点只能存储  <strong>一位</strong>  数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p> <strong>示例 1：</strong> </p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure></p><p> <strong>示例 2：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p> <strong>示例 3：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong> </p><ul><li>每个链表中的节点数在范围 $[1, 100]$ 内</li><li>$0 &lt;= Node.val &lt;= 9$</li><li>题目数据保证列表表示的数字不含前导零</li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目给出两个链表，由头节点顺序遍历得到的序列是一个数的逆序列，求两个链表所表示的两数之和。</p><p>我们可以新建一个结果链表<code>res</code>,并设置一个工作指针<code>last</code>。初始化，指向<code>res</code>头节点。设置<code>carry</code>记录当前进位数,初始化为0.</p><p>循环。遍历<code>l1</code> ,<code>l2</code>两个链表</p><p>分为以下种种情况</p><ul><li><p><code>l1!=null&amp;&amp;l2!=null</code></p><p>  此时<code>l1.val</code>和<code>l2.val</code>和<code>carry</code>相加，<code>(l1.val+l2.val+carry)%10</code>是当前位的数,<code>(l1.val+l2.val+carry)/10</code>是当前进位的数。两者顺序不能变。</p><p>  <code>l1</code>,<code>l2</code>,<code>last</code>,后移</p></li><li><p><code>l1!=null&amp;&amp;l2==null</code></p><p>  <code>(l1.val+carry)%10</code>是当前位的数,<code>(l1.val+carry)/10</code>是当前进位的数</p><p>  <code>l1</code>,<code>last</code>,后移</p></li><li><p><code>l1==null&amp;&amp;l2!=null</code></p><p>  <code>(l2.val+carry)%10</code>是当前位的数,<code>(l2.val+carry)/10</code>是当前进位的数</p><p>  <code>l2</code>,<code>last</code>,后移</p></li><li><p><code>l1==null&amp;&amp;l2==null</code></p><p>  这步是收尾工作，判断当前位carry是否为0，是则last.next==null,否则last.next.val=carry<br>  这里仅需判断carry而无需判断高位的情况，因为不存在高位为0的情况</p></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2] 两数相加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        ListNode res=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        ListNode last=res;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">null</span>||l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="literal">null</span>&amp;&amp;l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">                last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                last.next.val=(l1.val+l2.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(l1.val+l2.val+carry)/<span class="number">10</span>;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">                last=last.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l2==<span class="literal">null</span>)&#123;</span><br><span class="line">                last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                last.next.val=(l1.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(l1.val+carry)/<span class="number">10</span>;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">                last=last.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1==<span class="literal">null</span>)&#123;</span><br><span class="line">                last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                last.next.val=(l2.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(l2.val+carry)/<span class="number">10</span>;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">                last=last.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l1==<span class="literal">null</span>&amp;&amp;l2==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(carry==<span class="number">0</span>)&#123;</span><br><span class="line">                    last.next=<span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">                    last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_1_两数之和</title>
      <link href="/2023/03/18/leetcode%E9%A2%98%E8%A7%A3/leetcode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/03/18/leetcode%E9%A2%98%E8%A7%A3/leetcode_1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 $nums$ 和一个整数目标值 $target$，请你在该数组中找出  <strong>和为目标值</strong>  <em>$target$</em>  的那  <strong>两个</strong>  整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p> <strong>示例 1：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p> <strong>示例 2：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p> <strong>示例 3：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong> </p><ul><li>$2 &lt;= nums.length &lt;= 10^{4}$</li><li>$-10^{9} &lt;= nums[i] &lt;= 10^{9}$</li><li>$-10^{9} &lt;= target &lt;= 10^{9}$</li><li><p><strong>只会存在一个有效答案</strong> </p><p><strong>进阶：</strong> 你可以想出一个时间复杂度小于 $O(n^{2})$ 的算法吗？</p></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p> 定义两个指针<code>i</code>,<code>j</code>,<br> 遍历数组求和，当其<code>nums[i]+num[j]=target</code>时，记录两个下标的值<code>[i,j]</code>，最后返回这个数组。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> a[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    a[<span class="number">0</span>]=i;a[<span class="number">1</span>]=j;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性规划</title>
      <link href="/2022/07/21/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
      <url>/2022/07/21/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h1><p>我想计算一个线性方程组方程组的解</p><script type="math/tex; mode=display">\begin{equation}% \begin{equation*} 加'*'去掉公式编号\left\{\begin{aligned}     %请使用'aligned'或'align*'10x-2y-2z &= 72 \\     %加'&'指定对齐位置-x+10y-2z &= 83 \\-x-y+5z &= 42 \\\end{aligned}\right.\end{equation}% \end{equation*}   加'*'去掉公式编号% 注意：在 markdown 环境下，某些特殊字符，如'\', '*'等，会首先被 markdown 语法转义，然后再被 Latex 转义。% 因此有时候 '\{'需要写作'\\{'，'*'需要写作'\*'，'\\'需要写作'\\\\'等，视不同的解释环境而定</script><p>用python算应该怎么办呢？</p><p>发现有一个叫<code>numpy</code>的库</p><p>它有啥我们先不管,我们先关注于问题本身</p><p>它是一个$AX=b$形式的向量,我可以把它们写成向量的形式啊</p><p>长这样：</p><script type="math/tex; mode=display">\left[\begin{matrix}10 & -2 & -2 \\-1 & 10 & -2 \\-1 & -1 & 5 \\\end{matrix}\right] \left[\begin{matrix}x\\ y\\ z\end{matrix}\right]=\left[\begin{matrix}72\\83\\42\\\end{matrix}\right]</script><p>我需要矩阵乘法和矩阵求逆的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([[<span class="number">10</span>, -<span class="number">2</span>, -<span class="number">2</span>],[-<span class="number">1</span>, <span class="number">10</span>, -<span class="number">2</span>],[<span class="number">1</span>, -<span class="number">1</span>, <span class="number">5</span>]])</span><br><span class="line">b = np.array([<span class="number">72</span>, <span class="number">83</span>, <span class="number">42</span>])</span><br><span class="line">X = np.linalg.inv(A).dot(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我还发现可以用一个方法来解方程<script type="math/tex">AX=b</script></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = np.linalg.solve(A,b)</span><br></pre></td></tr></table></figure><p>它是求解满秩的方程组的函数<br>第一个是系数矩阵，第二个是常数矩阵</p><p>我又了解到一个叫<code>sympy</code>的库,它的计算精度似乎更高<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, Eq, solve</span><br><span class="line"></span><br><span class="line">x,y,z = symbols(<span class="string">&quot;x y z&quot;</span>)  <span class="comment"># 符号化变量</span></span><br><span class="line">equ =[Eq(<span class="number">10</span>*x-<span class="number">2</span>*y-<span class="number">2</span>*z, <span class="number">72</span>),  <span class="comment"># 等式函数</span></span><br><span class="line">    Eq(-x+<span class="number">10</span>*y-<span class="number">2</span>*z, <span class="number">83</span>),</span><br><span class="line">    Eq(-x-y+<span class="number">5</span>*z, <span class="number">72</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solve(equ, [x,y,z]))  <span class="comment">#</span></span><br><span class="line">第一个参数为要解的方程，要求右端等于<span class="number">0</span>，第二个参数为要解的未知数</span><br></pre></td></tr></table></figure><br>可是遇到很多不同类型约束条件应该怎么办呢</p><h2 id="线性规划的标准形式"><a href="#线性规划的标准形式" class="headerlink" title="线性规划的标准形式"></a>线性规划的标准形式</h2><p>$min \quad c^Tx$</p><script type="math/tex; mode=display">\begin{equation}\left\{    \begin{aligned}     Ax &\leq b \\    Aeq·x&=Beq \\    Ib \leq &x \leq ub    \end{aligned} \right.\end{equation}</script><p>比如下面这个 </p><p>$max\quad z=2x_1+3x_2-5x_3$</p><script type="math/tex; mode=display">\begin{equation}\left\{    \begin{aligned}     x_1+x_2+x_3&=7 \\    2x_1-5x_2+x_3&\geq10 \\    x_1+3x_2+x_3&\leq12 \\    x_1,x_2,x_3&\geq 3    \end{aligned} \right.\end{equation}</script><p><strong>求一个变量的最大值我们只要求出这个变量的相反数的最小值就好了</strong></p><p>根据规范式转换为</p><p>$min\quad -z=-2x_1-3x_2+5x_3$</p><script type="math/tex; mode=display">\begin{equation}\left\{    \begin{aligned}     x_1+x_2+x_3&=7 \\    -2x_1+5x_2-x_3&\leq-10 \\    x_1+3x_2+x_3&\leq12 \\    -x_1,-x_2,-x_3&\leq-3    \end{aligned} \right.\end{equation}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pickletools <span class="keyword">import</span> optimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"></span><br><span class="line">c = np.array([-<span class="number">2</span>,-<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line">Aeq = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">beq = np.array([<span class="number">7</span>])</span><br><span class="line">A = np.array([[-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]])</span><br><span class="line">b = np.array([-<span class="number">10</span>,<span class="number">12</span>])</span><br><span class="line">x1,x2,x3 = (<span class="number">0</span>,<span class="literal">None</span>),(<span class="number">0</span>,<span class="literal">None</span>),(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">res = linprog(c,A,b,Aeq,beq,bounds=[x1,x2,x3])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>关于<code>scipy.optimize.linprog</code><br><a href="https://blog.csdn.net/weixin_45288557/article/details/109139303">详细信息</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo x Github的常用指令</title>
      <link href="/2022/07/20/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/20/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-x-Github常用指令"><a href="#Hexo-x-Github常用指令" class="headerlink" title="Hexo x Github常用指令"></a>Hexo x Github常用指令</h1><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h2><p>在blog目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>预览博客，返回一网页地址</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://hexo.io/themes/">主题</a></p><p>如你所见，其实每个主题都会包含这个三个东西</p><ul><li>预览效果</li><li>项目地址</li><li>配置文档</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p>打开主题项目地址，然后点击<code>CODE</code>，然后点击<code>Download ZIP</code></p><p>  这样可以下载主题文件压缩包</p></li><li><p>解压压缩包，把文件夹放在<code>blog</code>目录下的<code>themes</code>目录，并把文件夹命名为主题的名字</p></li><li><p>在站点<code>_config.yml</code>找到<code>themes</code>这一行，然后将主题名字修改为<code>你的主题的名字</code></p></li><li><p>注意：有些主题你更换之后是暂时无法预览的，因为有的主题还需要安装它需要的依赖，这一般都会在主题的文档里面提到，只有安装它的依赖之后才可以正常预览</p></li></ul><p>​    </p><h2 id="上传到github命令"><a href="#上传到github命令" class="headerlink" title="上传到github命令"></a>上传到github命令</h2><p><code>hexo g -d</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="/2022/07/20/Markdown%20%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/20/Markdown%20%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-基本语法一"><a href="#Markdown-基本语法一" class="headerlink" title="Markdown 基本语法一"></a>Markdown 基本语法一</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">...</span><br><span class="line">###.. n级标题</span><br></pre></td></tr></table></figure><p>应该是<code># 标题</code>而不是<code>#标题</code>,在非标准文本编辑器中会报错.</p><h2 id="2-强调"><a href="#2-强调" class="headerlink" title="2.强调"></a>2.强调</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**Hello world**</span><br><span class="line">__ABCD__</span><br></pre></td></tr></table></figure><p><strong>Hello world</strong></p><p><strong>ABCD</strong></p><p>快捷方式: 选中目标 <code>ctrl+B</code></p><h2 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3.斜体"></a>3.斜体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br></pre></td></tr></table></figure><p><em>斜体</em></p><p><strong>若斜体且斜体可</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***鞋儿粗***</span><br><span class="line">___写而卒___</span><br></pre></td></tr></table></figure><p><strong><em>鞋儿粗</em></strong><br><strong><em>写而卒</em></strong></p><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~正确的话会被划掉~~</span><br></pre></td></tr></table></figure><p><del>正确的话会被划掉</del></p><h2 id="5-代码"><a href="#5-代码" class="headerlink" title="5.代码"></a>5.代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```加enter是代码块,`文字`仅有文字代码</span><br></pre></td></tr></table></figure><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 他说</span><br><span class="line">&gt;&gt; 她说 </span><br></pre></td></tr></table></figure><blockquote><p>他说</p><blockquote><p>她说</p></blockquote></blockquote><p>引用是可以<strong>嵌套</strong>的</p><h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h3 id="7-1无序"><a href="#7-1无序" class="headerlink" title="7.1无序"></a>7.1无序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ a</span><br><span class="line">- b</span><br><span class="line">* c</span><br></pre></td></tr></table></figure><ul><li>a</li></ul><ul><li>b</li><li>c</li></ul><p><strong>回车</strong>可以延续</p><p><strong>tab</strong>构建上一级的<strong>子级</strong>列表</p><h3 id="7-2有序"><a href="#7-2有序" class="headerlink" title="7.2有序"></a>7.2有序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. </span><br></pre></td></tr></table></figure><ol><li></li><li><ol><li>a</li><li>b</li></ol></li></ol><p>回车**可以延续</p><p><strong>tab</strong>构建上一级的<strong>子级</strong>列表</p><h2 id="8-角标"><a href="#8-角标" class="headerlink" title="8.角标"></a>8.角标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ F = 10^3 N$</span><br></pre></td></tr></table></figure><p>$F = 10^3 N$</p><h2 id="9-高亮"><a href="#9-高亮" class="headerlink" title="9.高亮"></a>9.高亮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==啊==</span><br></pre></td></tr></table></figure><p>==啊==</p><h2 id="10-注释"><a href="#10-注释" class="headerlink" title="10.注释"></a>10.注释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注释[^num]</span><br></pre></td></tr></table></figure><p>注释<sup><a href="#fn_1" id="reffn_1">1</a></sup></p><p><strong>脚注</strong>：(一般放在最后)</p><h2 id="11-链接"><a href="#11-链接" class="headerlink" title="11. 链接"></a>11. 链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[链接](https://www.baidu.com)</span><br><span class="line">[10:](# 10注释)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com">链接</a></p><p><a href="# 10注释">10:</a></p><h2 id="12-todo列表"><a href="#12-todo列表" class="headerlink" title="12. todo列表"></a>12. todo列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 一件事</span><br><span class="line">- [ ] 两件事</span><br><span class="line">- [x] 三件事</span><br></pre></td></tr></table></figure><ul><li><p>[x] 一件事</p></li><li><p>[ ] 两件事</p></li><li><p>[x] 三件事</p></li></ul><h2 id="13-表格"><a href="#13-表格" class="headerlink" title="13. 表格"></a>13. 表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|奇数|偶数|</span><br><span class="line">| :-- | :--: |</span><br><span class="line">|1|2</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">奇数</th><th style="text-align:center">偶数</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:center">2</td></tr></tbody></table></div><h2 id="14-图片"><a href="#14-图片" class="headerlink" title="14.  图片"></a>14.  图片</h2><p><strong>直接复制粘贴或拖动</strong></p><p><img src="https://img2.baidu.com/it/u=2839134121,3147950360&amp;fm=253&amp;fmt=auto?w=500&amp;h=195" alt="img"></p><p>配置typora+picgo+阿里云oss后，通过图床：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202207221758534.jpg" alt="c5ad1e1202850c193aed802258e80113df477cf7_raw"></p><h2 id="15-分割线"><a href="#15-分割线" class="headerlink" title="15.分割线"></a>15.分割线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***或---以上</span><br></pre></td></tr></table></figure><hr><h2 id="16-emoji表情"><a href="#16-emoji表情" class="headerlink" title="16.emoji表情"></a>16.emoji表情</h2><p>最好直接复制粘贴😊</p><p><a href="https://emojipedia.org">emoji表情网站</a></p><hr><h1 id="Markdown的基本语法二"><a href="#Markdown的基本语法二" class="headerlink" title="Markdown的基本语法二"></a>Markdown的基本语法二</h1><h2 id="1-生成目录"><a href="#1-生成目录" class="headerlink" title="1.生成目录"></a>1.生成目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC](typora特有)</span><br></pre></td></tr></table></figure><h2 id="2-内嵌-LaTeX-公式"><a href="#2-内嵌-LaTeX-公式" class="headerlink" title="2.内嵌$\LaTeX$公式"></a>2.内嵌$\LaTeX$公式</h2><p><a href="https://blog.csdn.net/weixin_42468475/article/details/106015495">latex大全](latex大全</a>)</p><h2 id="3-Typora-的常用快捷键"><a href="#3-Typora-的常用快捷键" class="headerlink" title="3. Typora 的常用快捷键"></a>3. Typora 的常用快捷键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">效果</th><th style="text-align:center">按键</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl</code> + <code>D</code></td><td style="text-align:center">选中当前词</td><td style="text-align:center"><code>Ctrl</code> + <code>L</code></td><td style="text-align:center">选中当前句/行</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>E</code></td><td style="text-align:center">选中当前区块</td><td style="text-align:center"><code>Ctrl</code> + <code>F</code></td><td style="text-align:center">搜索当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>B</code></td><td style="text-align:center">加粗当前选中</td><td style="text-align:center"><code>Ctrl</code> + <code>H</code></td><td style="text-align:center">替换当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>I</code></td><td style="text-align:center">倾斜当前选中</td><td style="text-align:center"><code>Ctrl</code> + <code>U</code></td><td style="text-align:center">下划当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>K</code></td><td style="text-align:center">将当前选中生成链接</td><td style="text-align:center"><code>Ctrl</code> + <code>J</code></td><td style="text-align:center">滚动屏幕将选中滚至顶部</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>W</code></td><td style="text-align:center">关闭当前窗口</td><td style="text-align:center"><code>Ctrl</code> + <code>N</code></td><td style="text-align:center">打开新窗口</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>O</code></td><td style="text-align:center">打开文件</td><td style="text-align:center"><code>Ctrl</code> + <code>P</code></td><td style="text-align:center">搜索文件并打开</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>回车</code></td><td style="text-align:center">表格下方插入行</td><td style="text-align:center"><code>Ctrl</code> + <code>,</code></td><td style="text-align:center">打开偏好设置</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>.</code></td><td style="text-align:center">切换全角/半角标点</td><td style="text-align:center"><code>Ctrl</code> + <code>/</code></td><td style="text-align:center">切换正常/源代码视图</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>Shift</code> + <code>-</code></td><td style="text-align:center">缩小视图缩放</td><td style="text-align:center"><code>Ctrl</code> + <code>Shift</code> + <code>+</code></td><td style="text-align:center">放大视图缩放</td></tr></tbody></table></div><p>还有一些不常用的/三键的快捷键不在此列出.</p><h2 id="4-Typora-的主题样式与检查元素"><a href="#4-Typora-的主题样式与检查元素" class="headerlink" title="4. *Typora 的主题样式与检查元素"></a>4. *Typora 的主题样式与检查元素</h2><p>Markdown 在编译后约等于 HTML. 而 Typora 的正常视图就是编译后的 Markdown, 故Typora的主题样式本质就是 CSS 文件.</p><p>可以下载各种好看的主题给 Typora换上, 同时也可以自己调整对应的 CSS 文件, 或者自己手搓. </p><p>在 Typora 设置中开启 <code>调试模式</code> 后即可在正常视图右击打开 <code>检查元素</code>, 在其中就可以完全将 Markdown 文件当成 HTML 来编辑.</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="[Markdown基本语法 | Markdown 中文网 (p2hp.com">官网</a>](<a href="http://markdown.p2hp.com/basic-syntax/#code">http://markdown.p2hp.com/basic-syntax/#code</a>))</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/2022/07/20/my-first-blog/"/>
      <url>/2022/07/20/my-first-blog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/20/hello-world/"/>
      <url>/2022/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
