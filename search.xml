<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>锁升级</title>
      <link href="/post/28842/"/>
      <url>/post/28842/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>我们都知道被synchronized包裹的代码块具有同步的功能，其加锁的类型也会因多种因素影响下不同，影响的因素到底是什么呢。<br>首先我们需要知道加锁的类型主要是通过锁对象的对象头中的markworld字段来标识和实现的，32位的虚拟机，中markword的结构如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line">| Mark Word (32 bits)                                   | State                 |</span><br><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line">| hashcode:25 | age:4 | biased_lock:0              | 01 | Normal                |</span><br><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line">| thread:23   | epoch:2 | age:4 | biased_lock:1    | 01 | Biased                |</span><br><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line">| ptr_to_lock_record:30                            | 00 | Lightweight Locked    |</span><br><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line">| ptr_to_heavyweight_monitor:30                    | 10 |  Heavyweight Locked    |</span><br><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line">|                                                  | 11 | Marked for GC         |</span><br><span class="line">|-------------------------------------------------------|-----------------------|</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h1><p>偏向锁用于减少无竞争情况下的锁操作开销。其核心思想是，假设锁通常是由同一个线程多次获得的，因此可以“偏向”于该线程，而不进行频繁的同步操作。</p><p>如果一个线程获得了一把锁，那么锁会进入“偏向模式”，该线程在接下来的操作中将无需进行同步操作即可重新获得这把锁。</p><p><strong>出现条件：</strong> 当一个对象第一次被锁定时，JVM会将其标记为偏向锁，并将获得锁的线程的ID记录在对象头的markword中。</p><p>该线程进入该对象锁定的代码块时，无需进行CAS操作，更无需申请monitor对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBiased</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        ObjectHeader.parseObjectHeader(ObjectHeader.getObjectHeader(d));</span><br><span class="line">        <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">            ObjectHeader.parseObjectHeader(ObjectHeader.getObjectHeader(d));</span><br><span class="line">        &#125;</span><br><span class="line">        ObjectHeader.parseObjectHeader(ObjectHeader.getObjectHeader(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Class Pointer: <span class="number">11111000</span> <span class="number">00000000</span> <span class="number">11101111</span> <span class="number">10010100</span> </span><br><span class="line">Mark Word:</span><br><span class="line">ThreadID(54bit): <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000</span></span><br><span class="line">epoch: <span class="number">00</span></span><br><span class="line">age (4bit): <span class="number">0000</span></span><br><span class="line">biasedLockFlag (1bit): <span class="number">1</span></span><br><span class="line">LockFlag (2bit): <span class="number">01</span></span><br><span class="line"></span><br><span class="line">Class Pointer: <span class="number">11111000</span> <span class="number">00000000</span> <span class="number">11101111</span> <span class="number">10010100</span> </span><br><span class="line">Mark Word:</span><br><span class="line">ThreadID(54bit): <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000010</span> <span class="number">11100111</span> <span class="number">010000</span></span><br><span class="line">epoch: <span class="number">00</span></span><br><span class="line">age (4bit): <span class="number">0000</span></span><br><span class="line">biasedLockFlag (1bit): <span class="number">1</span></span><br><span class="line">LockFlag (2bit): <span class="number">01</span></span><br><span class="line"></span><br><span class="line">Class Pointer: <span class="number">11111000</span> <span class="number">00000000</span> <span class="number">11101111</span> <span class="number">10010100</span> </span><br><span class="line">Mark Word:</span><br><span class="line">ThreadID(54bit): <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000010</span> <span class="number">11100111</span> <span class="number">010000</span></span><br><span class="line">epoch: <span class="number">00</span></span><br><span class="line">age (4bit): <span class="number">0000</span></span><br><span class="line">biasedLockFlag (1bit): <span class="number">1</span></span><br><span class="line">LockFlag (2bit): <span class="number">01</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>可以看到，线程执行完代码块，锁对象仍然保留线程id。<br><strong>可重入性：</strong> 如果一个线程已经持有偏向锁，则它可以再次进入同步块，无需进行CAS操作，更无需申请monitor对象。</p><p><strong>撤销：</strong> 当另一个线程尝试获取偏向锁时，升级为轻量级锁，如果：</p><ul><li>自旋仍未获取锁，则膨胀为重量级锁</li><li>如果该对象所在的类重偏向次数超过阈值20就会批量重偏向到新线程，超过40后该类的所有对象从此不可偏向。<h1 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h1>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以 使用轻量级锁来优化。<br><strong>出现条件：</strong></li><li>jvm禁用偏向锁</li><li>偏向锁涉及两个及以上线程，升级</li><li>两个及以上线程交错执行<br>假设有两个方法同步块，利用同一个对象加锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 A</span></span><br><span class="line"> method2();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 B</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>会有以下场景：</li><li><p>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word<br><img src="https://pic.zjcspace.xyz/img/202408071338019.png" alt=""></p></li><li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存 入锁记录<br><img src="https://pic.zjcspace.xyz/b/202408071339356.png" alt=""></p></li><li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下<br><img src="https://pic.zjcspace.xyz/b/202408071340281.png" alt=""></p></li><li><p>如果 cas 失败，有两种情况 </p><ul><li><p>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，会自旋，超过10次 cas失败膨胀为重量级锁。</p></li><li><p>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数。</p><p>  <img src="https://pic.zjcspace.xyz/b/202408071345714.png" alt="image-20240807134510106"></p></li></ul></li><li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重 入计数减一</p></li><li>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头。</li></ul><h1 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h1><p>重量级锁由操作系统来实现，所以性能消耗相对较高，通过对象的监视器（Monitor）实现的。当锁的竞争激烈，偏向锁和轻量级锁不足以应对时，JVM会将锁升级为重量级锁。</p><p>Monitor 结构如下</p><p><img src="https://pic.zjcspace.xyz/b/202408071354388.png" alt="image-20240807135445066"></p><ul><li>刚开始 Monitor 中 Owner 为 null </li><li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一 个 Owner </li><li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入 EntryList BLOCKED </li><li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的 </li><li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程</li></ul></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>判断自己是否为公网ip，设置端口映射，以及利用公网ip搭建网站服务测试</title>
      <link href="/post/25514/"/>
      <url>/post/25514/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="判断公网ip"><a href="#判断公网ip" class="headerlink" title="判断公网ip"></a>判断公网ip</h1><h2 id="使用-tracert-命令"><a href="#使用-tracert-命令" class="headerlink" title="使用 tracert 命令"></a>使用 tracert 命令</h2><p><code>tracert</code> 是一个网络诊断工具，用于跟踪数据包从你的计算机到目标服务器或主机的路径。它的作用是显示数据包经过的路由器（或者跳数）以及每个路由器的响应时间。这对于分析网络连接的问题非常有用，例如找出数据包在网络中的延迟或确定数据包在哪个节点出现问题。</p><p>首先<a href="https://www.ip138.com/">打开ip138网站</a>查看自己的ip，这里会显示自己的ip，我的是<br><code>39.46.14.130</code></p><p>打开<code>cmd</code>终端输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tracert 39.46.14.130</span><br></pre></td></tr></table></figure><p>等待一段时间观察输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\86136&gt;tracert 39.46.14.130</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪到 39.46.14.130 的路由</span><br><span class="line"></span><br><span class="line">  1    &lt;1 毫秒   &lt;1 毫秒   &lt;1 毫秒 39.46.14.130</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br><span class="line"></span><br><span class="line">C:\Users\86136&gt;tracert 39.46.14.130</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪到 39.46.14.130 的路由</span><br><span class="line"></span><br><span class="line">  1    &lt;1 毫秒   &lt;1 毫秒   &lt;1 毫秒 39.46.14.130</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br><span class="line"></span><br><span class="line">C:\Users\86136&gt;</span><br></pre></td></tr></table></figure><br><strong>在非桥接情况下</strong>，如果只有两跳那就说明是有公网IP地址的，如果超过两跳那就肯定是内网IP地址了。</p><p><strong>在桥接情况下，</strong>如果只有一跳那就说明是有公网IP地址的，如果超过一跳那就肯定是内网IP地址了。</p><h1 id="桥接光猫"><a href="#桥接光猫" class="headerlink" title="桥接光猫"></a>桥接光猫</h1><p>桥接光猫可以防止双重NAT导致需要配置多次端口映射，并把路由转发的负载转移到性能相对强劲的路由器上。提高网络体验。</p><p>这里以山东联通型号为HG6142A的光猫为例。</p><ul><li>获得mac地址可以通过登录后台<code>192.168.1.1</code>获取也可以输入:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   arp -a 192.168.1.1</span><br></pre></td></tr></table></figure></li><li>允许telnet,并获取超级管理员密码(这里的超级管理员密码不是一般用户的密码，一般是维修人员使用的)</li></ul><p>浏览器输入<a href="http://192.168.1.1/telnet?enable=1&amp;key=">http://192.168.1.1/telnet?enable=1&amp;key=</a>&lt;刚刚获取的mac地址&gt;，显示成功信息说明成功</p><p>首先，确保你的电脑已开启Telnet服务（请自行baidu开启方法），然后输入<code>telnet 192.168.1.1</code>进入telnet</p><p>账号<code>root</code>（不对就试试<code>admin</code>），密码是<code>Fh@mac后六位</code>（注意大小 写），输入密码是不显示的，输完直接回车（显示/var #就是登录成功）</p><p>然后输入命令<code>load_cli factory</code>，进入工厂模式</p><p>最后输入显示管理员密码命令<code>show admin_pwd</code>，显示管理员密码</p><p>admin_pwd=后面的就是超级密码</p><p><a href="http://192.168.1.1/cu.html">登录光猫</a>-&gt;状态-&gt;基本配置-&gt;宽带设置，<strong>修改前注意截图，防止改坏</strong>。</p><p><img src="https://pic.zjcspace.xyz/img/202407311227969.png" alt="image-20240731122553475"></p><p>保存后登录路由器进行拨号：</p><p><img src="https://pic.zjcspace.xyz/img/202407311415859.png" alt="image-20240731141547634"></p><p>此时你的光猫后台应该无法登录，而路由器可以登录。</p><h1 id="配置web服务"><a href="#配置web服务" class="headerlink" title="配置web服务"></a>配置web服务</h1><p>在本地随便起一个服务，你可以是NAT什么的，主要是获取端口，我使用vue。</p><p>注意配置ip为<code>0.0.0.0</code>，当服务的 IP 地址设置为 <code>0.0.0.0</code> 时，服务会在所有可用的网络接口上监听来自任何 IP 地址的连接请求。这意味着该服务将接受来自本地网络中任何计算机的连接，而不仅仅是某个特定 IP 地址上的请求。</p><p>我把服务监听到8888端口。访问以下局域网地址都可以正常访问:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[0]   VITE v5.3.4  ready <span class="keyword">in</span> 585 ms</span><br><span class="line">[0]</span><br><span class="line">[0]   ➜  Local:   http://localhost:8888/</span><br><span class="line">[0]   ➜  Network: http://192.168.137.1:8888/</span><br><span class="line">[0]   ➜  Network: http://10.144.195.37:8888/</span><br><span class="line">[0]   ➜  Network: http://192.168.229.1:8888/</span><br><span class="line">[0]   ➜  Network: http://192.168.230.1:8888/</span><br><span class="line">[0]   ➜  Network: http://192.168.0.109:8888/</span><br></pre></td></tr></table></figure></p><h1 id="端口映射，实现外网访问"><a href="#端口映射，实现外网访问" class="headerlink" title="端口映射，实现外网访问"></a>端口映射，实现外网访问</h1><p>在自己的路由器中找到<code>端口映射</code>,<code>虚拟服务器</code>这种字样，进行配置:<br><img src="https://pic.zjcspace.xyz/img/202407311241480.png" alt="image-20240731124132553"></p><p>我把外网访问端口设置为8889，内网ip地址填自己的计算机的ip地址，如果有dhcp的话，可以mac绑定ip，避免ip频繁变更。</p><p>此时访问<a href="http://39.46.14.130:8889可以正常访问，访问http://39.46.14.130:8888则不行。">http://39.46.14.130:8889可以正常访问，访问http://39.46.14.130:8888则不行。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\86136&gt;curl http://39.46.14.130:8889</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;/@vite/client&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">link</span> rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Vite App&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;/src/main.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>证明：为什么有关hash的数据结构的size往往是2的幂次方</title>
      <link href="/post/44223/"/>
      <url>/post/44223/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>不管是hashMap的size，还是redis的dict我们会发现他们的扩容机制限制了他们的大小都恰好为$2^n$，为什么呢。根据查阅资料，我发现hash函数的目的是将一个数据尽可能均匀地映射到一个区间，然而这个区间是往往是变化的，因此需要取模运算。而取模运算在底层实际上是对于与或非这种逻辑运算，效率较低。因此为了提高效率，设计者往往将模运算转化为”与”运算。</p><script type="math/tex; mode=display">\begin{array}{l}\text{when } \log_2{n} \in \mathbb{N} , \\\quad \text{hash}(x) \% n = \text{hash}(x) \& (n - 1)\end{array}</script><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>要证明当 $\log_2{n} \in \mathbb{N}$ 时，</p><script type="math/tex; mode=display">\text{hash}(x) \% n = \text{hash}(x) \& (n - 1)</script><p>首先我们来解释这个等式的两边：</p><ol><li><p>$\text{hash}(x) \% n$ 表示将 $\text{hash}(x)$ 对 $n$ 取模，即 $\text{hash}(x)$ 除以 $n$ 的余数。</p></li><li><p>$\text{hash}(x) \&amp; (n - 1)$ 表示将 $\text{hash}(x)$ 和 $n - 1$ 进行按位与运算。</p></li></ol><p>这里的 $n$ 是 $2$ 的幂次，即 $n = 2^k$，其中 $k \in \mathbb{N}$。</p><p>由于 $n = 2^k$，所以 $n$ 是一个只有一个 1 的二进制数，即 $n - 1$ 是一个全是 1 的二进制数。例如，如果 $n = 8$ (即 $2^3$)，则 $n - 1 = 7$ (即 $2^3 - 1 = 7 = 0111_2$)。</p><p><strong>证明</strong>:</p><p>设 $n = 2^k$，其中 $k \in \mathbb{N}$。</p><script type="math/tex; mode=display">\text{hash}(x) \% n = \text{hash}(x) \% 2^k</script><p>根据取模运算的定义：</p><script type="math/tex; mode=display">\text{hash}(x) \% 2^k = \text{hash}(x) - \left\lfloor \frac{\text{hash}(x)}{2^k} \right\rfloor \cdot 2^k</script><p>注意到 $\left\lfloor \frac{\text{hash}(x)}{2^k} \right\rfloor \cdot 2^k$ 是 $\text{hash}(x)$ 去掉低 $k$ 位的部分，即：</p><script type="math/tex; mode=display">\text{hash}(x) \% 2^k\ \text{正好是}\ \text{hash}(x)\ \text{的低}\ k\ \text{位}</script><p>而 $\text{hash}(x) \&amp; (n - 1)$ 则是 $\text{hash}(x)$ 和一个低 $k$ 位全是 1 的数 $2^k - 1$ 进行按位与运算：</p><script type="math/tex; mode=display">\text{hash}(x) \& (2^k - 1) = \text{hash}(x) \& (111\ldots1)_2</script><p>由于按位与运算的性质，这个操作会保留 $\text{hash}(x)$ 的低 $k$ 位：</p><script type="math/tex; mode=display">\text{hash}(x) \& (2^k - 1)\ \text{正好是}\ \text{hash}(x)\ \text{的低}\ k\ \text{位}</script><p>因此，两者都是 $\text{hash}(x)$ 的低 $k$ 位，所以：</p><script type="math/tex; mode=display">\text{hash}(x) \% 2^k = \text{hash}(x) \& (2^k - 1)</script><p>即证明了：</p><script type="math/tex; mode=display">\text{hash}(x) \% n = \text{hash}(x) \& (n - 1)</script><p>当且仅当 $n$ 是 $2$ 的幂次。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>在这里我们可以看出来计算机底层进行一些操作的并不是可读性至上，而是效率至上。但是作为应用层开发者，我觉得两者如果非要取其一抛其一，我更倾向于后者。你费劲心思的业务逻辑，可能还不如编译器的某个语法树剪枝，并且还要花费大量的时间去理解和维护。</p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_200. 岛屿数量</title>
      <link href="/post/43562/"/>
      <url>/post/43562/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h1 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a>200. 岛屿数量</h1><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**输入：**grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">**输出：**1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**输入：**grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">**输出：**3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &amp;lt;= m, n &amp;lt;= 300</code></li><li><code>grid[i][j]</code> 的值为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><h2 id="深搜"><a href="#深搜" class="headerlink" title="深搜"></a>深搜</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">char</span>[][] grid;</span><br><span class="line">    <span class="type">int</span>[][] vis;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span>[] dy;</span><br><span class="line">    <span class="type">int</span>[] dx;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        vis = <span class="keyword">new</span> <span class="title class_">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[i][j] == <span class="number">0</span> &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="comment">// 越界？</span></span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=grid.length||y&gt;=grid[<span class="number">0</span>].length)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 我曾来过</span></span><br><span class="line">        <span class="keyword">if</span>(vis[x][y]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 上下左右</span></span><br><span class="line">            dfs(x + dx[i], y + dy[i]);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广搜"><a href="#广搜" class="headerlink" title="广搜"></a>广搜</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] vis;</span><br><span class="line">    Deque&lt;Pair&lt;Integer, Integer&gt;&gt; que;</span><br><span class="line">    <span class="comment">// 方向数组，用于控制上下左右移动</span></span><br><span class="line">    <span class="type">int</span>[] dx = &#123; <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line"></span><br><span class="line">        vis = <span class="keyword">new</span> <span class="title class_">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[i][j] == <span class="number">0</span> &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    bfs(i, j, que,grid);</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Deque&lt;Pair&lt;Integer, Integer&gt;&gt; que,<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Pair&lt;Integer, Integer&gt; pair = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(x, y);</span><br><span class="line">        que.push(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(x, y));</span><br><span class="line">        vis[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            pair = que.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">nX</span> <span class="operator">=</span> pair.getKey();</span><br><span class="line">            <span class="type">int</span> <span class="variable">nY</span> <span class="operator">=</span> pair.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">adjX</span> <span class="operator">=</span> nX + dx[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">adjY</span> <span class="operator">=</span> nY + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (adjX &gt;= <span class="number">0</span> &amp;&amp; adjX &lt; vis.length &amp;&amp; adjY &gt;= <span class="number">0</span> &amp;&amp; adjY &lt; vis[<span class="number">0</span>].length &amp;&amp; vis[adjX][adjY] == <span class="number">0</span></span><br><span class="line">                        &amp;&amp; grid[adjX][adjY] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    que.add(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(adjX, adjY));</span><br><span class="line">                    vis[adjX][adjY] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_797. 所有可能的路径</title>
      <link href="/post/45176/"/>
      <url>/post/45176/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h1 id="797-所有可能的路径"><a href="#797-所有可能的路径" class="headerlink" title="797. 所有可能的路径"></a>797. 所有可能的路径</h1><p>给你一个有 <code>n</code> 个节点的 <strong>有向无环图（DAG）</strong>，请你找出所有从节点 <code>0</code> 到节点 <code>n-1</code> 的路径并输出（<strong>不要求按特定顺序</strong>）</p><p> <code>graph[i]</code> 是一个从节点 <code>i</code> 可以访问的所有节点的列表（即从节点 <code>i</code> 到节点 <code>graph[i][j]</code>存在一条有向边）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**graph = [[1,2],[3],[3],[]]</span><br><span class="line">**输出：**[[0,1,3],[0,2,3]]</span><br><span class="line">**解释：**有两条路径 0 -&amp;gt; 1 -&amp;gt; 3 和 0 -&amp;gt; 2 -&amp;gt; 3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**输入：**graph = [[4,3,1],[3,2,4],[3],[4],[]]</span><br><span class="line">**输出：**[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == graph.length</code></li><li><code>2 &amp;lt;= n &amp;lt;= 15</code></li><li><code>0 &amp;lt;= graph[i][j] &amp;lt; n</code></li><li><code>graph[i][j] != i</code>（即不存在自环）</li><li><code>graph[i]</code> 中的所有元素 <strong>互不相同</strong></li><li>保证输入为 <strong>有向无环图（DAG）</strong><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2></li></ul><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] graph;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    Integer n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">allPathsSourceTarget</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.graph=graph;</span><br><span class="line">        <span class="built_in">this</span>.n = graph.length;</span><br><span class="line">        <span class="built_in">this</span>.res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(<span class="number">0</span>,path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur, List&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        path.add(cur);</span><br><span class="line">        <span class="keyword">if</span>(cur==n-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 保存路径;</span></span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;graph[cur].length;i++)&#123;</span><br><span class="line">            dfs(graph[cur][i],path);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/post/41682/"/>
      <url>/post/41682/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h4 id="开放封闭原则（Open-Close-Principle）"><a href="#开放封闭原则（Open-Close-Principle）" class="headerlink" title="开放封闭原则（Open Close Principle）"></a>开放封闭原则（Open Close Principle）</h4><ul><li>原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</li><li>描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。</li><li>优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。<br>开闭原则（Open/Closed Principle，OCP）是面向对象设计的五大基本原则之一，由伯特兰·梅耶（Bertrand Meyer）在1988年提出。它指出：</li></ul><p><strong>软件实体（类、模块、函数等）应该</strong>：</p><ol><li><strong>对扩展开放</strong>（Open for extension）：可以通过增加新功能来进行扩展，而不影响现有系统的稳定性。</li><li><strong>对修改关闭</strong>（Closed for modification）：一旦设计完成，不应轻易修改已有代码，而是通过扩展的方式来实现新功能。</li></ol><p>这个原则的主要目的是为了增强系统的灵活性和可维护性，避免因为修改现有代码而引入新的错误。遵循开闭原则可以使代码更容易扩展，减少维护成本。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设我们有一个几何图形类<code>Shape</code>，需要计算不同形状的面积。以下是不遵循开闭原则的设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要增加一个新的形状，例如三角形，那么我们需要修改现有的代码，增加新的逻辑。</p><p>为了遵循开闭原则，我们可以引入一个接口<code>Shape</code>，并通过实现这个接口来扩展新的形状：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">(<span class="type">double</span> base, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.base = base;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * base * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种设计中，我们通过实现<code>Shape</code>接口来添加新的形状，而无需修改已有的代码。这种设计使得系统更容易扩展，并且符合开闭原则。</p><blockquote><p>[!NOTE] 笔记<br>这两种类似的实现方式，区别就在于前者修改了Shape的area方法，违反了<strong>对修改关闭</strong>的定义。但是两者都实现了对扩展开放，通过重写。</p></blockquote><h4 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h4><ul><li>原则思想：使用的基类可以在任何地方使用继承的子类，完美的替换基类。</li><li>大概意思是：子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。</li><li>优点：增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</li></ul><p>里氏替换原则（Liskov Substitution Principle，LSP）是面向对象设计的五大基本原则之一，由芭芭拉·里斯科夫（Barbara Liskov）在1987年提出。它指出：</p><p><strong>“如果 S 是 T 的子类，那么所有使用 T 的地方必须能够透明地使用 S 的实例而不会产生错误。”</strong></p><p>换句话说，在程序中如果使用一个基类的实例是正确的，那么使用它的子类实例也是正确的，并且不会导致程序的逻辑错误。</p><h3 id="里氏替换原则的核心思想"><a href="#里氏替换原则的核心思想" class="headerlink" title="里氏替换原则的核心思想"></a>里氏替换原则的核心思想</h3><ol><li><strong>子类型必须能够替换其基类型</strong>：子类应该可以替换基类，而不会影响程序的正确性。</li><li><strong>行为一致性</strong>：子类在覆盖基类的方法时，应该保证行为的正确性和一致性，不应该违背基类的方法约定。</li><li><strong>保证继承的可替换性</strong>：通过继承实现代码复用时，子类必须增强父类的功能，而不是削弱或改变父类的功能。</li></ol><h3 id="里氏替换原则示例"><a href="#里氏替换原则示例" class="headerlink" title="里氏替换原则示例"></a>里氏替换原则示例</h3><h4 id="违反里氏替换原则的例子"><a href="#违反里氏替换原则的例子" class="headerlink" title="违反里氏替换原则的例子"></a>违反里氏替换原则的例子</h4><p>假设我们有一个矩形类和一个正方形类，正方形是特殊的矩形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setWidth(width);</span><br><span class="line">        <span class="built_in">super</span>.setHeight(width);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setWidth(height);</span><br><span class="line">        <span class="built_in">super</span>.setHeight(height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>Square</code>类继承了<code>Rectangle</code>类，但它重写了<code>setWidth</code>和<code>setHeight</code>方法，使得正方形的宽和高始终相等。这违反了里氏替换原则，因为<code>Square</code>的行为与<code>Rectangle</code>不同。如果我们在某个地方使用<code>Rectangle</code>的实例，但不小心传入了一个<code>Square</code>实例，程序可能会出现意想不到的错误。</p><h4 id="符合里氏替换原则的例子"><a href="#符合里氏替换原则的例子" class="headerlink" title="符合里氏替换原则的例子"></a>符合里氏替换原则的例子</h4><p>为了符合里氏替换原则，我们可以将正方形和矩形的共同部分提取到一个更通用的父类或接口中，而不是让正方形继承矩形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> side;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Square</span><span class="params">(<span class="type">double</span> side)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.side = side;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSide</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> side;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSide</span><span class="params">(<span class="type">double</span> side)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.side = side;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> side * side;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种设计中，<code>Rectangle</code>和<code>Square</code>都继承自<code>Shape</code>类，并各自实现自己的<code>getArea</code>方法。这样我们就不会在继承过程中产生行为不一致的问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>里氏替换原则强调子类替换基类时行为的一致性，确保代码的健壮性和灵活性。遵循这一原则有助于实现更好的面向对象设计，提高代码的可维护性和可扩展性。</p><h4 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h4><ul><li><p>依赖倒置原则的核心思想是面向接口编程.</p></li><li><p>依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，</p></li><li><p>这个是开放封闭原则的基础，具体内容是：对接口编程，依赖于抽象而不依赖于具体。<br>依赖倒转原则（Dependency Inversion Principle，DIP）是面向对象设计的五大基本原则之一。它的主要思想是：</p></li></ul><p><strong>高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</strong></p><h3 id="依赖倒转原则的核心思想"><a href="#依赖倒转原则的核心思想" class="headerlink" title="依赖倒转原则的核心思想"></a>依赖倒转原则的核心思想</h3><ol><li><strong>高层模块和低层模块</strong>：高层模块（高层次的业务逻辑）和低层模块（具体实现细节）都应该依赖于抽象，而不是彼此依赖。这样可以减少模块之间的耦合，提高系统的灵活性和可维护性。</li><li><strong>面向接口编程</strong>：通过接口或抽象类来定义模块之间的交互，而不是通过具体的实现类。这样可以实现模块的可替换性和独立性。</li></ol><h3 id="依赖倒转原则示例"><a href="#依赖倒转原则示例" class="headerlink" title="依赖倒转原则示例"></a>依赖倒转原则示例</h3><h4 id="违反依赖倒转原则的例子"><a href="#违反依赖倒转原则的例子" class="headerlink" title="违反依赖倒转原则的例子"></a>违反依赖倒转原则的例子</h4><p>假设我们有一个<code>Keyboard</code>类和一个<code>Computer</code>类，其中<code>Computer</code>类依赖于<code>Keyboard</code>类的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Typing on the keyboard...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Keyboard keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = <span class="keyword">new</span> <span class="title class_">Keyboard</span>(); <span class="comment">// 直接依赖于具体的Keyboard类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        keyboard.type();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.type(); <span class="comment">// 输出: Typing on the keyboard...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>Computer</code>类依赖于具体的<code>Keyboard</code>类。如果我们想要替换键盘的实现，例如使用无线键盘，我们需要修改<code>Computer</code>类的代码，这违反了依赖倒转原则。</p><h4 id="符合依赖倒转原则的例子"><a href="#符合依赖倒转原则的例子" class="headerlink" title="符合依赖倒转原则的例子"></a>符合依赖倒转原则的例子</h4><p>为了符合依赖倒转原则，我们可以引入一个<code>Keyboard</code>接口，<code>Computer</code>类依赖于这个接口，而不是具体的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WiredKeyboard</span> <span class="keyword">implements</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Typing on the wired keyboard...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WirelessKeyboard</span> <span class="keyword">implements</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Typing on the wireless keyboard...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Keyboard keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入依赖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(Keyboard keyboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        keyboard.type();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Keyboard</span> <span class="variable">wiredKeyboard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WiredKeyboard</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(wiredKeyboard);</span><br><span class="line">        computer1.type(); <span class="comment">// 输出: Typing on the wired keyboard...</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Keyboard</span> <span class="variable">wirelessKeyboard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WirelessKeyboard</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(wirelessKeyboard);</span><br><span class="line">        computer2.type(); <span class="comment">// 输出: Typing on the wireless keyboard...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种设计中，<code>Computer</code>类依赖于<code>Keyboard</code>接口，而不是具体的<code>Keyboard</code>实现类。这样，当我们需要替换键盘的实现时，只需提供一个新的实现类，而不需要修改<code>Computer</code>类的代码。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>依赖倒转原则通过使高层模块和低层模块都依赖于抽象来降低耦合度，提高系统的灵活性和可维护性。通过引入接口或抽象类，我们可以实现模块之间的可替换性和独立性，避免了具体实现之间的紧密耦合。这是面向对象设计中的一个重要原则，有助于构建更加健壮和可扩展的系统。</p><h4 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h4><ul><li>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>例如：支付类的接口和订单类的接口，需要把这俩个类别的接口变成俩个隔离的接口</li></ul><p>接口隔离原则（Interface Segregation Principle，ISP）是面向对象设计的五大基本原则之一。它的主要思想是：</p><p><strong>客户端不应该被迫依赖它不使用的方法。</strong></p><p>换句话说，一个类对另一个类的依赖应该建立在最小的接口上。这个原则鼓励我们将臃肿的接口拆分为更小的、具体的接口，使得客户端只需要知道它们实际使用的方法。</p><h3 id="接口隔离原则的核心思想"><a href="#接口隔离原则的核心思想" class="headerlink" title="接口隔离原则的核心思想"></a>接口隔离原则的核心思想</h3><ol><li><strong>精简接口</strong>：接口应该尽量小，只包含客户端需要的方法。这可以防止接口变得庞大和臃肿。</li><li><strong>分离职责</strong>：将接口按照不同的职责进行拆分，使得实现类可以选择实现不同的职责，而不是被迫实现一个庞大的接口。</li><li><strong>避免臃肿接口</strong>：避免创建一个包含大量不相关方法的接口，这样会导致实现类需要实现一些它们不需要的方法。</li></ol><h3 id="接口隔离原则示例"><a href="#接口隔离原则示例" class="headerlink" title="接口隔离原则示例"></a>接口隔离原则示例</h3><h4 id="违反接口隔离原则的例子"><a href="#违反接口隔离原则的例子" class="headerlink" title="违反接口隔离原则的例子"></a>违反接口隔离原则的例子</h4><p>假设我们有一个用于各种打印任务的接口<code>Printer</code>，其中包含了多个打印相关的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printDocument</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printPhoto</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printReceipt</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DocumentPrinter</span> <span class="keyword">implements</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printDocument</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Printing document...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printPhoto</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// DocumentPrinter 不需要实现这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printReceipt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// DocumentPrinter 不需要实现这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>DocumentPrinter</code>类被迫实现了<code>Printer</code>接口中的所有方法，即使它只需要<code>printDocument()</code>方法。这违反了接口隔离原则，因为<code>DocumentPrinter</code>依赖了它不需要的方法。</p><h4 id="符合接口隔离原则的例子"><a href="#符合接口隔离原则的例子" class="headerlink" title="符合接口隔离原则的例子"></a>符合接口隔离原则的例子</h4><p>为了符合接口隔离原则，我们可以将<code>Printer</code>接口拆分为更小的、具体的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DocumentPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printDocument</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PhotoPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printPhoto</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReceiptPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printReceipt</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DocumentPrinterImpl</span> <span class="keyword">implements</span> <span class="title class_">DocumentPrinter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printDocument</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Printing document...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhotoPrinterImpl</span> <span class="keyword">implements</span> <span class="title class_">PhotoPrinter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printPhoto</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Printing photo...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReceiptPrinterImpl</span> <span class="keyword">implements</span> <span class="title class_">ReceiptPrinter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printReceipt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Printing receipt...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种设计中，每个实现类只需要实现它们所需要的接口，而不会被迫实现不相关的方法。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>接口隔离原则鼓励我们将大接口拆分为更小、更具体的接口，使得客户端只依赖它们实际使用的方法。这有助于提高系统的灵活性和可维护性，避免了因为接口变更导致的连锁反应，减少了实现类的负担和复杂度。通过遵循接口隔离原则，我们可以构建更加健壮和可扩展的系统。</p><h4 id="迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="迪米特法则（最少知道原则）（Demeter Principle）"></a>迪米特法则（最少知道原则）（Demeter Principle）</h4><ul><li>原则思想：一个对象应当对其他对象有尽可能少地了解，简称类间解耦</li><li>大概意思就是一个类尽量减少自己对其他对象的依赖，原则是低耦合，高内聚，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。</li><li><p>优点：低耦合，高内聚。</p><h4 id="单一职责原则（Principle-of-single-responsibility）"><a href="#单一职责原则（Principle-of-single-responsibility）" class="headerlink" title="单一职责原则（Principle of single responsibility）"></a>单一职责原则（Principle of single responsibility）</h4></li><li><p>原则思想：一个方法只负责一件事情。</p></li><li>描述：单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 这是常识，几乎所有程序员都会遵循这个原则。</li><li>优点：降低类和类的耦合，提高可读性，增加可维护性和可拓展性，降低可变性的风险。<br><strong>Q：java各种对象的.toString()方法是否违背了里氏替换</strong><br>  重写 <code>toString()</code> 方法通常不会违背里氏替换原则，原因如下：</li></ul><ol><li><p><strong>方法签名一致</strong>： <code>toString()</code> 方法的签名在基类和子类中是一致的，它们都返回 <code>String</code> 类型。</p></li><li><p><strong>行为一致性</strong>： 重写 <code>toString()</code> 方法不会改变对象的核心行为。无论是基类对象还是子类对象，它们都可以被正确地转换为字符串形式。这种字符串表示主要用于调试和日志记录，不会影响对象在程序中的使用和操作。</p></li><li><p><strong>增强而非削弱</strong>： 重写 <code>toString()</code> 方法通常是为了提供更多的信息，并没有减少或改变基类的功能。例如，<code>Employee</code> 类在 <code>Person</code> 类的基础上增加了职位信息，这是对功能的增强，而不是削弱。<br>里式替换原则的核心就是“约定”，父类与子类的约定。里氏替换原则要求子类在进行设计的时候要遵守父类的一些行为约定。这里的行为约定包括：函数所要实现的功能，对输入、输出、异常的约定，甚至包括注释中一些特殊说明等。</p></li></ol><p>子类方法不能违背父类方法对输入输出异常的约定</p><h4 id="1-前置条件不能被加强"><a href="#1-前置条件不能被加强" class="headerlink" title="1. 前置条件不能被加强"></a>1. 前置条件不能被加强</h4><p>前置条件即输入参数是不能被加强的，就像上面Cache的示例，Redis子类对输入参数Key的要求进行了加强，此时在调用处替换父类对象为子类对象就可能引发异常。</p><p>也就是说，子类对输入的数据的校验比父类更加严格，那子类的设计就违背了里式替换原则。</p><h4 id="2-后置条件不能被削弱"><a href="#2-后置条件不能被削弱" class="headerlink" title="2. 后置条件不能被削弱"></a>2. 后置条件不能被削弱</h4><p>后置条件即输出，假设我们的父类方法约定输出参数要大于0，调用父类方法的程序根据约定对输出参数进行了大于0的验证。而子类在实现的时候却输出了小于等于0的值。此时子类的涉及就违背了里氏替换原则</p><h4 id="3-不能违背对异常的约定"><a href="#3-不能违背对异常的约定" class="headerlink" title="3. 不能违背对异常的约定"></a>3. 不能违背对异常的约定</h4><p>在父类中，某个函数约定，只会抛出 ArgumentNullException 异常， 那子类的设计实现中只允许抛出 ArgumentNullException 异常，任何其他异常的抛出，都会导致子类违背里式替换原则。</p><h2 id="创建型设计模式6"><a href="#创建型设计模式6" class="headerlink" title="创建型设计模式6"></a>创建型设计模式6</h2><h3 id="单例模式-Singleton-pattern"><a href="#单例模式-Singleton-pattern" class="headerlink" title="单例模式(Singleton pattern)"></a>单例模式(Singleton pattern)</h3><p>其目的是确保一个类只有一个实例，并提供一个全局访问点来访问该实例</p><blockquote><p>全局访问点（Global Access Point）是指一种设计模式或机制，通过它可以从应用程序中的任何位置访问某个特定的资源或对象。在单例模式中，全局访问点通常是通过一个公共的静态方法来实现的，这个方法会返回单例类的唯一实例</p></blockquote><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景:"></a>应用场景:</h4><ul><li>网站的计数器：多个实例难以同步，保证线程安全。</li><li>日志：节省资源，保证一致性，<ul><li>关于一致性：<ul><li>如果日志记录器有多个实例，可能会导致日志记录不一致。例如，不同的实例可能会配置不同的日志格式、输出目的地等，导致日志信息分散在不同的地方，难以统一管理和分析。单例模式保证了日志记录器的配置和行为在整个应用程序中是一致的。</li></ul></li></ul></li><li>多线程的线程池的设计一般也是采用单例模式，因为线程池要方便对池中的线程进行控制。</li><li>Windows的（任务管理器）和回收站就是很典型的单例模式，他们不能打开俩个。<h4 id="单例创建方式"><a href="#单例创建方式" class="headerlink" title="单例创建方式"></a>单例创建方式</h4></li><li><p>饿汉式:类初始化时,会立即加载该对象，线程天生安全,调用效率高。，但如果实例占用资源多且未被使用，会造成资源浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EagerSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EagerSingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有化构造方法，防止外部实例化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>懒汉式: 懒汉式在第一次使用时创建实例，适合延迟加载，但需要注意线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有化构造方法，防止外部实例化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>静态内部方式: 结合了懒汉式和饿汉式各自的优点，真正需要对象的时候才会加载(静态内部类只有在其被使用时才会被加载)，加载类是线程安全的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClassSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticInnerClassSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有化构造方法，防止外部实例化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticInnerClassSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>枚举单例：使用枚举实现单例模式 优点:实现简单、调用效率高，枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞， 缺点是没有延迟加载。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Doing something...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>双重检测锁方式: 在Java 5及以后的版本中，使用<code>volatile</code>关键字的双重检查锁定是安全且推荐的。对于Java 5之前的版本，由于没有<code>volatile</code>关键字的支持，双重检查锁定确实存在问题。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DCLSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DCLSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DCLSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有化构造方法，防止外部实例化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DCLSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DCLSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">DCLSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式（Factory Pattern）是一种创建型设计模式，它提供了一种创建对象的方式，而无需在代码中显式指定具体类。这种模式将实例化对象的过程封装在工厂类中，从而使得代码更具灵活性和可维护性。<br><strong>好处：</strong></p><ul><li>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。</li><li>利用工厂模式可以降低程序的耦合性，为后期的维护修改提供了很大的便利。</li><li>将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。<h4 id="简单工厂-Simple-Factory"><a href="#简单工厂-Simple-Factory" class="headerlink" title="简单工厂(Simple Factory)"></a>简单工厂(Simple Factory)</h4>简单工厂模式通过一个静态方法，根据传入的参数决定创建哪一种类的实例。</li></ul><ol><li>创建工厂<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123; <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; &#125;</span><br></pre></td></tr></table></figure></li><li>创建工厂的产品（宝马）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bmw</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是宝马汽车...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建工另外一种产品（奥迪）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AoDi</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是奥迪汽车..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建核心工厂类，由他决定具体调用哪产品<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(name)) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">&quot;奥迪&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AoDi</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">&quot;宝马&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client01</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Car</span> <span class="variable">aodi</span>  <span class="operator">=</span>CarFactory.createCar(<span class="string">&quot;奥迪&quot;</span>);</span><br><span class="line"><span class="type">Car</span> <span class="variable">bmw</span>  <span class="operator">=</span>CarFactory.createCar(<span class="string">&quot;宝马&quot;</span>);</span><br><span class="line">aodi.run();</span><br><span class="line">bmw.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>优点：简单工厂模式能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。明确区分了各自的职责和权力，有利于整个软件体系结构的优化。</li><li>缺点：很明显工厂类集中了所有实例的创建逻辑，容易违反GRASPR的高内聚的责任分配原则<h4 id="创建型-工厂方法-Factory-Method"><a href="#创建型-工厂方法-Factory-Method" class="headerlink" title="创建型 - 工厂方法(Factory Method)"></a>创建型 - 工厂方法(Factory Method)</h4></li><li>工厂方法模式Factory Method，又称多态性工厂模式。在工厂方法模式中，核心的工厂类不再负责所有的产品的创建，而是将具体创建的工作交给子类去做。该核心类成为一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口（Product）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体产品（ConcreteProduct）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AoDi</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是奥迪汽车..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bmw</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是宝马汽车...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂接口（Creator）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">Car <span class="title function_">createCar</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体工厂（ConcreteCreator）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AoDiFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AoDi</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BmwFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Car</span> <span class="variable">aodi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AoDiFactory</span>().createCar();</span><br><span class="line"><span class="type">Car</span> <span class="variable">jili</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BmwFactory</span>().createCar();</span><br><span class="line">aodi.run();</span><br><span class="line">jili.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>优点</strong></li></ul><ol><li><p><strong>分离接口与实现</strong>：</p><ul><li>客户端代码通过抽象接口操作具体对象，而不关心具体实现类，符合依赖倒置原则（DIP）。</li></ul></li><li><p><strong>产品族一致性</strong>：</p><ul><li>抽象工厂模式可以确保同一个产品族中的对象一起使用时是兼容的，防止产品之间的不一致性问题。</li></ul></li><li><p><strong>符合开闭原则</strong>：</p><ul><li>增加新的产品族时，只需要增加具体的工厂类和产品类，而无需修改现有代码，符合开闭原则（OCP）。</li></ul></li><li><p><strong>高内聚</strong>：</p><ul><li>工厂类封装了创建对象的逻辑，单一职责明确，使代码更加模块化和可维护。</li></ul><p><strong>缺点</strong></p></li><li><p><strong>复杂性增加</strong>：</p><ul><li>引入大量的类，增加了系统的复杂度和理解难度，特别是在产品族和产品种类较多时。</li></ul></li><li><p><strong>难以扩展新的产品等级结构</strong>：</p><ul><li>抽象工厂模式很容易增加新的产品族，但不太容易增加新的产品等级结构（即增加新的产品种类）。如果需要增加新的产品种类，则需要修改抽象工厂接口及其所有子类。<h4 id="抽象工厂-Abstract-Factory"><a href="#抽象工厂-Abstract-Factory" class="headerlink" title="抽象工厂(Abstract Factory)"></a>抽象工厂(Abstract Factory)</h4></li></ul></li></ol><p>抽象工厂模式（Abstract Factory Pattern）是一种创建型设计模式，它提供一个接口，用于创建一系列相关或互相依赖的对象，而无需指定它们的具体类。抽象工厂模式使得一个类的实例化过程延迟到子类中进行。</p><h3 id="抽象工厂模式的核心思想"><a href="#抽象工厂模式的核心思想" class="headerlink" title="抽象工厂模式的核心思想"></a>抽象工厂模式的核心思想</h3><ol><li><strong>抽象工厂</strong>：定义创建一组相关对象的接口。</li><li><strong>具体工厂</strong>：实现抽象工厂的接口，创建具体的产品对象。</li><li><strong>抽象产品</strong>：为一组产品对象定义接口。</li><li><strong>具体产品</strong>：实现抽象产品的接口。</li></ol><h3 id="抽象工厂模式的结构"><a href="#抽象工厂模式的结构" class="headerlink" title="抽象工厂模式的结构"></a>抽象工厂模式的结构</h3><ol><li><strong>AbstractFactory</strong>：声明创建抽象产品对象的方法。</li><li><strong>ConcreteFactory</strong>：实现创建具体产品对象的方法。</li><li><strong>AbstractProduct</strong>：为产品对象声明接口。</li><li><strong>ConcreteProduct</strong>：定义一个将被相应的具体工厂创建的产品对象。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设我们需要创建一组相关的产品，比如按钮和文本框。我们将定义抽象工厂接口 <code>GUIFactory</code>，以及具体工厂 <code>WindowsFactory</code> 和 <code>MacFactory</code> 来创建不同平台的按钮和文本框。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品A</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Windows button clicked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mac button clicked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品B</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TextField</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsTextField</span> <span class="keyword">implements</span> <span class="title class_">TextField</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Typing in Windows text field&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacTextField</span> <span class="keyword">implements</span> <span class="title class_">TextField</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Typing in Mac text field&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line">    TextField <span class="title function_">createTextField</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsTextField</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacTextField</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GUIFactory factory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端代码，选择Windows平台</span></span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">WindowsFactory</span>();</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> factory.createButton();</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField1</span> <span class="operator">=</span> factory.createTextField();</span><br><span class="line">        button1.click(); <span class="comment">// 输出: Windows button clicked</span></span><br><span class="line">        textField1.type(); <span class="comment">// 输出: Typing in Windows text field</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端代码，选择Mac平台</span></span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">MacFactory</span>();</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> factory.createButton();</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField2</span> <span class="operator">=</span> factory.createTextField();</span><br><span class="line">        button2.click(); <span class="comment">// 输出: Mac button clicked</span></span><br><span class="line">        textField2.type(); <span class="comment">// 输出: Typing in Mac text field</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><strong>抽象产品接口</strong>：<code>Button</code> 和 <code>TextField</code> 定义了产品的抽象接口。</li><li><strong>具体产品类</strong>：<code>WindowsButton</code>、<code>MacButton</code>、<code>WindowsTextField</code>、<code>MacTextField</code> 实现了抽象产品接口。</li><li><strong>抽象工厂接口</strong>：<code>GUIFactory</code> 定义了创建产品的方法。</li><li><strong>具体工厂类</strong>：<code>WindowsFactory</code> 和 <code>MacFactory</code> 实现了 <code>GUIFactory</code> 接口，负责创建具体的产品对象。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><strong>封装对象创建</strong>：将一组相关对象的创建逻辑封装在具体工厂中，客户端无需关心对象的创建细节。</li><li><strong>提高可扩展性</strong>：可以方便地添加新的具体工厂和产品类，符合开闭原则。</li><li><strong>一致的产品族</strong>：确保同一个具体工厂创建的一组对象是相互兼容的。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li><strong>增加复杂性</strong>：增加了系统的复杂性，需要定义多个接口和类。</li><li><strong>难以支持新种类的产品</strong>：如果需要添加一种新种类的产品，必须修改抽象工厂接口及其所有子类。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li><strong>系统需要与多个产品族中的多个产品交互</strong>。</li><li><strong>系统要求产品族的一致性</strong>，确保由同一个工厂创建的产品能够一起工作。</li><li><strong>需要独立于产品的创建和具体实现的代码</strong>，将对象创建的细节封装在具体工厂中。</li></ol><p>抽象工厂模式通过提供一组创建相关对象的接口，简化了客户端代码的使用，提高了系统的可扩展性和一致性。</p><h3 id="生成器-Builder"><a href="#生成器-Builder" class="headerlink" title="生成器(Builder)"></a>生成器(Builder)</h3><ul><li><p>建造者模式：是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的方式进行创建。</p></li><li><p>工厂类模式是提供的是创建单个类的产品</p></li><li><p>而建造者模式则是将各种产品集中起来进行管理，用来具有不同的属性的产品<br><strong>使用场景：</strong></p></li></ul><ol><li>需要生成的对象具有复杂的内部结构。</li><li>需要生成的对象内部属性本身相互依赖。</li></ol><ul><li><p>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p></li><li><p>JAVA 中的 StringBuilder就是建造者模式创建的，他把一个单个字符的char数组组合起来</p></li><li><p>Spring不是建造者模式，它提供的操作应该是对于字符串本身的一些操作，而不是创建或改变一个字符串。</p><h3 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h3><p>原型模式（Prototype Pattern）是一种创建型设计模式，它允许通过复制<strong>现有对象的实例</strong>来创建新的对象，而不是通过类构造器来创建。这样可以减少创建对象的开销，尤其是在创建对象的过程复杂或昂贵时。原型模式通过实现一个原型接口（通常是 <code>Cloneable</code> 接口），来提供一个用于复制现有实例的方法。</p><h4 id="原型模式的核心要点"><a href="#原型模式的核心要点" class="headerlink" title="原型模式的核心要点"></a>原型模式的核心要点</h4></li></ul><ol><li><strong>原型接口（Prototype Interface）</strong>：通常定义一个 <code>clone</code> 方法用于复制对象。</li><li><strong>具体原型类（Concrete Prototype Class）</strong>：实现原型接口并提供实际的复制功能。</li><li><p><strong>客户端（Client）</strong>：使用原型实例来创建新的对象。</p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4></li><li><p>定义一个原型接口，通常包括一个 <code>clone</code> 方法。</p></li><li>实现具体的原型类，实现 <code>clone</code> 方法。</li><li>使用原型实例创建新的对象。</li></ol><p>demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义原型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Prototype</span> <span class="keyword">extends</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    Prototype <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的原型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcretePrototype</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (ConcretePrototype) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypePatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个原型实例</span></span><br><span class="line">        <span class="type">ConcretePrototype</span> <span class="variable">original</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>(<span class="string">&quot;Original&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过复制创建新实例</span></span><br><span class="line">        <span class="type">ConcretePrototype</span> <span class="variable">copy</span> <span class="operator">=</span> (ConcretePrototype) original.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改复制的实例</span></span><br><span class="line">        copy.setName(<span class="string">&quot;Copy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印原型和复制实例的名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Original Name: &quot;</span> + original.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Copy Name: &quot;</span> + copy.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>[! 浅拷贝和深拷贝]</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝会复制对象本身以及对象中包含的基本类型字段，但不会递归复制引用类型字段。引用类型字段的副本仍然指向原始对象中相同的内存地址。这意味着对这些引用类型字段的修改会影响原始对象和副本。</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝不仅复制对象本身，还递归复制对象中包含的所有引用类型字段。这样，新副本就完全独立于原始对象，对副本的修改不会影响原始对象，反之亦然。</p><h2 id="结构型设计模式7"><a href="#结构型设计模式7" class="headerlink" title="结构型设计模式7"></a>结构型设计模式7</h2><h3 id="外观模式-Facade-pattern"><a href="#外观模式-Facade-pattern" class="headerlink" title="外观模式(Facade pattern)"></a>外观模式(Facade pattern)</h3></blockquote><h3 id="适配器模式-Adapter-pattern"><a href="#适配器模式-Adapter-pattern" class="headerlink" title="适配器模式(Adapter pattern)"></a>适配器模式(Adapter pattern)</h3><p>适配器模式（Adapter Pattern）是一种结构型设计模式，它允许接口不兼容的对象之间进行协作。适配器模式通过将一个类的接口转换成客户端所期望的另一个接口，使得原本由于接口不兼容而无法在一起工作的类可以在一起工作。</p><h4 id="适配器模式的核心要点"><a href="#适配器模式的核心要点" class="headerlink" title="适配器模式的核心要点"></a>适配器模式的核心要点</h4><ol><li><strong>目标接口（Target Interface）</strong>：客户端期望的接口。</li><li><strong>需要适配的类（Adaptee）</strong>：拥有不兼容接口的类。</li><li><strong>适配器（Adapter）</strong>：将 Adaptee 的接口转换为目标接口的类。</li><li><p><strong>客户端（Client）</strong>：使用目标接口与适配器交互。</p><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4></li><li><p>定义一个原型接口，通常包括一个 <code>clone</code> 方法。</p></li><li>实现具体的原型类，实现 <code>clone</code> 方法。</li><li>使用原型实例创建新的对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要适配的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Called specificRequest()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>(adaptee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端使用目标接口</span></span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="桥接模式-Bridge-pattern"><a href="#桥接模式-Bridge-pattern" class="headerlink" title="桥接模式(Bridge pattern)"></a>桥接模式(Bridge pattern)</h3><h3 id="组合模式-composite-pattern"><a href="#组合模式-composite-pattern" class="headerlink" title="组合模式(composite pattern)"></a>组合模式(composite pattern)</h3><h3 id="装饰者模式-decorator-pattern"><a href="#装饰者模式-decorator-pattern" class="headerlink" title="装饰者模式(decorator pattern)"></a>装饰者模式(decorator pattern)</h3><h3 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h3><h3 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h3><p>代理模式（Proxy Pattern）是一种结构型设计模式，它提供了一个替代者或占位符，用来控制对某个对象的访问。代理模式可以在不修改原始对象的情况下，提供额外的功能，例如访问控制、延迟初始化、日志记录等。</p><h4 id="代理模式的核心要点"><a href="#代理模式的核心要点" class="headerlink" title="代理模式的核心要点"></a>代理模式的核心要点</h4><ol><li><strong>主题接口（Subject Interface）</strong>：定义了代理类和真实对象的共同行为。</li><li><strong>真实对象（Real Subject）</strong>：实现了主题接口，代表了代理所代理的实际对象。</li><li><strong>代理对象（Proxy）</strong>：也实现了主题接口，控制对真实对象的访问，并可以在此基础上增加额外的功能。</li></ol><h4 id="使用步骤-2"><a href="#使用步骤-2" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>定义主题接口，声明业务方法。</li><li>实现真实对象类，完成实际的业务逻辑。</li><li>实现代理类，控制对真实对象的访问，并可以在此过程中增加额外的操作。</li><li>客户端通过代理对象来间接访问真实对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主题接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实对象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RealSubject: Handling request.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理对象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="literal">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy: Logging request.&quot;</span>);</span><br><span class="line">        realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="行为型设计模式11"><a href="#行为型设计模式11" class="headerlink" title="行为型设计模式11"></a>行为型设计模式11</h2><h3 id="责任链模式-Chain-of-responsibility-pattern"><a href="#责任链模式-Chain-of-responsibility-pattern" class="headerlink" title="责任链模式(Chain of responsibility pattern)"></a>责任链模式(Chain of responsibility pattern)</h3><h3 id="策略模式-strategy-pattern"><a href="#策略模式-strategy-pattern" class="headerlink" title="策略模式(strategy pattern)"></a>策略模式(strategy pattern)</h3><h3 id="模板方法模式-Template-pattern"><a href="#模板方法模式-Template-pattern" class="headerlink" title="模板方法模式(Template pattern)"></a>模板方法模式(Template pattern)</h3><h3 id="命令模式-Command-pattern"><a href="#命令模式-Command-pattern" class="headerlink" title="命令模式(Command pattern)"></a>命令模式(Command pattern)</h3><h3 id="观察者模式-observer-pattern"><a href="#观察者模式-observer-pattern" class="headerlink" title="观察者模式(observer pattern)"></a>观察者模式(observer pattern)</h3><h3 id="访问者模式-visitor-pattern"><a href="#访问者模式-visitor-pattern" class="headerlink" title="访问者模式(visitor pattern)"></a>访问者模式(visitor pattern)</h3><h3 id="状态模式-State-pattern"><a href="#状态模式-State-pattern" class="headerlink" title="状态模式(State pattern)"></a>状态模式(State pattern)</h3><h3 id="解释器模式-Interpreter-pattern"><a href="#解释器模式-Interpreter-pattern" class="headerlink" title="解释器模式(Interpreter pattern)"></a>解释器模式(Interpreter pattern)</h3><h3 id="迭代器模式-iterator-pattern"><a href="#迭代器模式-iterator-pattern" class="headerlink" title="迭代器模式(iterator pattern)"></a>迭代器模式(iterator pattern)</h3><h3 id="中介者模式-Mediator-pattern"><a href="#中介者模式-Mediator-pattern" class="headerlink" title="中介者模式(Mediator pattern)"></a>中介者模式(Mediator pattern)</h3><h3 id="备忘录模式-Memento-pattern"><a href="#备忘录模式-Memento-pattern" class="headerlink" title="备忘录模式(Memento pattern)"></a>备忘录模式(Memento pattern)</h3></li></ol></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅析几种唯一id生成算法</title>
      <link href="/post/21201/"/>
      <url>/post/21201/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p><code>UUID （Universally Unique Identifier）</code>，通用唯一识别码的缩写。UUID是由一组32位数的16进制数字所构成，所以UUID理论上的总数为 <code>16^32=2^128</code>，约等于 <code>3.4 x 10^38</code>。 ^3250ce</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用github+cloudflare+picgo搭建图床视频床文件床</title>
      <link href="/post/16569/"/>
      <url>/post/16569/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>Github是一个著名的代码托管网站，可以创建仓库存储代码，但是我们可以也上传图片，视频这些文件。<br>因为众所周知的原因国内Github访问很慢本身不具备图床条件，我们可以通过cloudflare来进行代理实现加速的效果。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ul><li>单个仓库支持5GB的空间，不够可以再新建一个仓库，继续存，所以理论上是无限存储。</li><li>无限速直连</li><li>经测试单个文件大小最多支持115mb</li><li>单日请求数最多10w<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1></li><li>一个Github账号</li><li>一个cloudflare账号</li><li>PicGo<a href="[w](https://github.com/Molunerfinn/PicGo/releases/download/v2.3.1/PicGo-Setup-2.3.1.exe">点击下载</a>)</li><li>域名(可有可无)</li><li>梯子(可有可无，主要原因是Github访问有点慢)</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p><a href="https://james-blog.top/posts/21.html">详细教程</a></p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 实用技巧 </tag>
            
            <tag> 小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目设计</title>
      <link href="/post/61760/"/>
      <url>/post/61760/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p><img src="https://pic.zjcspace.xyz/img/202405031110216.png" alt="image-20240502173535759"></p><h1 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h1><h2 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a><strong>基本流程：</strong></h2><p><img src="https://pic.zjcspace.xyz/img/202405031250969.svg" alt="https://pic.zjcspace.xyz/img/202405031250969.svg"></p><h2 id="方式1-基于session登录"><a href="#方式1-基于session登录" class="headerlink" title="方式1.基于session登录:"></a>方式1.基于session登录:</h2><h3 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h3><p><img src="https://pic.zjcspace.xyz/img/202405031317124.svg" alt="https://pic.zjcspace.xyz/img/202405031317124.svg"></p><p>关键代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">     <span class="comment">//验证手机号格式</span></span><br><span class="line">     <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//生成验证码</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> VeriyCodeGenerate.generate();</span><br><span class="line">     session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">     <span class="keyword">return</span> Result.ok(<span class="string">&quot;验证码已发送，注意查收😊&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="登录-注册"><a href="#登录-注册" class="headerlink" title="登录/注册"></a>登录/注册</h3><p><img src="https://pic.zjcspace.xyz/img/202405031417621.svg" alt="https://pic.zjcspace.xyz/img/202405031417621.svg"></p><p>关键代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="comment">// 验证手机格式</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(MessageContants.PHONEINVAILD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证验证码</span></span><br><span class="line">    <span class="keyword">if</span> (code==<span class="literal">null</span>||!code.equals(session.getAttribute(<span class="string">&quot;code&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(MessageContants.VERIYCODEERR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证是否注册</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>,phone).one();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123; <span class="comment">//手机号仅有一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> SystemConstants.PREFIX_NICKNAME + RandomUtil.randomString(<span class="number">9</span>);</span><br><span class="line">        user = <span class="keyword">new</span> <span class="title class_">User</span>().setPhone(phone).setNickName(nickName);</span><br><span class="line">        save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存会话信息，维持登录状态</span></span><br><span class="line">    <span class="comment">// 保存必要即可，减小内存，保护隐私</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>, BeanUtil.copyProperties(user, UserDTO.class));</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h3><p><strong>登录校验的解耦</strong></p><p>登录成功后会保存User信息到session，今后当访问某些需要前端校验的页面或接口时需要校验登录状态，如果我们为每一个接口都重复写相同的校验逻辑，未免太麻烦了，同时随着业务size的扩大，维护起来也相当不变，我们有两种方案，一种是Aop切片，在特定方法调用校验逻辑，另一种是添加拦截器，使用拦截器对某些接口来进行校验登录，符合则放行，不符合直接返回。</p><blockquote><p>拦截器和过滤器有什么区别?</p></blockquote><p>　　<strong>①拦截器是基于java的反射机制的，而过滤器是基于函数回调。<br>　　②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。<br>　　③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。<br>　　④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。<br>　　⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</strong></p><p>　　<strong>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</strong></p><p>　</p><ul><li><p>创建拦截器</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">userDTO</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(userDTO==<span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserHolder.saveUser((UserDTO) userDTO);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加拦截器到Spring MVC的拦截器链中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="发现bug"><a href="#发现bug" class="headerlink" title="发现bug"></a>发现bug</h3><p>我发现以上登录过程有漏洞！</p><p>假设我输入了手机号<code>p1</code>然后收到了验证码，我正确的收入了验证码然后此时我再修改<code>p1</code>为<code>p2</code>这时我会登录成功到<code>p2</code>的账户，解决方法是使用手机号作为key而不是<code>code</code>，并且加入验证手机号的逻辑：</p><p>改正如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//验证手机号格式</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(MessageContants.PHONEINVAILD);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> VeriyCodeGenerate.generate();</span><br><span class="line"><span class="comment">//        session.setAttribute(&quot;code&quot;,code); 错误</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(MessageContants.VERIYCODEOK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其他不用改。</p><h3 id="接入阿里云短信服务"><a href="#接入阿里云短信服务" class="headerlink" title="接入阿里云短信服务"></a>接入阿里云短信服务</h3><blockquote><p> 待开发…</p></blockquote><h3 id="session的局限性"><a href="#session的局限性" class="headerlink" title="session的局限性"></a>session的局限性</h3><p>面对集群方案时，session在tomcat服务器之间不共享，难以进行负载均衡。即使tomcat具有复制其他tomcat的功能，但难免造成内存浪费和数据一致性问题。因此面对集群时其替代方案必须满足：</p><ul><li>数据共享—数据一致</li><li><code>key-value</code>的数据结构—方便</li><li>内存存储—快速</li></ul><p>使用<strong>redis</strong></p><h2 id="方式2-使用redis"><a href="#方式2-使用redis" class="headerlink" title="方式2.使用redis"></a>方式2.使用redis</h2><p>在前面的基础上，我们需要确定一下问题:</p><ul><li><p><strong>验证码在redis中的数据结构和相关问题</strong></p><p>  使用<code>string</code>的数据结构,与session不同redis是线程共享的，因此使用<code>&quot;code&quot;</code>作为<code>key</code>是万万不行的,这样无法区分用户，因此可以采用<code>phone</code>作为key。我们可以设置5min的存活时长。</p></li></ul><ul><li><p><strong>登录信息在redis中的数据结构</strong></p><ul><li>使用<code>string</code><ul><li><strong>优点</strong>：<strong>简单</strong>易懂，直观，<strong>支持事务操作：</strong> 对String类型的数据可以支持事务操作，保证原子性。<strong>支持事务操作</strong></li><li>缺点：存储了不必要的<code>&#123;&#125;&quot;&quot;</code>，<strong>占用空间大</strong>，<strong>无法改变单个字段</strong>。</li></ul></li><li>使用<code>hash</code>（本项目实践）<ul><li><strong>优点</strong>：存储空间小，可以进行单个字段更改。</li><li><strong>缺点</strong>：<strong>不支持事务操作</strong></li></ul></li></ul></li></ul><h3 id="发送验证码-1"><a href="#发送验证码-1" class="headerlink" title="发送验证码"></a>发送验证码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">这部分较为简单，使用`phone:veriyCode`存储:</span><br><span class="line">```java</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//验证手机号格式</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(MessageContants.PHONEINVAILD);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> VeriyCodeGenerate.generate();</span><br><span class="line">        <span class="comment">// 保存到redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(RedisConstants.LOGIN_CODE_KEY+phone,code,<span class="number">2</span>, TimeUnit.MINUTES);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(MessageContants.VERIYCODEOK);</span><br><span class="line">    &#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="注册-登录"><a href="#注册-登录" class="headerlink" title="注册/登录"></a>注册/登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="comment">// 验证手机格式</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(MessageContants.PHONEINVAILD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证验证码</span></span><br><span class="line">    <span class="keyword">if</span> (code==<span class="literal">null</span>||!code.equals(stringRedisTemplate.opsForValue().get(RedisConstants.LOGIN_CODE_KEY+phone))) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(MessageContants.VERIYCODEERR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证是否注册</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>,phone).one();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123; <span class="comment">//手机号仅有一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> SystemConstants.PREFIX_NICKNAME + RandomUtil.randomString(<span class="number">9</span>);</span><br><span class="line">        user = <span class="keyword">new</span> <span class="title class_">User</span>().setPhone(phone).setNickName(nickName);</span><br><span class="line">        save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存用户信息</span></span><br><span class="line">    <span class="comment">//生成Token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//存储用户信息</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user,UserDTO.class);</span><br><span class="line">    Map&lt;String, Object&gt; userDaoMap = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),CopyOptions.create()</span><br><span class="line">            .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">            .setFieldValueEditor((k,v)-&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> v.toString();</span><br><span class="line">            &#125;));</span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(RedisConstants.LOGIN_USER_KEY+token,userDaoMap);</span><br><span class="line">    stringRedisTemplate.expire(RedisConstants.LOGIN_USER_KEY+token,RedisConstants.LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续身份校验"><a href="#后续身份校验" class="headerlink" title="后续身份校验"></a>后续身份校验</h3><p>除此之外还有需要配置身份校验的拦截器。</p><p>这里我遇到了一个注入的问题，拦截器<code>LoginInceptor</code>注入<code>stringRedisTemplate</code>对象一开始我使用<code>@Resourse</code>这种注解使用，结果报空指针，然后我又加了<code>@Compent</code>注解让spring维护这个bean结果还是不行，后来发现<code>LoginInceptor</code>类的实是在<code>InceptorConfig</code>配置类中创建的，而该类由spring管理，因此我们可以把<code>stringRedisTemplate</code>放到配置类注入，需要在拦截器类额外添加一个带参构造方法。</p><p>基于session的方案改为redis的方案我们还需要一个用于token刷新的拦截器，此拦截器拦截所有路径，判定是否为已登录状态，如果是，则刷新token的expire时间。因此第一个拦截器负责刷新token和存入用户信息。第二个则根据ThreadLocal是否存在UserDto对象来进行特定api的校验。</p><p><strong>Q：为什么把redis的读写操作移到请求更多的第一层(方案2)？</strong></p><p>如果第一层仅仅用来刷新token，第二层进行user的获取和校验(方案1)</p><ul><li><p>方案1每次普通redis请求次数：</p><ul><li>第一层：刷新token，写入token存活时间=1</li><li>第二层：0</li></ul></li><li><p>方案1权限请求，</p><ul><li>第一层：刷新token，写入token存活时间=1</li><li>第二层：获取token对应userDTO=1</li></ul></li><li><p>方案2普通请求</p><ul><li>第一层：刷新token，获得user对象，存入=2</li><li>第二层：0</li></ul></li><li>方案2权限请求<ul><li>第一层刷新token，获得user对象=2</li><li>第二层：0</li></ul></li></ul><p>可以发现实际上现在方案的redis的<strong>压力</strong>更大，如果两种类型请求为1:1做法，后者是前者请求的1.3倍.但是前者会<strong>重新</strong>进行token的校验验证的相关逻辑,会增加服务器的压力，孰轻孰重应视情况而定。我暂时选第二种。</p><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完成token刷新，根据token保存user对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VeriyUserInceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VeriyUserInceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate=stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获得token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断token是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(token==<span class="literal">null</span>||token.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拼接token_key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token_key</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY+token;</span><br><span class="line">        <span class="comment">// 获取用户信息</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = stringRedisTemplate.opsForHash().entries(token_key);</span><br><span class="line">        <span class="comment">// 判断是否该用户存在</span></span><br><span class="line">        <span class="keyword">if</span>(map.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(map,<span class="keyword">new</span> <span class="title class_">UserDTO</span>(),<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 存储</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">// 刷新有效期</span></span><br><span class="line">        stringRedisTemplate.expire(token_key,RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 进行身份校验，未登录的用户在特定页面和接口会返回403</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 上一个拦截器已经对已经</span></span><br><span class="line">        <span class="keyword">if</span>(UserHolder.getUser()==<span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器配置类：</p><p>如果链式调用没有order()方法则默认按照添加顺序，否则order越小，优先级越大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">VeriyUserInceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为商户查询添加缓存"><a href="#为商户查询添加缓存" class="headerlink" title="为商户查询添加缓存"></a>为商户查询添加缓存</h1><h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>缓存是原始意义是指访问速度比一般<a href="https://zh.wikipedia.org/wiki/隨機存取記憶體">随机存取存储器</a>（RAM）快的一种RAM，可以理解为比内存还快的内存，用于解决cpu直接从内存读取较慢的问题，可以把访问频率高的数据存储到缓存中，cpu可以因避免io过长从而大大提高cpu的执行速度。</p><p>而如今缓存的概念已经泛化，不仅在CPU和主内存之间有Cache，而且在内存和<a href="https://zh.wikipedia.org/wiki/硬盘">硬盘</a>之间也有Cache（<strong><a href="https://zh.wikipedia.org/wiki/磁盘缓存">磁盘缓存</a></strong>），乃至在硬盘与<a href="https://zh.wikipedia.org/wiki/网络">网络</a>之间也有某种意义上的Cache──称为<strong><a href="https://zh.wikipedia.org/wiki/Internet">Internet</a>临时文件夹</strong>或<strong>网络内容缓存</strong>等。<strong>凡是位于速度相差较大的两种<a href="https://zh.wikipedia.org/wiki/硬件">硬件</a>之间，用于协调两者数据传输速度差异的结构，均可称之为Cache。</strong></p><h2 id="添加缓存"><a href="#添加缓存" class="headerlink" title="添加缓存"></a>添加缓存</h2><p>为商户添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//在redis查找</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//存在直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不存在查数据库</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//数据库不存在，返回不存在</span></span><br><span class="line">    <span class="keyword">if</span>(shop==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;商户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数据库存在回写redis并且返回</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop));</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为商户类型添加:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// redis查询</span></span><br><span class="line">     List&lt;String&gt; list = stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">     <span class="comment">// 命中直接返回</span></span><br><span class="line">     List&lt;ShopType&gt; l;</span><br><span class="line">     <span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">         l = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">         list.forEach((i) -&gt; &#123;</span><br><span class="line">             l.add(JSONUtil.toBean(i, ShopType.class));</span><br><span class="line">         &#125;);</span><br><span class="line">         l.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;ShopType&gt;() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(ShopType shopType, ShopType t1)</span> &#123;</span><br><span class="line">                 <span class="keyword">return</span> shopType.getSort() - t1.getSort();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="keyword">return</span> Result.ok(l);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 未命中，查数据库</span></span><br><span class="line">     l = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">     <span class="comment">// 不存在报错</span></span><br><span class="line">     <span class="keyword">if</span>(l==<span class="literal">null</span>)&#123;</span><br><span class="line">         Result.fail(<span class="string">&quot;无类型😪&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 存在回写redis并返回</span></span><br><span class="line">     stringRedisTemplate.opsForList().leftPushAll(SHOP_GEO_KEY,JSONUtil.toJsonStr(l));</span><br><span class="line">     <span class="keyword">return</span> Result.ok(l);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>后来我知道了<code>JSONUtil.toList(l,ShopType.class);</code>这个方法😑</p></blockquote><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><h3 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h3><div class="table-container"><table><thead><tr><th></th><th>内存淘汰</th><th>超时剔除</th><th>主动更新</th></tr></thead><tbody><tr><td><strong>说明</strong></td><td>不同自已维护，利用Redis的内存清除机制，一旦内存不足时自动淘汰部分数据，下次查询缓存</td><td>给缓存数据设置TTL时间，到期后自动删除缓存。下次查询时更新缓存。</td><td>编写业务逻辑，在修改数据数据库的同时，更新缓存。</td></tr><tr><td><strong>一致性</strong></td><td>差</td><td>一般</td><td>好</td></tr><tr><td><strong>维护成本</strong></td><td>无</td><td>低</td><td>高</td></tr></tbody></table></div><p>业务场景：</p><ul><li>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如在线商铺的查询缓存。</li></ul><h3 id="主动更新策略的三种模式"><a href="#主动更新策略的三种模式" class="headerlink" title="主动更新策略的三种模式"></a>主动更新策略的三种模式</h3><p>[参考][<a href="https://www.cnblogs.com/wftop1/p/17337665.html#%E7%BC%BA%E9%99%B7">https://www.cnblogs.com/wftop1/p/17337665.html#%E7%BC%BA%E9%99%B7</a>]</p><ul><li>(<strong>Cache Aside Pattern</strong>)由缓存调用者，在更新db时同时更新数据。</li><li>(<strong>Read/write Through Pattern</strong>)缓存与db整合为一个服务，由服务本身进行数据一致性的维护，调用者调用该服务，其内部的数据一致性问题对调用者透明。</li><li>(<strong>Write Behind Caching Pattern</strong>)调用者只操作缓存，db由其他线程异步写入。</li></ul><p>第二种方案，市面上难找，开发难度大，第三种方案效率虽高，写多次redis只需一次同步到db，但风险较大，因redis基于内存，遇到redis宕机服务器宕机会导致数据丢失。因此采用较为稳妥的方案1；</p><p><strong>Cache Aside Pattern需要注意的问题:</strong></p><ul><li><p>发生更新时如何更新</p><ul><li>更新缓存。更新数据库时更新缓存。无效写redis较多。</li><li>删除缓存。更新数据库，并且使缓存失效。等待下次查询时，自动添加缓存。这是最佳实践。</li></ul></li><li><p>如何保证缓存和数据库操作的原子性<br>  使用事务操作</p></li><li><p>先操作缓存还是先操作数据库？</p><p>  <img src="https://pic.zjcspace.xyz/b/202405052116004.png" alt="image-20240505211537453"></p></li></ul><ul><li>先删除缓存，可能造成数据不一致的原因是，一次更新操作，首先删除缓存，与此同时另一个线程查询缓存未命中，然后查询数据库的旧数据，并且回写缓存导致，缓存存放的旧数据</li><li>先操作数据库，可能造成数据库不一致的原因是，查询线程查询缓存未命中，继续查询数据库，在其回写缓存期间，另一线程进行了数据库更新并删除缓存，此时为空，删了个寂寞，而后查询线程回写了数据库的旧数据。</li></ul><p><del>两种策略都会导致数据不一致问题，但概览不一样，前者的操作间隙较小，期间插入一个数据库的查询操作可能性较小。而后者，先操作数据库导致操作空隙较大，此时其他线程乘虚而入的几率会大大增加，因此采用<strong>第一种方案。</strong></del></p><p>两种策略都会导致数据不一致但是概率不同，$前者删除的操作间隙=t<em>{db更新完成}-t</em>{缓存删除完成}=t<em>{db更新时间}$,$后者的操作间隙=t</em>{写入缓存}-t<em>{db查询完成}=t</em>{缓存写入时间}$</p><p>前者的操作间隙远远大于后者，且后者条件更为苛刻(需要缓存失效)。因此先操作数据库再操作缓存方为上策。</p><p>延迟删除?</p><p>Cache Aside 策略适合读多写少的场景，不适合写多的场景，因为当写入比较频繁时，缓存中的数据会被频繁地清理，这样会对缓存的命中率有一些影响。如果业务对缓存命中率有严格的要求，那么可以考虑两种解决方案：</p><p>  ●一种做法是在更新数据时也更新缓存，只是在更新缓存前先加一个分布式锁。因为这样在同一时间只允许一个线程更新缓存，就不会产生并发问题了。当然这么做对于写入的性能会有一些影响；</p><p>  ●另一种做法同样也是在更新数据时更新缓存，只是给缓存加一个较短的过期时间。这样即使出现缓存不一致的情况，缓存的数据也会很快过期，对业务的影响也是可以接受。</p><p>对于先更新数据库再删除缓存的极限似乎已经到这里了，我们也看看先删除缓存会怎么办？这时延时双删就出现了，针对「先删除缓存，再更新数据库」方案在「读 + 写」并发请求而造成缓存不一致的解决办法是「延迟双删」。</p><p>伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除缓存</span></span><br><span class="line">redis.delKey(X)</span><br><span class="line"><span class="comment">// 更新数据库</span></span><br><span class="line">db.update(X)</span><br><span class="line"><span class="comment">// 睡眠</span></span><br><span class="line">Thread.sleep(N)</span><br><span class="line"><span class="comment">// 再删除缓存</span></span><br><span class="line">redis.delKey(X)</span><br></pre></td></tr></table></figure><p>他在更新数据库后会添加一小段时间让线程休眠，之后删除缓存，来删除在数据库未更新完成期间期间，其他线程缓存的脏数据。</p><p>针对于前面的介绍，可以分析出以下结论：</p><p>  ●延时双删适用于对数据一致性要求较高的场景。它能够保证在数据库更新期间，读取请求不会读取到已经失效的缓存数据，从而保证数据的一致性。但是它需要进行两次缓存删除操作，可能会增加一定的资源开销;</p><p>  ●先更新数据库后删除缓存适用于对一致性要求较低，对性能要求较高的场景。它能够减少一次缓存删除的开销，但是在数据库更新期间，读取请求可能会读取到已经失效的缓存数据，从而导致数据不一致。</p><p>同时，还可以根据实际情况做一些权衡和优化。比如可以使用读写锁来减少数据库更新期间的并发读取请求，从而降低数据不一致的可能性。或者可以考虑使用更高效的缓存淘汰算法，来降低缓存的过期时间，减少缓存失效的影响。</p><div class="table-container"><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th><th>实现难度</th><th>适用场景</th></tr></thead><tbody><tr><td>先更新缓存后更新数据库</td><td>减少了一次缓存删除的开销</td><td>在数据库更新期间，可能读取脏数据</td><td>中等</td><td>适用于一致性要求较低、对性能要求较高的场景</td></tr><tr><td>先更新数据库再更新缓存</td><td>保证了数据一致性，读取时几乎不会读取失效的缓存数据</td><td>需要删除并再次缓存删除操作，增加了一定的资源开销</td><td>高</td><td>适用于一致性要求较高的场景，同时对性能或响应一定有弹性的场景</td></tr></tbody></table></div><p>我们采用先更新数据库再删除缓存的策略，并通过给缓存设置有效时间来，缓解数据不一致性带来的问题。</p><p>查询缓存添加缓存时设置有效时间:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存在回写redis，设置有效时间并返回</span></span><br><span class="line"><span class="comment">// 转字符串List&lt;String&gt;</span></span><br><span class="line">List&lt;String&gt; shopCache = l.stream().map(JSONUtil::toJsonStr).collect(Collectors.toList());</span><br><span class="line">stringRedisTemplate.opsForList().leftPushAll(CACHE_SHOP_TYPE_KEY, shopCache );</span><br><span class="line">stringRedisTemplate.expire(CACHE_SHOP_TYPE_KEY,CACHE_SHOP_TYPE_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库存在回写redis，设置有效时间并且返回</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>更新先写数据库再删除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(shop.getId()==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空🤗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新数据库</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">// 删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY+shop.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h2><p>用户访问的数据，<strong>既不在缓存中，也不在数据库中</strong>，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是<strong>缓存穿透</strong>的问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>缓存空值</p><p>  当请求查询数据库发现不存在时，会根据该请求缓存一个空值，下次被请求时将不会打到数据库，但会产生数据不一致问题和内存占用高问题：缓存空值后，后续该缓存实际在数据库中有了数据，导致数据不一致，缓解方法是给缓存设置TLL过期时间，或者新增数据时主动为缓存覆盖空值。</p></li><li><p>使用布隆过滤器[(来自小林coding)][<a href="https://xiaolincoding.com/redis/cluster/cache_problem.html#%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F">https://xiaolincoding.com/redis/cluster/cache_problem.html#%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F</a>]</p><p>  我们可以在写入数据库数据时，使用布隆过滤器做个标记，然后在用户请求到来时，业务线程确认缓存失效后，可以通过查询布隆过滤器快速判断数据是否存在，如果不存在，就不用通过查询数据库来判断数据是否存在。</p><p>  即使发生了缓存穿透，大量请求只会查询 Redis 和布隆过滤器，而不会查询数据库，保证了数据库能正常运行，Redis 自身也是支持布隆过滤器的。</p><p>  那问题来了，布隆过滤器是如何工作的呢？接下来，我介绍下。</p><p>  布隆过滤器由「初始值都为 0 的位图数组」和「 N 个哈希函数」两部分组成。当我们在写入数据库数据时，在布隆过滤器里做个标记，这样下次查询数据是否在数据库时，只需要查询布隆过滤器，如果查询到数据没有被标记，说明不在数据库中。</p><p>  布隆过滤器会通过 3 个操作完成标记：</p><ul><li>第一步，使用 N 个哈希函数分别对数据做哈希计算，得到 N 个哈希值；</li><li>第二步，将第一步得到的 N 个哈希值对位图数组的长度取模，得到每个哈希值在位图数组的对应位置。</li><li><p>第三步，将每个哈希值在位图数组的对应位置的值设置为 1；</p><p>举个例子，假设有一个位图数组长度为 8，哈希函数 3 个的布隆过滤器。</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/86b0046c2622b2c4bda697f9bc0f5b28.png" alt="图片"></p><p>在数据库写入数据 x 后，把数据 x 标记在布隆过滤器时，数据 x 会被 3 个哈希函数分别计算出 3 个哈希值，然后在对这 3 个哈希值对 8 取模，假设取模的结果为 1、4、6，然后把位图数组的第 1、4、6 位置的值设置为 1。<strong>当应用要查询数据 x 是否数据库时，通过布隆过滤器只要查到位图数组的第 1、4、6 位置的值是否全为 1，只要有一个为 0，就认为数据 x 不在数据库中</strong>。</p><p>布隆过滤器由于是基于哈希函数实现查找的，高效查找的同时<strong>存在哈希冲突的可能性</strong>，比如数据 x 和数据 y 可能都落在第 1、4、6 位置，而事实上，可能数据库中并不存在数据 y，存在误判的情况。</p><p>所以，<strong>查询布隆过滤器说数据存在，并不一定证明数据库中存在这个数据，但是查询到数据不存在，数据库中一定就不存在这个数据</strong>。</p></li></ul></li></ul><h3 id="采用布隆过滤器"><a href="#采用布隆过滤器" class="headerlink" title="采用布隆过滤器"></a>采用布隆过滤器</h3><p>​        我们采用布隆过滤器来完成.由于是在项目已经积累了一定数据的情况下进行布隆过滤器的添加，因此我们需要进行预热处理，把所要进行过滤业务的key全部从数据库遍历并缓存到布隆过滤器。对于其局限性：无法正确检测在运行过程中已经删除的数据，这没什么大事，毕竟数量相对较少，可以允许它打进数据库。</p><p>注册bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;bloomFilter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RBloomFilter&lt;String&gt; <span class="title function_">getFilter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">redisUrl</span> <span class="operator">=</span> String.format(<span class="string">&quot;redis://%s:%d&quot;</span>, redisHost, redisPort);</span><br><span class="line">    config.useSingleServer().setAddress(redisUrl)</span><br><span class="line">            .setDatabase(redisDatabase)</span><br><span class="line">            .setPassword(redisPassword);</span><br><span class="line">    <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">    RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;bloomFilter&quot;</span>);</span><br><span class="line">    bloomFilter.delete();</span><br><span class="line">    bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;bloomFilter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> bloomFilter;</span><br></pre></td></tr></table></figure><p>我们拿<code>Shop</code>来举例：</p><p>首先建立<code>BloomFilter</code>的预热机制：、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BloomFilterService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Redisson redissonClient;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopTypeMapper shopTypeMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setupBloomFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;bloomFilter&quot;</span>);</span><br><span class="line">        bloomFilter.tryInit(<span class="number">1000000L</span>, <span class="number">0.01</span>);  <span class="comment">// 初始化布隆过滤器，预计插入1000000元素，误判率为0.01</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkExists</span><span class="params">(String item)</span> &#123;</span><br><span class="line">        RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;bloomFilter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bloomFilter.contains(item);  <span class="comment">// 检查元素是否存在于布隆过滤器中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBloomFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        bloomFilter.delete();</span><br><span class="line">        log.debug(<span class="string">&quot;预热布隆过滤器&quot;</span>);</span><br><span class="line">        setupBloomFilter();</span><br><span class="line">        <span class="comment">// 添加商户数据</span></span><br><span class="line">        List&lt;Shop&gt; shopTypeIdList = shopMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Shop&gt;().select());</span><br><span class="line">        shopTypeIdList.forEach((i)-&gt;&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bs_key</span> <span class="operator">=</span> BLOOM_SHOP_KEY+i;</span><br><span class="line">            <span class="keyword">if</span>(!bloomFilter.contains(bs_key))&#123;</span><br><span class="line">                bloomFilter.add(bs_key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在需要添加shop的地方添加该key,由于该处并没有添加shop的接口故写伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">addShop</span><span class="params">(ShopType shopType)</span> &#123;</span><br><span class="line">    <span class="comment">// 在添加数据后，添加到布隆过滤器</span></span><br><span class="line">    bloomFilter.add(BLOOM_SHOP_KEY+shop.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在查询商户的接口添加布隆过滤器的校验，不存在则返回；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">// 布隆过滤</span></span><br><span class="line">      <span class="keyword">if</span>(!bloomFilter.contains(BLOOM_SHOP_KEY+id))&#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;商户不存在&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// other code...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h2><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，请求直接落到数据库上，引起数据库压力过大甚至宕机。</p><p>常用的解决方案有：    </p><ul><li><p>均匀过期</p><p>  设置不同的过期时间，让缓存失效的时间点尽量均匀。通常可以为有效期增加随机值或者统一规划有效期。</p></li></ul><h2 id="缓存击穿问题"><a href="#缓存击穿问题" class="headerlink" title="缓存击穿问题"></a>缓存击穿问题</h2><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>常用的解决方案有：    </p><ul><li><p>使用互斥锁</p><p>  <img src="https://pic.zjcspace.xyz/b/202405141445277.svg" alt="缓存击穿-互斥锁.drawio"></p><p>  &gt;<br>  &gt;</p><blockquote><p><strong>为什么不用java的Lock</strong>?</p><p>使用Java的 <code>Lock</code> 接口或其具体实现（如 <code>ReentrantLock</code>）确实是Java程序中常用的同步机制，用以控制多线程对共享资源的访问。然而，在涉及到分布式系统或者多个应用实例的环境中，Java的本地锁机制并不能直接使用，因为Java的锁仅限于同一个JVM内部的线程。这就是为什么在涉及到分布式缓存系统如Redis时，我们通常不使用Java的本地锁。</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Result <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX_RETRIES</span> <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">// 最大重试次数，防止无限重试</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">lock_key</span> <span class="operator">=</span> LOCK_SHOP_KEY+id;</span><br><span class="line">    <span class="comment">//在redis查找</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//存在直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未命中，获取互斥锁</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> attempt=<span class="number">0</span>;attempt&lt;MAX_RETRIES;attempt++)&#123;</span><br><span class="line">        <span class="comment">// 查询缓存</span></span><br><span class="line">        <span class="comment">//在redis查找</span></span><br><span class="line">        shopJson = stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//存在直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(shopJson!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> tryLock(lock_key);</span><br><span class="line">        <span class="comment">// 获取锁，执行数据库查询以及回写缓存</span></span><br><span class="line">        <span class="keyword">if</span> (lock)&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">              <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Result.fail(<span class="string">&quot;商户不存在&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 查询成功，回写缓存</span></span><br><span class="line">              stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">              <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              releaseLock(lock_key);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 未获取，等待重试</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                Thread.currentThread().interrupt();  <span class="comment">// 重新设置中断状态</span></span><br><span class="line">                log.debug(<span class="string">&quot;Interrupted during sleep on retry for lock: &quot;</span> + lock_key, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;服务器繁忙&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">1</span>, TimeUnit.MINUTES));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  自然语言描述：热点key失效，此时若干请求到来，发现缓存未命中，开始获取互斥锁，其中一个线程会获取到互斥锁后查询数据库并且回写缓存，成功后会释放锁，其他线程未获取锁，会一直尝试等待重试获取缓存，获取失败会尝试获取锁，超过尝试次数会返回失败信息。</p></li><li><p>逻辑过期</p><p>  流程图:|<br>  <img src="https://pic.zjcspace.xyz/b/202405141447274.svg" alt="缓存击穿_逻辑过期.drawio"></p></li></ul><p>亟待解决的问题：逻辑过期问题的编码：</p><p>我们可以给存储的数据添加一个字段值存储创建时间，取出时，根据当前时间判断是否过期，继而执行下面逻辑。</p><p>在以往的业务中，我们往往将诸如Shop这种实体类直接储存到redis中，这导致我们无法存贮时间这种字段，有三种方法：</p><ul><li><p>给Shop添加<code>expireTime</code>属性。</p><p>  这并不优雅，加入有上千个实体类，你都要添加吗，岂不是累死？并且降低了内聚性。</p></li><li><p>给Shop继承一个类，其带有<code>expireTime</code>属性。</p><p>  这并不优雅，我们还是需要硬编码原实体类。</p></li><li><p>专门封装一个<code>RedisData</code>类定义如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这是优雅的，我们可以在编写业务时，把实体类放入<code>RedisData.data</code>中。对实体类并没有侵入。</p></li></ul><p>​        完整实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Result <span class="title function_">queryWithLogicExpire</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 查询缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    RedisData&lt;Shop&gt; redisData = <span class="keyword">new</span> <span class="title class_">RedisData</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 查询成功</span></span><br><span class="line">    <span class="keyword">if</span>(shopJson!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 转换json-&gt;obj</span></span><br><span class="line">        redisData = JSONUtil.toBean(shopJson, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;RedisData&lt;Shop&gt;&gt;() &#123;</span><br><span class="line">        &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否过期</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 如果未过期则，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (now.isBefore(redisData.getExpireTime())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(redisData.getData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 如果过期,或者不存在</span></span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> tryLock(LOCK_SHOP_KEY + id);</span><br><span class="line">        <span class="comment">//获取锁成功</span></span><br><span class="line">        <span class="comment">// 新建线程,查询数据库</span></span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            EXECUTOR_SERVICE.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">                    <span class="comment">// 如果为空，释放锁返回</span></span><br><span class="line">                    <span class="keyword">if</span>(shop!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        saveData2Redis(shop,CACHE_SHOP_KEY+id, CACHE_SHOP_TTL);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 回写缓存</span></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    log.error(<span class="string">&quot;更新商户缓存出错id:&quot;</span>+id,e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    releaseLock(LOCK_SHOP_KEY+id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 返回旧数据</span></span><br><span class="line">            <span class="keyword">return</span> Result.ok(redisData.getData());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取锁失败</span></span><br><span class="line">        <span class="comment">// 非空直接返回旧数据</span></span><br><span class="line">    <span class="keyword">if</span>(redisData.getData()!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(redisData.getData());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;数据不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种策略的优缺点应用场景"><a href="#两种策略的优缺点应用场景" class="headerlink" title="两种策略的优缺点应用场景"></a>两种策略的优缺点应用场景</h3><div class="table-container"><table><thead><tr><th>策略类型</th><th>优点</th><th>缺点</th><th>应用场景</th></tr></thead><tbody><tr><td>互斥锁方法</td><td>强一致性；简单直接。</td><td>增加延迟；资源锁定；死锁风险。</td><td>对数据一致性要求高的场景，如金融交易；高频访问且更新不频繁的数据。</td></tr><tr><td>逻辑过期方法</td><td>降低延迟；后台更新；避免数据库压力。</td><td>数据一致性较低；实现复杂度较高。</td><td>对数据实时性要求不高，对响应时间有高要求的场景，如社交媒体内容。</td></tr></tbody></table></div><h1 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h1><h2 id="唯一id生成策略"><a href="#唯一id生成策略" class="headerlink" title="唯一id生成策略"></a>唯一id生成策略</h2><p>优惠券使用时，需要订单的参与，而订单的id的设计需要保证全局唯一。传统自增id具有以下缺点：</p><ul><li>隐私性差</li><li>不利于分库分表</li></ul><p>应满足以下特性：</p><ul><li>唯一性</li><li>高可用</li><li>高性能</li><li>安全性</li><li>递增性</li></ul><p>有很多<a href="https://pdai.tech/md/arch/arch-z-id.html#%E4%BD%BF%E7%94%A8redis%E5%AE%9E%E7%8E%B0">方法</a></p><p>经过权衡采用<code>时间戳+序列号</code>的形式,42位表示时间戳，21位数表示序列号，可以使用年数:</p><script type="math/tex; mode=display">year = (2^{42}-nowTimeStamp())/1000/3600/12/365</script><p>现在时间戳(2024.5.16)<code>1715852169165</code>代入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">maxTimestamp</span> <span class="operator">=</span> (<span class="type">long</span>) Math.pow(<span class="number">2</span>, <span class="number">42</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">currentTimestamp</span> <span class="operator">=</span> <span class="number">1715852169165L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">remainingTimestamp</span> <span class="operator">=</span> maxTimestamp - currentTimestamp;</span><br><span class="line"><span class="type">double</span> <span class="variable">millisecondsPerYear</span> <span class="operator">=</span> <span class="number">365.25</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">remainingYears</span> <span class="operator">=</span> remainingTimestamp / millisecondsPerYear;</span><br><span class="line">System.out.println(<span class="string">&quot;Remaining years: &quot;</span> + remainingYears);</span><br></pre></td></tr></table></figure><p>得:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remaining years: 84.99360984162294</span><br></pre></td></tr></table></figure><p>如果是<code>41bit</code>结果是15年：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remaining years: 15.310767814599336</span><br></pre></td></tr></table></figure><p>但是拼接时间戳的初衷是提高安全性，让用户无法猜出我们的流水等信息，因此我们可以对时间戳进行再处理，我们可以假定一个时间<code>t0</code>时间戳<code>timestamp=now()-t0</code>这样隐蔽性会大大增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdGenerator</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">// 2024.1.1:00:00:00</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Long</span>  <span class="variable">EPOCH</span> <span class="operator">=</span> <span class="number">1704067200L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>; <span class="comment">// Batch size for pre-fetching IDs</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">// 记录本地获取序列号。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">localSequence</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 记录本地获取序列号阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">localMaxSequence</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIMESTAMP_BITS</span> <span class="operator">=</span> <span class="number">36L</span>; <span class="comment">// 时间戳位数，可使用2178年，一秒生成134,217,728个id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SEQUENCE_BITS</span> <span class="operator">=</span> <span class="number">27L</span>; <span class="comment">// Bits for sequence number</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_SEQUENCE</span> <span class="operator">=</span> (<span class="number">1L</span> &lt;&lt; SEQUENCE_BITS) - <span class="number">1</span>; <span class="comment">// Max sequence number: 2^27 - 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RedisIdGenerator</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>  Long <span class="title function_">generatorId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now().getEpochSecond();</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> now - EPOCH;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时钟回拨</span></span><br><span class="line">        <span class="keyword">if</span>(timestamp&lt;lastTimestamp)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Clock moved backwards. Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得预分配id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> localSequence.incrementAndGet();</span><br><span class="line">        <span class="comment">// 是否超出预分配id最大值?</span></span><br><span class="line">        <span class="keyword">if</span>(seq&gt;localMaxSequence.get())&#123;</span><br><span class="line">            fetchBatchRedis(keyPrefix);</span><br><span class="line">            seq = localSequence.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录最近一次id</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">res</span> <span class="operator">=</span> (timestamp&lt;&lt;TIMESTAMP_BITS)|(seq&amp;MAX_SEQUENCE);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d--%d--%d\n&quot;</span>,timestamp,seq,res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (timestamp&lt;&lt;TIMESTAMP_BITS)|(seq&amp;MAX_SEQUENCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fetchBatchRedis</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取一定数量id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(keyPrefix, BATCH_SIZE);</span><br><span class="line">        <span class="keyword">if</span>(increment==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to fetch batch from Redis&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取批量id的第一个</span></span><br><span class="line">        localSequence.set(increment-BATCH_SIZE+<span class="number">1</span>);</span><br><span class="line">        localMaxSequence.set(increment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加优惠券"><a href="#添加优惠券" class="headerlink" title="添加优惠券"></a>添加优惠券</h3><p>关键点就是全局id：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取优惠券信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    System.out.println(seckillVoucher);</span><br><span class="line">    <span class="comment">// 判空</span></span><br><span class="line">    <span class="keyword">if</span>(seckillVoucher==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断时间是否合理</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> seckillVoucher.getBeginTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> seckillVoucher.getEndTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="keyword">if</span>(now.isBefore(beginTime))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动未开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(now.isAfter(endTime))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动已经结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 时间合理</span></span><br><span class="line">    <span class="comment">// 判断库存</span></span><br><span class="line">    <span class="keyword">if</span>(seckillVoucher.getStock()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存订单</span></span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 订单id</span></span><br><span class="line">    voucherOrder.setId(redisIdGenerator.generatorId(<span class="string">&quot;id:order&quot;</span>));</span><br><span class="line">    voucherOrder.setVoucherId(seckillVoucher.getVoucherId());</span><br><span class="line">    voucherOrder.setUserId(user.getId());</span><br><span class="line">    <span class="comment">// 保存订单</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucherOrder.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h2><p>想象一下以下场景：某一优惠券再某一时刻被数以千计的的用户抢购，此时往往会出现销售数量&gt;库存数量，也就是超卖现象。主要原因是在并发场景下，请求几乎同时到达，对库存资源进行竞争，由于没有适当的并发控制策略导致的错误。</p><p>解决方案有以下几种：</p><ul><li><p>悲观锁</p><p>  <strong>什么是悲观锁？</strong></p><p>  悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>。</p><p>  高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。并且，悲观锁还可能会存在死锁问题，影响代码的正常运行。</p></li></ul><ul><li><p>乐观锁</p><p>  <strong>什么是乐观锁？</strong></p><p>  乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）。</p><p>  高并发的场景下，乐观锁相比悲观锁来说，不存在锁竞争造成线程阻塞，也不会有死锁的问题，在性能上往往会更胜一筹。但是，如果冲突频繁发生（写占比非常多的情况），会频繁失败和重试，这样同样会非常影响性能，导致 CPU 飙升。</p><p>  实现方法:</p><ul><li><p>版本号机制</p><p>  一般是在数据表中加上一个数据版本号 <code>version</code> 字段，表示数据被修改的次数。当数据被修改时，<code>version</code> 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 <code>version</code> 值，在提交更新时，若刚才读取到的 </p></li><li><p>CAS 算法</p><p>CAS 的全称是 <strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。</p><blockquote><p><strong>原子操作</strong> 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。</p></blockquote><p>CAS 涉及到三个操作数：</p></li><li><p><strong>V</strong>：要更新的变量值(Var)</p></li><li><strong>E</strong>：预期值(Expected)</li><li><p><strong>N</strong>：拟写入的新值(New)</p><p>当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。<br>  对于优惠券来说库存(stock)是一个天然的version，因此我们可以不用额外添加的字段来判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取优惠券信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    System.out.println(seckillVoucher);</span><br><span class="line">    <span class="comment">// 判空</span></span><br><span class="line">    <span class="keyword">if</span>(seckillVoucher==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断时间是否合理</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> seckillVoucher.getBeginTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> seckillVoucher.getEndTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="keyword">if</span>(now.isBefore(beginTime))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动未开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(now.isAfter(endTime))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动已经结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 时间合理</span></span><br><span class="line">    <span class="comment">// 判断库存</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> seckillVoucher.getStock();</span><br><span class="line">    <span class="keyword">if</span>(stock&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存订单</span></span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 订单id</span></span><br><span class="line">    voucherOrder.setId(redisIdGenerator.generatorId(<span class="string">&quot;id:order&quot;</span>));</span><br><span class="line">    voucherOrder.setVoucherId(seckillVoucher.getVoucherId());</span><br><span class="line">    voucherOrder.setUserId(user.getId());</span><br><span class="line">    <span class="comment">// 减少库存</span></span><br><span class="line">    <span class="comment">// 乐观锁，判断预期，是否合理</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;stock&quot;</span>, stock).eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId()).update();</span><br><span class="line">    <span class="keyword">if</span>(!succ)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;服务器繁忙，请重试...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存订单</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucherOrder.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用stock来检测在查询库存和更新库存期间，有无其他线程修改库存，通过在更新库存时判断stock和查询stock时的数值是否一致，达到version的方法实现乐观锁。</p><p>使用jemeter压测10000请求抢夺10000库存结果如下:</p><p><img src="https://pic.zjcspace.xyz/b/202405182118154.png" alt="image-20240518211804980"></p><p>可以发现异常率高达<code>92.93%</code>，库存预期为<code>0</code>，实际为<code>9293</code>。这样出错率太高了。有没有什么办法补救。</p><p>我们分析以下10000线程请求的时候发生了什么，</p><p>1.各个线程查询了库存，判断库存是否足够。。</p><p>2.更新库存。</p><p>在1和2之间数据库中的库存可能被其他线程已经修改。由于线程越多，几率越大，而修改必然导致会导致update失败从而导致抢购失败。</p><p>解决方法就是细化锁，放宽条件，我们把</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">        .eq(<span class="string">&quot;stock&quot;</span>, stock).eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId()).update();</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">        .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId()).update();</span><br></pre></td></tr></table></figure><p>以前是库存不等即加锁，现在是库存&lt;=0才加锁。再次测试：<br><img src="https://pic.zjcspace.xyz/b/202405191418853.png" alt="image-20240519141842953"></p><p>错误率大大降低，但是为什么还是有错误？想象以下场景，假设此时库存为1，许多线程查询库存为1于是开始更新操作，在此更新期间已经有某一线程，成功完成了所有操作，把库存改为0，于是这些线程就失败了。。可以分析，此方案出错往往发生在库存告急之时，而上一个方案，错误随时发生。这确实不错🥰。</p></li></ul></li></ul><h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><p>在优惠券的抢购过程中，我们总是希望每一个用户只能使用一次，而不是订购多次，因此我们要求每一个用户对于每个优惠券只能生成一个订单。如何实现呢?</p><p>一个自然的想法是，在每次创建订单时，判断本次创建的<code>user_id</code>和<code>voucher_id</code>是否存在于订单表中，如果存在则提示错误，不存在才允许创建。这会带来数据库压力骤增，其次是，这真的可以保证一人一单吗？</p><p>使用此方法伪代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">other code...</span><br><span class="line"><span class="comment">// 判断是否已经订购</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exist</span> <span class="operator">=</span> queryUserIdAndVoucherIdExists(userId,voucherId);</span><br><span class="line"><span class="keyword">if</span>(exist==<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">subStock(voucherId);</span><br><span class="line">addOrder(userId,voucherId)；</span><br><span class="line">other code...</span><br></pre></td></tr></table></figure><p>可以发现当多个同一用户的线程同时执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">exist</span> <span class="operator">=</span> queryUserIdAndVoucherIdExists(userId,voucherId);</span><br></pre></td></tr></table></figure><p>时，因为数据库对读操作并没有加锁。因此多个线程同时读到相同的结果，然后他们都进行了创建订单的操作，此次就会造成一人多单的局面。如何做呢?</p><ul><li><p>迭代1：给整个方法加锁</p><p>  这种方案可以解决一人一单问题，但是性能太低，不同用户本不需要进行锁的争夺，这导致了请求的串行化，性能大大降低。</p></li><li><p>迭代2：锁住userId这个字符串</p><p>  针对迭代1中的串行化问题，我们可以更改锁对象为可以标识用户的对象，userId就是很好的标识，我们可以锁住<code>userId.toString().intern()</code>。这样当不同用户的线程执行时，此锁对他们透明，而相同用户的线程执行时，他们会竞争锁，串行执行。</p></li><li><p>迭代3:减少锁的临界区范围：</p><p>  临界区太大会导致更多的代码串行化，我们能否进行临界区的缩减以达到最优的性能。</p><p>  目前的代码长这样:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (UserHolder.getUser().getId().toString().intern()) &#123;</span><br><span class="line">        <span class="comment">// 获取优惠券信息</span></span><br><span class="line">        <span class="comment">// 判空</span></span><br><span class="line">        <span class="comment">// 判断时间是否合理</span></span><br><span class="line">        <span class="comment">// 时间合理</span></span><br><span class="line">        <span class="comment">// 判断库存</span></span><br><span class="line">        <span class="comment">// 保存订单</span></span><br><span class="line">        <span class="comment">// 获取用户id</span></span><br><span class="line">        <span class="comment">// 确保一人一单</span></span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        <span class="comment">// 订单id</span></span><br><span class="line">        <span class="comment">// 减少库存</span></span><br><span class="line">        <span class="comment">// 乐观锁，判断预期，是否合理</span></span><br><span class="line">        <span class="comment">// 保存订单</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(voucherOrder.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  出现并发安全的地方在确保一人一单的逻辑，在这之前不必加锁，因为这并不涉及共享资源的修改或者即使修改也有后面的乐观锁处理，在”确保一人一单”后面的逻辑需要加锁，因为如果不加锁，由于时间片分配不均，垃圾回收等一些情况导致其他同一用户线程同时来进行订单的添加(此时的代码不是临界区，存在并发风险)，就会导致一人多单问题。因此最终的方案就是：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">orderVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 获取优惠券信息</span></span><br><span class="line">        <span class="comment">// 判空</span></span><br><span class="line">        <span class="comment">// 判断时间是否合理</span></span><br><span class="line">        <span class="comment">// 时间合理</span></span><br><span class="line">        <span class="comment">// 判断库存</span></span><br><span class="line">        <span class="comment">// 保存订单</span></span><br><span class="line">        <span class="comment">// 获取用户id</span></span><br><span class="line">        <span class="keyword">synchronized</span> (UserHolder.getUser().getId().toString().intern()) &#123;</span><br><span class="line">           <span class="comment">// 确保一人一单</span></span><br><span class="line">           <span class="comment">// 创建订单</span></span><br><span class="line">           <span class="comment">// 订单id</span></span><br><span class="line">           <span class="comment">// 减少库存</span></span><br><span class="line">           <span class="comment">// 乐观锁，判断预期，是否合理</span></span><br><span class="line">           <span class="comment">// 保存订单</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(voucherOrder.getId());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代4:事务失效</p><p>  <code>@Transactional</code>注解整个方法运行完才会进行事务的提交，因此锁会先于事务提交释放，如果此间有其他线程运行到一人一单逻辑，仍然会查询到事务提交前的结果。解决办法是，抽出方法，在调用方外围添加锁。如下。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取优惠券信息</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        System.out.println(seckillVoucher);</span><br><span class="line">        <span class="comment">// 判空</span></span><br><span class="line">        <span class="keyword">if</span> (seckillVoucher == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断时间是否合理</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> seckillVoucher.getBeginTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> seckillVoucher.getEndTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (now.isBefore(beginTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动未开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (now.isAfter(endTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动已经结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 时间合理</span></span><br><span class="line">        <span class="comment">// 判断库存</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> seckillVoucher.getStock();</span><br><span class="line">        <span class="keyword">if</span> (stock &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存订单</span></span><br><span class="line">        <span class="keyword">synchronized</span> (UserHolder.getUser().getId().toString().intern()) &#123;</span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) context.getBean(IVoucherOrderService.class);</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(seckillVoucher);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(SeckillVoucher seckillVoucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保一人一单</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId())</span><br><span class="line">            .eq(<span class="string">&quot;user_id&quot;</span>, user.getId()).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;请勿重复购买&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 订单id</span></span><br><span class="line">    voucherOrder.setId(redisIdGenerator.generatorId(<span class="string">&quot;id:order&quot;</span>));</span><br><span class="line">    voucherOrder.setVoucherId(seckillVoucher.getVoucherId());</span><br><span class="line">    voucherOrder.setUserId(user.getId());</span><br><span class="line">    <span class="comment">// 减少库存</span></span><br><span class="line">    <span class="comment">// 乐观锁，判断预期，是否合理</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId()).update();</span><br><span class="line">    <span class="keyword">if</span> (!succ) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;服务器繁忙，请重试...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存订单</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucherOrder.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集群模式下的并发控制"><a href="#集群模式下的并发控制" class="headerlink" title="集群模式下的并发控制"></a>集群模式下的并发控制</h3><p>通过使用本地锁（如<code>synchronized</code>关键字或<code>ReentrantLock</code>类），可以有效地解决单个应用程序实例下的多线程并发问题。这种锁机制是基于JVM的监视器（Monitor）模式，其作用范围限定在单个JVM实例中。然而，在集群环境下，应用可能被部署在多个服务器上，此时相同用户的并发请求可能被分配到不同的服务器实例上处理。在这种情况下，单个JVM内的锁无法跨服务器实例进行线程同步和并发控制。</p></li></ul><p>因此，为了保证在分布式系统中的数据一致性和线程安全，我们需要采用分布式锁。分布式锁不受单个JVM的限制，它能够跨多个服务器实例协调和管理访问共享资源的线程。这样的锁通常依赖于网络资源或持久化存储（如Redis、Zookeeper等），提供一种机制以确保不同服务器实例上的操作能够在并发环境下安全执行。使用分布式锁是解决多服务器部署下并发控制问题的关键技术策略。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>采用redis来进行分布式锁的构建。较为普遍的方案是采用redis中的SETNX命令来实现。<br>其命名格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX key value</span><br></pre></td></tr></table></figure><br>为了因服务器宕机等因素造成的死锁，还应设计每个key的TTL，设置key和设置ttl应该作为一个事务，具有原子性。<br>根据此构建锁:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">RedisLock</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name, Long ttlSec)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(PREFIX+name, <span class="string">&quot;1&quot;</span>, ttlSec, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">        stringRedisTemplate.delete(PREFIX+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="进一步迭代"><a href="#进一步迭代" class="headerlink" title="进一步迭代"></a>进一步迭代</h4><p>即便采用上述方案，仍然存在潜在的并发问题。设想这样一种情况：线程A成功获取了锁并开始执行业务逻辑。在它释放锁之前，JVM启动了全面垃圾收集（Full GC）。这个过程中，如果锁的有效期间意外过期并被自动释放，此时线程B检测到锁已释放，随即获取锁并开始业务处理。若此时线程A所在的JVM完成Full GC并恢复执行，它会尝试释放已经被线程B占有的锁。这会导致线程A错误地删除了线程B当前持有的锁。假设随后线程C也来获取并持有了锁，这将导致线程B和C并发执行，从而增加了数据一致性风险和系统的不稳定性。<br>应该怎么做呢？<br>当前的分布式锁方案是使用setnx命令，使用业务名作为key来唯一确定每一个jvm中做相同业务的线程，为避免误删锁，我们可以在删除锁时判断当前锁是否还是原来的锁，我们可以利用value来做文章，使用value来存储，创建该锁的线程的唯一标识。可以使用[[source/_posts/java/浅析几种唯一id生成算法#UUID|uuid]]+thread_id的办法:来唯一标识线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">RedisLock</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UUID_PART</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name, Long ttlSec)</span> &#123;</span><br><span class="line">        <span class="comment">// 拼接key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> KEY_PREFIX+name;</span><br><span class="line">        <span class="comment">// 拼接val</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> UUID_PART+Thread.currentThread().getId();</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX+name,id,</span><br><span class="line">                ttlSec, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 拼接key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> KEY_PREFIX+name;</span><br><span class="line">        <span class="keyword">if</span>(!Objects.equals(stringRedisTemplate.opsForValue().get(key), UUID_PART + Thread.currentThread().getId()))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里有一些细节:UUID使用<code>static</code>来修饰，这保证了同一jvm内的UUID相同，不同jvm的uuid不同，具体jvm由threadid来区分。</p><h4 id="进两步迭代"><a href="#进两步迭代" class="headerlink" title="进两步迭代"></a>进两步迭代</h4><p>事情到此好像已经完美了，实际上仍然存在问题。设想以下场景，线程a获取了锁，完整了执行了业务，释放锁时，也正确判断了该锁为自己的锁，正当它执行删除锁的操作时，jvm又进行了fullGC,以至于锁过期，此时来自其他jvm的线程b到来，获取到了锁，在线程b执行业务过程中，线程a停止阻塞，继续执行删除锁的操作，此时又会发生误删除b线程的锁，此时线程c到来获得了锁，bc线程又产生了并发风险。。。<br>其问题在于判断与删除的原子性问题，这两种操作应该是原子的要不一起执行，要么都不执行。保证两者的原子性最常见的方法就是使用Lua脚本来封装这两个操作。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当前key  </span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]  </span><br><span class="line"><span class="comment">-- 当前传入线程标识id  </span></span><br><span class="line"><span class="keyword">local</span> val = AVGS[<span class="number">1</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 锁的实际id  </span></span><br><span class="line"><span class="keyword">local</span> ac_id = redis.call(<span class="string">&quot;get&quot;</span>,key)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(val==ac_id) <span class="keyword">then</span>  </span><br><span class="line">redis.call(<span class="string">&quot;del&quot;</span>,key)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p> 调用:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; REDIS_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        REDIS_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        REDIS_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 拼接key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> KEY_PREFIX+name;</span><br><span class="line">        stringRedisTemplate.execute(REDIS_SCRIPT, List.of(key), UUID_PART+Thread.currentThread().getId());</span><br><span class="line"><span class="comment">//        if(!Objects.equals(stringRedisTemplate.opsForValue().get(key), UUID_PART + Thread.currentThread().getId()))&#123;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        stringRedisTemplate.delete(key);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="进三步迭代"><a href="#进三步迭代" class="headerlink" title="进三步迭代"></a>进三步迭代</h3><p>即使如此，当前的分布式锁还存在一系列问题：</p><ul><li><strong>不可重入</strong>:同一线程无法获取同一把锁。</li><li><strong>不可重试</strong>：获取锁只尝试一次，没有重试机制，失败率高。</li><li><strong>超时释放</strong>：超市释放机机制虽然一定程度避免了死锁发生的概率，但是如果业务执行耗时过长，期间锁就释放了，这样存在安全隐患。锁的有效期过短，容易出现业务没执行完就被释放，锁的有效期过长，容易出现死锁，所以这是一个大难题！</li></ul><p>想要手搓十分繁琐，故需要站在前人肩膀，只需要了解其思想即可。<br>使用Redission的lock。</p><h2 id="使用Redission实现分布式锁"><a href="#使用Redission实现分布式锁" class="headerlink" title="使用Redission实现分布式锁"></a>使用Redission实现分布式锁</h2><ul><li>基于SETNX实现的分布式锁存在以下问题<ol><li><strong>重入问题</strong><ul><li>重入问题是指获取锁的线程，可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，例如在HashTable这样的代码中，它的方法都是使用synchronized修饰的，加入它在一个方法内调用另一个方法，如果此时是不可重入的，那就死锁了。所以可重入锁的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的</li></ul></li><li><strong>不可重试</strong><ul><li>我们编写的分布式锁只能尝试一次，失败了就返回false，没有重试机制。但合理的情况应该是：当线程获取锁失败后，他应该能再次尝试获取锁</li></ul></li><li><strong>超时释放</strong><ul><li>我们在加锁的时候增加了TTL，这样我们可以防止死锁，但是如果卡顿(阻塞)时间太长，也会导致锁的释放。虽然我们采用Lua脚本来防止删锁的时候，误删别人的锁，但现在的新问题是没锁住，也有安全隐患</li></ul></li><li><strong>主从一致性</strong><ul><li>如果Redis提供了主从集群，那么当我们向集群写数据时，主机需要异步的将数据同步给从机，万一在同步之前，主机宕机了(主从同步存在延迟，虽然时间很短，但还是发生了)，那么又会出现死锁问题</li></ul></li></ol></li><li>那么什么是Redisson呢<ul><li>Redisson是一个在Redis的基础上实现的Java驻内存数据网格(In-Memory Data Grid)。它不仅提供了一系列的分布式Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现</li></ul></li><li>Redis提供了分布式锁的多种多样功能<ol><li>可重入锁(Reentrant Lock)</li><li>公平锁(Fair Lock)</li><li>联锁(MultiLock)</li><li>红锁(RedLock)</li><li>读写锁(ReadWriteLock)</li><li>信号量(Semaphore)</li><li>可过期性信号量(PermitExpirableSemaphore)</li><li>闭锁(CountDownLatch)<br>使用它来替换我们之前的锁:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">orderVoucher</span><span class="params">(Long voucherId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取优惠券信息</span></span><br><span class="line">            <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">            System.out.println(seckillVoucher);</span><br><span class="line">            <span class="comment">// 判空</span></span><br><span class="line">            <span class="keyword">if</span> (seckillVoucher == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断时间是否合理</span></span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> seckillVoucher.getBeginTime();</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> seckillVoucher.getEndTime();</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">            <span class="keyword">if</span> (now.isBefore(beginTime)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动未开始&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now.isAfter(endTime)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;该优惠券活动已经结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 时间合理</span></span><br><span class="line">            <span class="comment">// 判断库存</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> seckillVoucher.getStock();</span><br><span class="line">            <span class="keyword">if</span> (stock &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">lock_name</span> <span class="operator">=</span> <span class="string">&quot;voucherOrder:&quot;</span> + UserHolder.getUser().getId().toString().intern();</span><br><span class="line">            <span class="comment">// 保存订单</span></span><br><span class="line"><span class="comment">//            RedisLock redisLock = new SimpleRedisLock();</span></span><br><span class="line">        RLock redisLock= redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + lock_name);</span><br><span class="line"><span class="comment">//        boolean lock = redisLock.tryLock(stringRedisTemplate, lock_name, 5L);</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisLock.tryLock(<span class="number">2</span>, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">if</span>(!lock)&#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;请勿重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) context.getBean(IVoucherOrderService.class);</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(seckillVoucher);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisLock.unlock();</span><br><span class="line"><span class="comment">//          redisLock.release(stringRedisTemplate,lock_name);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            synchronized (lock) &#123;</span></span><br><span class="line"><span class="comment">//                IVoucherOrderService proxy = (IVoucherOrderService) context.getBean(IVoucherOrderService.class);</span></span><br><span class="line"><span class="comment">//                return proxy.createVoucherOrder(seckillVoucher);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(SeckillVoucher seckillVoucher)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户id</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保一人一单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId())</span><br><span class="line">                .eq(<span class="string">&quot;user_id&quot;</span>, user.getId()).count();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;请勿重复购买&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 订单id</span></span><br><span class="line">        voucherOrder.setId(redisIdGenerator.generatorId(<span class="string">&quot;id:order&quot;</span>));</span><br><span class="line">        voucherOrder.setVoucherId(seckillVoucher.getVoucherId());</span><br><span class="line">        voucherOrder.setUserId(user.getId());</span><br><span class="line">        <span class="comment">// 减少库存</span></span><br><span class="line">        <span class="comment">// 乐观锁，判断预期，是否合理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, seckillVoucher.getVoucherId()).update();</span><br><span class="line">        <span class="keyword">if</span> (!succ) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;服务器繁忙，请重试...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存订单</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(voucherOrder.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>Q：<code>IVoucherOrderService proxy = (IVoucherOrderService) context.getBean(IVoucherOrderService.class);</code>是什么鬼?<br>A:<br>在Spring框架中，当一个类的方法被<code>@Transactional</code>注解修饰后，Spring会为该类创建一个代理（Proxy），这样在调用这些被注解方法时，Spring可以自动地处理事务的开始和结束等操作。这个过程是通过AOP（面向切面编程）来实现的。</li></ol></li></ul><p>在你的代码示例中，<code>createVoucherOrder</code>方法被<code>@Transactional</code>注解修饰，意味着这个方法在执行时，Spring将通过代理来控制事务。这就带来了一个特别的问题：在同一个类的内部调用被<code>@Transactional</code>注解的方法时，这种代理是不会起作用的。因为内部方法调用直接通过<code>this</code>引用发生，它不会经过Spring的代理，这就意味着事务的处理（例如新建事务或者加入现有事务）不会被自动处理。</p><p>为了解决这个问题，可以通过从Spring上下文（ApplicationContext）中显式获取该类的代理对象，然后通过这个代理对象来调用方法。这样，所有的事务管理逻辑，由Spring通过代理自动处理，都将正常工作。</p><p>所以在你的代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) context.getBean(IVoucherOrderService.class);</span><br><span class="line"><span class="keyword">return</span> proxy.createVoucherOrder(seckillVoucher);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>这段代码确保<code>createVoucherOrder</code>方法是通过它的代理对象调用的，从而确保<code>@Transactional</code>注解的事务处理逻辑被正确触发。这种做法主要用在需要确保事务处理正确进行的场景，特别是当你在一个事务方法中调用同一个类中的另一个事务方法时。</p><h3 id="可重入实现原理"><a href="#可重入实现原理" class="headerlink" title="可重入实现原理"></a>可重入实现原理</h3><p>在探求Redisson的可重入原理之前，我们不妨看一下jdk中<code>java.util.concurrent.locks</code>的ReentrantLock是如何实现可重入的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="built_in">this</span>.getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getExclusiveOwnerThread() == current) &#123;</span><br><span class="line">        ++c;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setState(c);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到其使用了<code>private volatile int state;</code>这个变量来维护锁的状态，当同一线程每次获取同一把锁，state就会+1，释放锁就会-1。当state=0时，代表该锁没有线程持有。</p><p>在回到Redisson我们发现其也是使用了相似的原理：</p><ul><li>在分布式锁中，它采用hash结构来存储锁，其中外层key表示这把锁是否存在，内层filed则记录当前这把锁被哪个线程持有，value则代表该filed线程锁获取该锁的次数，当value=0时，表示没有线程，可以把锁删除。<br>大致流程如下：<br><img src="https://pic.zjcspace.xyz/b/202406082029452.png" alt=""></li></ul><h3 id="可重试"><a href="#可重试" class="headerlink" title="可重试"></a>可重试</h3><p><img src="https://pic.zjcspace.xyz/b/202407010842621.png" alt=""></p><h3 id="超时释放"><a href="#超时释放" class="headerlink" title="超时释放"></a>超时释放</h3><p>利用<code>watchDog</code>，每隔一段时间（releaseTime / 3），重置超时时间。</p><h3 id="主从一致性"><a href="#主从一致性" class="headerlink" title="主从一致性"></a>主从一致性</h3><p>利用Redisson的<code>multiLock</code>，多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功</p><p>在经典的主从模型中，负责写操作的是主节点，读操作是从节点。主从一致需要时间，因此可能引发下列问题：</p><ul><li>某个应用请求尝试获取锁（向主节点发起写操作），并成功，此时主节点拥有该应用请求的锁。</li><li>主节点向从节点同步数据，此时主节点宕机，没有同步到从节点，与客户端连接断开。</li><li>哨兵检测到异常，主节点切换为另一个从节点。此时该应用执行业务。在此期间其他请求尝试获取锁，并成功。同样执行业务，导致了并发问题。<br>解决该问题的方案是把每一个从节点都视作从节点，应用获取锁需要同时向所有节点获取锁。都获取成功才能成功获取锁。</li></ul><h2 id="秒杀的优化"><a href="#秒杀的优化" class="headerlink" title="秒杀的优化"></a>秒杀的优化</h2><p>目前的架构是这样的：</p><p><img src="https://pic.zjcspace.xyz/b/202407011044594.png" alt=""></p><p>我们可以发现其中大量模块进行了数据库的查找,我们可以把需要查询和修改的数据写到redis中,并使用Lua脚本做业务逻辑实现，而且他能确保原子性。</p><p><img src="https://pic.zjcspace.xyz/b/202407011424370.png" alt=""></p><p>Lua脚本返回状态码来判断是否成功，主线程据此执行相应异步操作。<br>![[source/_posts/java/Pasted image 20240701143026.png]]<br>Lua脚本如下：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 优惠券id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- userId</span></span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;secKillVoucher:stock:&#x27;</span>..voucherId</span><br><span class="line"><span class="comment">-- 判断是否过期：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)==<span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断库存是否充足</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey))&lt;=<span class="number">0</span> )<span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断用户是否下过单</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;secKillVoucher:order:&#x27;</span>..voucherId</span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId)==<span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 扣减库存</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>,stockKey,<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加用户</span></span><br><span class="line">redis.call(<span class="string">&quot;sadd&quot;</span>,orderKey,userId)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">sudo yum install docker-ce<span class="number">-3</span>:<span class="number">24.0</span><span class="number">.0</span><span class="number">-1.</span>el8   docker-ce-cli<span class="number">-3</span>:<span class="number">24.0</span><span class="number">.0</span><span class="number">-1.</span>el8  containerd.<span class="built_in">io</span> docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></p><h3 id="使用消息队列"><a href="#使用消息队列" class="headerlink" title="使用消息队列"></a>使用消息队列</h3><p>使用rabbitMQ来进行异步消息的处理，涉及生产者确认和消费者确认：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderListener</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> VoucherOrderServiceImpl voucherOrderService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span> (bindings = <span class="meta">@QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;order.queue&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;order.direct&quot;,type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;</span></span><br><span class="line"><span class="meta">                    &quot;voucherOrder&quot;,</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(VoucherOrder voucherOrder)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;正在处理&#123;&#125;&quot;</span>,voucherOrder);</span><br><span class="line">        voucherOrderService.createVoucherOrder(voucherOrder);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;处理成功&quot;</span>,voucherOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者异常==RabbitConfig</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;生产者消息发送失败:消息:&#123;&#125;,状态码:&#123;&#125;,原因:&#123;&#125;,交换机:&#123;&#125;,消息:&#123;&#125;&quot;</span>,message,replyCode,replyText,exchange,routingKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="发布blog功能"><a href="#发布blog功能" class="headerlink" title="发布blog功能"></a>发布blog功能</h2><p>上传图片</p><h1 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h1><ul><li>使用redis set结构存储每个shop 的Liked_user.</li><li><del>点赞数就是set的size</del>点赞数从数据库中查找，未来可以点赞数是set_size,然后消息队列异步处理数据库操作。</li><li>当前用户是否点赞就是judge这个set有没有当前用户id.</li><li>在相关需要展示点赞的接口添加该逻辑。<h1 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h1></li><li>使用可排序可去重的sortset.</li><li>需要修改之前的set逻辑，来适配</li><li>从redis获得的数据是有序的，但执行sql后查询的结果因为有in，所以是无序的，需要特殊处理。<h1 id="关注"><a href="#关注" class="headerlink" title="关注"></a>关注</h1></li><li>关注同时回写redis</li><li>共同关注取两者交集 </li></ul><h1 id="feed"><a href="#feed" class="headerlink" title="feed"></a>feed</h1><p><img src="https://pic.zjcspace.xyz/b/202407032009339.png" alt=""><br>使用推模式，把redis的sortedlist做收件箱，根据score=timestamp来排序。滚动查询，标记查询的lastId；<br>key max min limit offset count</p><div class="table-container"><table><thead><tr><th>key</th><th>max</th><th>min</th><th>offset</th><th>count</th><th></th></tr></thead><tbody><tr><td>set的key</td><td>lastId，前端传来</td><td>0</td><td>上一次的minScore.num</td><td>返回数量，随意</td></tr></tbody></table></div><h1 id="附近商户"><a href="#附近商户" class="headerlink" title="附近商户"></a>附近商户</h1><p>需要redis的geo，因此需要把商铺数据导入到redis中，当前架构需要：</p><ul><li>添加商铺时，应该同时回写redis</li><li>把已经添加的商铺数据使用脚本redis.<br>redis的geo key<code>geo:shoptype:</code><h2 id="返回按geo排序"><a href="#返回按geo排序" class="headerlink" title="返回按geo排序"></a>返回按geo排序</h2></li><li>判断是否geo</li><li>取出shopType的所有shop,并根据距离升序</li><li>遍历获得ids和distanceMap</li><li>按照ids截取偏移量且遍历取得shop_list</li><li>把每个shop_list注入distance根据distanceMap.</li></ul><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><h1 id="单节点reids存在的问题："><a href="#单节点reids存在的问题：" class="headerlink" title="单节点reids存在的问题："></a>单节点reids存在的问题：</h1><p><img src="https://pic.zjcspace.xyz/b/202407141056951.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141058416.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141106530.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141111622.png" alt=""><br>RDB方式bgsave的基本流程：</p><ul><li>首先子进程会fork一个主数据的页表，每个页表项的指针指向单个数据。</li><li>在子进程生成RDB快照的过程中，主进程可能会继续处理写操作。由于采用了Copy-On-Write机制，写操作会导致被修改的内存页复制，因此主进程和子进程各自维护独立的数据副本，保证子进程快照的一致性。<br>缺点：</li><li><strong>性能开销</strong>：<code>fork()</code>操作会复制当前内存页表，子进程在写快照时会占用额外的内存。</li><li><strong>数据丢失风险</strong>：由于RDB是基于时间点的快照，可能会丢失快照生成后到下次生成前这段时间内的数据。<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><img src="https://pic.zjcspace.xyz/b/202407141125217.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141126016.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141131919.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141135521.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141135891.png" alt=""><h1 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h1><img src="https://pic.zjcspace.xyz/b/202407141202047.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141205120.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141211965.png" alt=""></li><li>优化：<br><img src="https://pic.zjcspace.xyz/b/202407141220597.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141220877.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141248718.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141527566.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141534053.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407141607055.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407142149208.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407142204774.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407142212501.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407142219513.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407142220119.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407142232238.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150926218.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150932803.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150932134.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150934996.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150938752.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150941054.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407150942091.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151001391.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151003575.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151011996.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151016891.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151016507.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151033810.png" alt=""></li></ul><p><img src="https://pic.zjcspace.xyz/b/202407151033528.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151048730.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151050395.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151059768.png" alt=""><img src="https://pic.zjcspace.xyz/b/202407151100811.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151104492.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151106549.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151117566.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151127208.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151134195.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151141785.png" alt=""><br><img src="https://pic.zjcspace.xyz/b/202407151145232.png" alt=""></p></div>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/post/14085/"/>
      <url>/post/14085/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是一种 Java 编程语言的特性，它允许在运行时检查类、获取类的信息（如字段、方法、构造函数等），并且可以在运行时动态地创建对象、调用方法和访问属性等。换句话说，反射使得程序能够在运行时检查和操作对象的类和实例。</p><p>Java 反射的核心是 <code>java.lang.reflect</code> 包，它提供了一组类和接口，用于在运行时检查和操作类的信息。主要的类和接口包括：</p><ul><li><code>Class</code> 类：表示类的运行时类型信息，它包含了类的字段、方法、构造函数等信息。</li><li><code>Field</code> 类：表示类的字段，可以用于获取和设置字段的值。</li><li><code>Method</code> 类：表示类的方法，可以用于调用类的方法。</li><li><code>Constructor</code> 类：表示类的构造函数，可以用于创建类的实例。</li></ul><p>通过这些类和接口，可以在运行时动态地获取和操作类的信息，例如：</p><ul><li>获取类的字段、方法、构造函数等信息。</li><li>动态地创建类的实例。</li><li>调用类的方法。</li><li>获取和设置类的字段的值。</li></ul><p>反射通常用于一些需要在编译时无法确定类的情况下，或者需要动态地加载类、调用方法的情况下。例如，当你编写一个通用的框架或库时，无法预先知道客户端会使用哪些类，这时可以使用反射来动态地加载类和调用方法。另外，一些 Java 框架和库（如 Spring、Hibernate）也大量使用了反射来实现各种功能。</p><hr><h5 id="编译时无法确定类，运行时才能确定，我无法理解，举个例子。"><a href="#编译时无法确定类，运行时才能确定，我无法理解，举个例子。" class="headerlink" title="编译时无法确定类，运行时才能确定，我无法理解，举个例子。"></a>编译时无法确定类，运行时才能确定，我无法理解，举个例子。</h5><p>理解起来可能需要考虑一些稍微复杂的情况。让我们通过一个简单的例子来说明：</p><p>假设你正在编写一个简单的插件系统，你希望能够在运行时加载不同的插件，并且调用这些插件提供的方法。但是，你在编写主程序时并不知道具体有哪些插件会被加载。</p><p>现在，让我们来看一下这个例子的实现：</p><ol><li><strong>主程序：</strong> 主程序是一个简单的 Java 应用程序，它负责加载插件并调用它们的方法。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">javaCopy codepublic class MainProgram &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 在运行时加载插件</span><br><span class="line">        Plugin plugin = loadPlugin(&quot;Plugin1&quot;);</span><br><span class="line"></span><br><span class="line">        // 调用插件的方法</span><br><span class="line">        plugin.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Plugin loadPlugin(String pluginName) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 根据插件名加载相应的类</span><br><span class="line">            Class&lt;?&gt; pluginClass = Class.forName(pluginName);</span><br><span class="line">            </span><br><span class="line">            // 使用反射创建插件类的实例</span><br><span class="line">            Plugin plugin = (Plugin) pluginClass.newInstance();</span><br><span class="line"></span><br><span class="line">            return plugin;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>插件接口和实现：</strong> 插件接口定义了插件的行为，而插件实现则提供了具体的功能。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javaCopy codepublic interface Plugin &#123;</span><br><span class="line">    void doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Plugin1 implements Plugin &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        System.out.println(&quot;Plugin1 is doing something.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，主程序在编译时并不知道具体有哪些插件会被加载，因为插件的类名是在运行时确定的。主程序使用反射动态加载了指定名称的插件类，并调用了插件提供的方法。这就是编译时无法确定类，但在运行时才能确定的情况。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h5 id="在编译后进行擦除，那为什么运行时可以正常使用，Object不能使用其衍生类的所有功能吧"><a href="#在编译后进行擦除，那为什么运行时可以正常使用，Object不能使用其衍生类的所有功能吧" class="headerlink" title="在编译后进行擦除，那为什么运行时可以正常使用，Object不能使用其衍生类的所有功能吧"></a>在编译后进行擦除，那为什么运行时可以正常使用，Object不能使用其衍生类的所有功能吧</h5><p>这是因为 Java 的泛型实现是在编译时进行类型擦除的，但在运行时使用了擦除后的原始类型。当你创建一个泛型实例时，编译器会将泛型类型擦除为其边界或 Object 类型，并在必要时插入类型转换来保证类型安全性。</p><p>在运行时，泛型类型参数被擦除为其边界或 Object 类型，但对于调用方法和访问属性等操作，Java 的动态绑定机制仍然会根据实际对象的类型来调用相应的方法和属性。这是因为 Java 是一种面向对象的语言，它支持多态性，即在运行时确定对象的实际类型并调用相应的方法。</p><p>因此，即使在泛型擦除后，你仍然可以在运行时正常使用对象的方法和属性。例如，如果你有一个泛型集合，其中元素是某个类的实例，即使在编译时无法知道具体的类型，但在运行时，你仍然可以通过遍历集合来访问每个元素，并调用它们的方法和属性。</p><p>总的来说，Java 的泛型擦除只是在编译时进行的，而在运行时仍然可以利用动态绑定机制来调用对象的方法和属性，因此你可以正常使用泛型对象的功能。</p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/post/65385/"/>
      <url>/post/65385/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="MBatis-Plus"><a href="#MBatis-Plus" class="headerlink" title="MBatis Plus"></a>MBatis Plus</h1><blockquote><p>由于时间问题，本文暂时停更…</p></blockquote><hr><ul><li><p>基本使用：</p><p>  <code>Mapper</code>类继承<code>BaseMapper&lt;T&gt;</code>接口，使其具有其方法。涵盖了大部分CRUD场景</p><p>  &gt;<br>  &gt;</p><blockquote><p>动态绑定（Dynamic Binding）是面向对象编程中的一个重要概念，它指的是在运行时确定对象的实际类型，并根据该实际类型调用相应的方法或属性。</p><p>在Java中，动态绑定是通过虚拟机的方法调度机制实现的。当你调用一个对象的方法时，Java虚拟机会根据对象的实际类型来确定要调用的方法。这意味着，即使是通过一个父类的引用来调用方法，实际上会调用子类中的方法，前提是该方法在子类中有重写（override）。</p><p>动态绑定的工作原理可以简单地描述为：</p><ol><li>当你调用一个方法时，虚拟机会检查该方法调用的目标对象的实际类型。</li><li>根据目标对象的实际类型，在其类的方法表（Method Table）或虚方法表（Virtual Method Table，VTable）中找到相应的方法。</li><li>执行找到的方法。</li></ol><p>这种动态绑定机制使得面向对象编程中的多态性成为可能。它允许你编写通用的代码，通过父类或接口的引用来操作对象，而无需关心对象的具体类型，从而提高了代码的灵活性和可维护性。</p></blockquote></li></ul><ul><li>常用注解</li></ul><pre><code>![image-20240501170928927](https://pic.zjcspace.xyz/img/202405011709683.png)id生成策略，使用`type=IdType`类型![image-20240501171134941](%E5%BE%AE%E6%9C%8D%E5%8A%A1.assets/image-20240501171134941.png)![image-20240501171459619](https://pic.zjcspace.xyz/img/202405011715743.png)</code></pre><p>​        <code>@TableFiled</code>加在以下情况:</p><pre><code>    - 解决表字段和成员变量不一致    - `is`开头的变量不会按照驼峰命名，会去掉`is`。    - 与`sql`关键字冲突属性变量名加``包围    - 无法与表中字段对应的成员变量</code></pre><ul><li>基本配置：<br>  <img src="https://pic.zjcspace.xyz/img/202405012057309.png" alt="image-20240501205724424"></li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p><img src="https://pic.zjcspace.xyz/img/202405012059727.png" alt="image-20240501205939358"></p></div>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_96. 不同的二叉搜索树</title>
      <link href="/post/53182/"/>
      <url>/post/53182/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96. 不同的二叉搜索树"></a>96. 不同的二叉搜索树</h1><p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**输入：**n = 3</span><br><span class="line">**输出：**5</span><br></pre></td></tr></table></figure></p><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**输入：**n = 1</span><br><span class="line">**输出：**1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &amp;lt;= n &amp;lt;= 19</code></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>观察这些树的结构，发现每一个节点都可以作为根节点，由于是排序树，<br>对于根节点<code>i</code>，左子树将有<code>i-1</code>个节点，右子树将有<code>n-i</code>个节点((i-1)+1+(n-i))=n。所以对于n个节点，每个节点轮流做根节点，然后再分别计算其左右子树组合的可能性，最后再累加再一起就是总个数。这种策略是我们可以很容易分割问题规模，自底向上的重复使用已有的结果。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>dp[i]</code>表示<code>n</code>个节点组成且节点值从<code>1</code>到<code>n</code>互不相同的 二叉搜索树 的个数。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">dp[<span class="number">2</span>]=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="递推方程"><a href="#递推方程" class="headerlink" title="递推方程"></a>递推方程</h2><script type="math/tex; mode=display">dp[n]=\sum_{i=1}^n({dp[i-1]}*dp[n-i])</script><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//定义dp[i]-&gt;由 i 个节点组成的二叉搜索树 有多少种</span></span><br><span class="line">        <span class="comment">//init</span></span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span> [n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                dp[i]+=dp[j-<span class="number">1</span>]*dp[i-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/post/21079/"/>
      <url>/post/21079/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><div><iframe width="100%" height="1200" frameBorder="0" src="https://www.mindmeister.com/maps/public_map_shell/3231796451/java?width=600&height=400&z=auto&live_update=1&no_share=1&no_logo=1" scrolling="no" style="overflow:hidden;margin-bottom:5px">您目前的浏览器无法显示框架元素。请访问MindMeister上的<a href="https://www.mindmeister.com/3231796451/java" target="_blank">Java集合</a>页面。</iframe></div></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_142. 环形链表 II</title>
      <link href="/post/45518/"/>
      <url>/post/45518/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a>142. 环形链表 II</h1><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改 </strong>链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**head = [3,2,0,-4], pos = 1</span><br><span class="line">**输出：**返回索引为 1 的链表节点</span><br><span class="line">**解释：**链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**head = [1,2], pos = 0</span><br><span class="line">**输出：**返回索引为 0 的链表节点</span><br><span class="line">**解释：**链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**head = [1], pos = -1</span><br><span class="line">**输出：**返回 null</span><br><span class="line">**解释：**链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li><code>-105 &amp;lt;= Node.val &amp;lt;= 105</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？# 142. 环形链表 II<br>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改 </strong>链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**head = [3,2,0,-4], pos = 1</span><br><span class="line">**输出：**返回索引为 1 的链表节点</span><br><span class="line">**解释：**链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**head = [1,2], pos = 0</span><br><span class="line">**输出：**返回索引为 0 的链表节点</span><br><span class="line">**解释：**链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**输入：**head = [1], pos = -1</span><br><span class="line">**输出：**返回 null</span><br><span class="line">**解释：**链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li><code>-105 &amp;lt;= Node.val &amp;lt;= 105</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？</p><h1 id="使用双指针法"><a href="#使用双指针法" class="headerlink" title="使用双指针法"></a>使用双指针法</h1><h2 id="证明速度-1-次迭代-和速度为-2-次迭代-的双指针，在非完全循环链表中必定相遇"><a href="#证明速度-1-次迭代-和速度为-2-次迭代-的双指针，在非完全循环链表中必定相遇" class="headerlink" title="证明速度$1/次迭代$和速度为$2/次迭代$的双指针，在非完全循环链表中必定相遇"></a>证明速度$1/次迭代$和速度为$2/次迭代$的双指针，在非完全循环链表中必定相遇</h2><h3 id="使用绝对位置-此法无解析解"><a href="#使用绝对位置-此法无解析解" class="headerlink" title="使用绝对位置(此法无解析解)"></a>使用绝对位置(此法无解析解)</h3><p>设链表非循环部分长为$a$,循环部分周长为$b$，慢指针命名为$slowP$，快指针命名为$fastP$,起始都位于头部。</p><p>假设$fastP$在第$n$次循环后与$slowP$相遇,在$t\ (a\le t\le a+b)$时刻，两者的索引为:</p><script type="math/tex; mode=display">\begin{aligned}pos_{slow}=(1 \cdot t-a)\ mod \  b +a\\ pos_{fast}=(2 \cdot t-a)mod \ b +a\end{aligned}</script><p>解方程:</p><script type="math/tex; mode=display">pos_{slow}=pos_{fast}\\</script><p>我发现以我现有的水平，我解不出来。。。这种带<code>mod</code>的方程一般都很难求解析解。于是换一种思路。</p><h3 id="换一个思路："><a href="#换一个思路：" class="headerlink" title="换一个思路："></a>换一个思路：</h3><p><strong>首先两个指针必然会进入循环部分，因为非循环部分是有限长的。</strong></p><p><strong>进入环内的两个指针，必定相遇</strong>。</p><p>不信?证明一下:</p><p><strong>证明:两个在环内同向运动的质点，速度不同，必定相遇；且当两者速度比值大于等于2(或者小于等于0.5)时，两者首次相遇于慢的一方的第一圈。</strong></p><p>假设有两个质点$z_1$,$z_2,$速度是$v_1$,$v_2$，且$v_1$&gt;$v_2$。圆环周长为$L$,他们的位置分别为:</p><script type="math/tex; mode=display">\begin{aligned}X_{z_1}=z_1(t)+x1\\X_{z_2}=z_2(t)+x2\end{aligned}</script><p>其中$z(t)$表示质点在$t$时刻的位移，$x$表示每个质点的初始位置。</p><p>以$z_2$为参照系，$z_1$的速度为$v_1-v_2$，$z_2$的速度为$0$,两者相遇的时间表示为：</p><script type="math/tex; mode=display">t= \frac{|X_{z_1}-X_{z_2}|}{v_1-v_2}</script><p>显然$t&gt;0$，可以证明：</p><p><strong>两个在环内同向运动的质点，速度不同，必定相遇</strong></p><p>又因为$0\le |X<em>{z_1}-X</em>{z_2}|\le L$</p><p>可得:</p><script type="math/tex; mode=display">t\le \frac{L}{v_1-v_2}</script><p>在$t$时间内，$z_2$的运动的位移为:</p><script type="math/tex; mode=display">X_{z_2}=v_2 \cdot t \le L \cdot \frac{v_2}{v_1-v_2}</script><p>当$v_2\le v_1-v2$时，$\frac{v_2}{v_1-v_2}\le 1$，即$v_1\geq 2v_2$时,</p><script type="math/tex; mode=display">X_{z_2}\le L \cdot \frac{v_2}{v_1-v_2} \le L</script><p>即可证明:<br><strong>且当两者速度比值大于等于2(或者小于等于0.5)首次相遇于慢的一方的第一圈</strong>。</p><p>命题得证。</p><p><strong>因此若想证明相遇于入环点只需要描述慢指针进入循环的第一圈与快指针相遇时的位置关系即可。</strong></p><p>在慢指针第一次进入循环部分并于快指针相遇时，此时快指针已经在循环部分循环了$n$圈$(n\geq1)$:</p><p>设链表非循环部分长为$a$,慢指针遍历过的循环节点数为$b$，未遍历的循环节点数为$c$。慢指针命名为$slowP$，快指针命名为$fastP$,起始都位于头部。</p><p>两者的路程始终是$2$倍的关系,我们关注的是$a$的值</p><p>因此有:</p><script type="math/tex; mode=display">\begin{aligned}2\cdot path_{slowP}= path_{fastP} \\2(a+b)=a+n(b+c)+b\end{aligned}</script><p>得:</p><script type="math/tex; mode=display">a=n(b+c)-b</script><p>也就是:</p><script type="math/tex; mode=display">a=(n-1)(b+c)+c</script><p>这意味着，此时即相遇时再设置一个和$slowP$一样速度的指针$P$，让其在头节点与其一起移动，两者相遇点为入环点。开始运动时关注$slowP$此时距入环点的距离为$c$</p><p>设入环点为$x_0$,此时其位移是:</p><script type="math/tex; mode=display">x_0-c</script><p>两者相遇时，有:</p><script type="math/tex; mode=display">\begin{aligned}X_{slowP}\\&=x_0 - c + a \\&= x_0 - c + (n-1)(b+c) + c \\&= x_0 + (n-1)(b+c)\\&=x_0\\&=a\\&=X_P\end{aligned}</script><p>其中$(n-1)(b+c)$是周长的整数倍，因此位移是$0$</p><p>因此$X_{slowP}=X_P=a$，即相遇于入环点。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* pSlow=head;</span><br><span class="line">        ListNode* pFast=head;</span><br><span class="line">        <span class="comment">// 相遇</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            pFast=(pFast==<span class="literal">NULL</span>||pFast-&gt;next==<span class="literal">NULL</span>)? <span class="literal">NULL</span>:pFast-&gt;next-&gt;next;</span><br><span class="line">            pSlow=pSlow-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">while</span>(pSlow!=pFast);</span><br><span class="line">        <span class="keyword">if</span>(pSlow==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 入环点</span></span><br><span class="line">        ListNode* p=head;</span><br><span class="line">        <span class="keyword">while</span>(p!=pSlow)&#123;</span><br><span class="line">            pSlow=pSlow-&gt;next;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 快慢指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_206. 反转链表</title>
      <link href="/post/10098/"/>
      <url>/post/10098/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt=""></p><blockquote><p><strong>输入：</strong>head = [1,2,3,4,5]<br><strong>输出：</strong>[5,4,3,2,1]</p></blockquote><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt=""></p><blockquote><p><strong>输入：</strong>head = [1,2]<br><strong>输出：</strong>[2,1]</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong>head = []<br><strong>输出：</strong>[]</p></blockquote><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &amp;lt;= Node.val &amp;lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode* p=head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* t=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            t-&gt;next=dummy-&gt;next;</span><br><span class="line">            dummy-&gt;next=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感想</title>
      <link href="/post/32265/"/>
      <url>/post/32265/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>我感觉写博客是一件费时费力且无太大意义的事，我写的这些东西，互联网上可以轻易地检索到，感觉我在做无用功，只剩下纪念意义。</p></div>]]></content>
      
      
      <categories>
          
          <category> 吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透的实现</title>
      <link href="/post/30233/"/>
      <url>/post/30233/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="什么是内网穿透"><a href="#什么是内网穿透" class="headerlink" title="什么是内网穿透"></a>什么是内网穿透</h1><ul><li>内网穿透，简单地说就是内网的数据让外网可以获取，可以映射到公共网络上，这样就可以在公共网络上访问内网的数据。</li><li>内网是不能被外网直接访问的，只能通过一些中转技术，如 DingTalk Design CLI、花生壳、Natap 等工具，让内网“假装”成外网，就是内网穿透。</li><li>外网主机的 IP 地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该 IP 的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。</li><li>内网穿透扩展了我们之前的工作场景和范围，让使用者可以不局限在内网环境中就可以做到局域网才能做的事情，大大提高了我们的效率。</li></ul><h1 id="使用frp来进行内网穿透"><a href="#使用frp来进行内网穿透" class="headerlink" title="使用frp来进行内网穿透"></a>使用frp来进行内网穿透</h1><p>简单地说，<a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ffatedier%2Ffrp%2Fblob%2Fmaster%2FREADME_zh.md">frp</a>就是一个<a href="https://sspai.com/link?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F24723688">反向代理软件</a>，它体积轻量但功能很强大，可以<strong>使处于内网或防火墙后的设备对外界提供服务</strong>，它支持HTTP、TCP、UDP等众多协议。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul><li><p><a href="https://github.com/fatedier/frp/releases/tag/v0.42.0">下载地址</a></p></li><li><p>服务器端</p><ul><li><p>下载解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.41.0/frp_0.41.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.41.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>重命名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r frp_0.41.0_linux_amd64 frp</span><br><span class="line"><span class="built_in">rm</span> -r frp_0.41.0_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -r frp_0.41.0_linux_amd64</span><br></pre></td></tr></table></figure></li><li><p>进入</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> frp</span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>  我们只需要关注如下几个文件</p><ul><li>frps</li><li>frps.ini</li><li>frpc</li><li><p>frpc.ini</p><p>前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。<br>因为我们正在配置服务端，可以删除客户端的两个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm frpc frpc.ini</span><br><span class="line">y</span><br><span class="line">y</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>    然后修改`frps.ini`文件    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure>    这个文件应有如下格式    <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">10080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">10443</span></span><br></pre></td></tr></table></figure>    &gt; 如果没有必要，端口均可使用默认值，token、user和password项请自行设置。    - “bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。    - “dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。    - “token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。    - “dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。    - “vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。    需要为它设置可执行权限。您可以使用`chmod`命令来设置文件的权限。例如，使用以下命令为`frps`文件添加可执行权限,运行:    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x frps</span><br><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>    然后阿里云后台安全组放行相关端口，**如果有宝塔面板，也要放行。**- 后台运行  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>客户端</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">47.94</span>.<span class="number">134.162</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[rdp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span>           </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7001</span>  </span><br><span class="line"><span class="section">[smb]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">445</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure></li></ul><pre><code>上面frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。- “[xxx]”表示一个规则名称，自己定义，便于查询即可。- “type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。- “local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。- “remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。&gt; RDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。&gt;&gt; SMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。- 启动    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc -c frpc.ini</span><br></pre></td></tr></table></figure></code></pre><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>安装openssh msi</p><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=sshd <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">22</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> 实用技巧 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_215. 数组中的第K个最大元素</title>
      <link href="/post/20380/"/>
      <url>/post/20380/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定整数数组 $nums$ 和整数 $k$，请返回数组中第 $<strong>k</strong>$ 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 $k$ 个最大的元素，而不是第 $k$ 个不同的元素。</p><p>你必须设计并实现时间复杂度为 $O(n)$ 的算法解决此问题。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4], k = 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6], k = 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= k &lt;= nums.length &lt;= 10^{5}$</li><li>$-10^{4} &lt;= nums[i] &lt;= 10^{4}$</li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>见<a href="https://faithererer.github.io/2023/09/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%89%8B%E5%86%99%E5%A0%86/">堆的java实现</a></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxHeap</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> ArrayList&lt;Integer&gt; data;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">()</span>&#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">                data.add(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastP</span> <span class="operator">=</span> getParent(data.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=lastP;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                siftDown(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.data.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.data.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getParent</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (idx-<span class="number">1</span>)/<span class="number">2</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLeftChild</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> idx*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRightChild</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> idx*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">temp</span> <span class="operator">=</span> data.get(i);</span><br><span class="line">            data.set(i,data.get(j));</span><br><span class="line">            data.set(j,temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">siftUp</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(k&gt;<span class="number">0</span>&amp;&amp;data.get(getParent(k))&lt;data.get(k))&#123;</span><br><span class="line">                swap(k,getParent(k));</span><br><span class="line">                k = getParent(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(getLeftChild(k)&lt;data.size())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> getLeftChild(k);</span><br><span class="line">                <span class="keyword">if</span>(getRightChild(k)&lt;data.size())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.get(j)&lt;data.get(getRightChild(k)))&#123;</span><br><span class="line">                        j = getRightChild(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(data.get(j)&gt;data.get(k))&#123;</span><br><span class="line">                    swap(j,k);</span><br><span class="line">                    k = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">res</span> <span class="operator">=</span> data.get(<span class="number">0</span>);</span><br><span class="line">            data.set(<span class="number">0</span>,data.get(data.size()-<span class="number">1</span>));</span><br><span class="line">            data.remove(data.size()-<span class="number">1</span>);</span><br><span class="line">            siftDown(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Integer element)</span>&#123;</span><br><span class="line">            data.add(element);</span><br><span class="line">            siftUp(data.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">MaxHeap</span> <span class="variable">heap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaxHeap</span>(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            heap.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heap.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 堆，二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆的java实现</title>
      <link href="/post/19146/"/>
      <url>/post/19146/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><p>堆是一种具有特殊规则的树，而且是完全二叉树，存储完全二叉树，常见的方式就是数组。</p><ul><li>左孩子与父节点在数组索引的关系<br>  $i<em>{parent}=(i</em>{left}-1)/2$</li><li><p>右孩子与父节点在数组索引的关系<br>  $i<em>{parent}=(i</em>{right}-2)/2$</p></li><li><p>孩子节点为主<br>  $i<em>{left}=2*i</em>{parent}+1$<br>  $i<em>{right}=2*i</em>{parent}+2$</p></li></ul><h1 id="最大堆实现"><a href="#最大堆实现" class="headerlink" title="最大堆实现"></a>最大堆实现</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxHeap</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">()</span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.getSize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLeftChild</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRightChild</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getParentBy</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (idx-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h2><p>首先将添加元素置于数组尾部(二叉树尾部),然后进行上浮操作，如果父节点&lt;添加元素值则交换位置，一直重复该操作直到到达根节点(k&gt;0)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">siftUp</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k&gt;<span class="number">0</span>&amp;&amp;data.get(k)&gt;data.get(getParent(k)))&#123;</span><br><span class="line">        swap(getParent(k),k);</span><br><span class="line">        k=getParent(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> element)</span>&#123;</span><br><span class="line">    data.add(element);</span><br><span class="line">    siftUp(data.size()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>首先取得数组首部的元素(二叉树根节点),储存，然后使用数组尾部元素覆盖它，然后删除尾部元素。对首部元素，进行下沉操作，首先判断是否存在子树(左子树),不存在结束，否则判断是否存在右子树，如果存在则取两者较大者，与其交换。直到不存在子树(到达叶子结点)或者在以其为根节点的子树已经满足堆的特性时停止。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(getLeftChild(k)&lt; data.size())&#123;<span class="comment">//还有子树吗</span></span><br><span class="line">        <span class="type">int</span> j=getLeftChild(k);</span><br><span class="line">        <span class="keyword">if</span>(getRightChild(k)&lt;data.size())&#123;<span class="comment">//若右子树存在，两者比较最大</span></span><br><span class="line">            <span class="keyword">if</span>(data.get(getRightChild(k))&gt; data.get(j))&#123;</span><br><span class="line">                j=getRightChild(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(data.get(j)&gt;data.get(k))&#123;</span><br><span class="line">            swap(j,k);</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> data.get(<span class="number">0</span>);</span><br><span class="line">    data.set(<span class="number">0</span>, data.get(data.size()-<span class="number">1</span>));</span><br><span class="line">    data.remove(data.size()-<span class="number">1</span>);</span><br><span class="line">    siftDown(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="堆化"><a href="#堆化" class="headerlink" title="堆化"></a>堆化</h2><p>两种操作方法，一种是上浮，一种是下沉，但是它们的时间复杂度有些不同，我们以根节点第0层进行讨论。</p><h3 id="上浮方式"><a href="#上浮方式" class="headerlink" title="上浮方式"></a>上浮方式</h3><p>第0层:至多交换0次<br>第1层:每个结点至多交换1次，一共2个结点所以交换次数至多$1\times 2$次<br>第2层:每个结点至多交换2次，一共4个结点所以交换次数至多$2\times 4$次<br>第3层:每个结点至多交换3次，一共8个结点所以交换次数至多$3\times 8$次<br>…</p><p>第k层:每个结点至多交换k次，一共$2^k$个结点所以交换次数至多$k\times 2^k$次<br>因此，假设有n个结点，则层数为$\log n$交换次数为:</p><script type="math/tex; mode=display">\sum_{i=0}^{\log n}i\cdot 2^i=2(\log n-1)\cdot 2^{\log n}+3=2(\log n -1)n+3</script><p>所以复杂度是$O(n\log n)$</p><h3 id="下沉方式"><a href="#下沉方式" class="headerlink" title="下沉方式"></a>下沉方式</h3><p>假设有$n$个结点,需要证明以下问题:</p><ul><li><p>证明二叉树$n_0=n_2+1$</p><p>  $proof:$</p><p>  我们考虑引入二叉树的边的总数为$sum_{edge}$</p><p>  <strong>除了根节点外，每个结点都是由一条边引出来的</strong>，可以得:</p><script type="math/tex; mode=display">  sum_{edge}=n_0+n_1+n_2-1</script><p>  我们关注<strong>每个结点引出的边</strong>，可得:</p><script type="math/tex; mode=display">  sum_{edge}=0\cdot n_0+1\cdot n_1+2\cdot n_2</script><p>  联立两个式子得:</p><script type="math/tex; mode=display">  n_0=n_2+1</script></li><li><p>证明完全二叉树底层叶子结点数为$[\frac{n+1}{2}]$</p><p>  $proof:$</p><p>  首先根据完全二叉树的的特性，$n_1$只能为$1$或者$0$.</p><ul><li><p>当$n_1=0$时:</p><p>  此时结点数$n$为奇数，因为除了根节点都是成对出现。由$n_0=n_2+1$,$n=n_0+n_1+n_2$,$n_1=0$得：</p><script type="math/tex; mode=display">  n_0=\frac{n+1}{2}</script></li><li><p>当$n_1=1$时:</p><p>  此时结点数$n$为偶数，由$n_0=n_2+1$,$n=n_0+n_1+n_2$,$n_1=1$得：</p><script type="math/tex; mode=display">  n_0=\frac{n}{2}</script></li></ul></li></ul><p>所以可得:</p><script type="math/tex; mode=display">n_0=[\frac{n+1}{2}]</script><p>因此完全二叉树的底部结点数为$(n+1)/2$，它们无需下沉，因为没有子树,（倒数第0层）。</p><p>倒数第一层结点数有$2^{[\log n]-1}$，它们最多交换$1$次，因此总次数为$2^{[\log n]-1}\times 1$。</p><p>倒数第二层结点数有$2^{[\log n]-2}$，它们最多交换2次，因此总次数为$2^{[\log n]-2}\times 2$</p><p>倒数第三层结点数有$2^{[\log n]-3}$，它们最多交换$3$次，因此总次数为$2^{[\log n]-3}\times 3$</p><p>…</p><p>倒数第k层结点数有$2^{[\log n]-k}$,它们最多交换$k$次，因此总次数为$2^{[\log n]-k}\times k$</p><p>所以总次数</p><script type="math/tex; mode=display">N=\sum_{i=1}^{\log {[n]}}{2^{[\log n]-i}\cdot i}=-\log {[n]}+2^{\log{[n]+1}}-2</script><p>所以时间复杂度是$O(n)$</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i:arr)&#123;</span><br><span class="line">        data.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastParent</span>  <span class="operator">=</span> getParent(data.size()-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=lastParent;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        siftDown(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solutions/307351/shu-zu-zhong-de-di-kge-zui-da-yuan-su-by-leetcode-/">数组中的第K个最大元素</a></p><p>一运行超过16%的用户破防了</p></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 堆，二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_705. 设计哈希集合</title>
      <link href="/post/16196/"/>
      <url>/post/16196/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p><p>实现 $MyHashSet$ 类：</p><ul><li>$void add(key)$ 向哈希集合中插入值 $key$ 。</li><li>$bool contains(key)$ 返回哈希集合中是否存在这个值 $key$ 。</li><li>$void remove(key)$ 将给定值 $key$ 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyHashSet&quot;, &quot;add&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;contains&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;remove&quot;, &quot;contains&quot;]</span><br><span class="line">[[], [1], [2], [1], [3], [2], [2], [2], [2]]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, true, false, null, true, null, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyHashSet myHashSet = new MyHashSet();</span><br><span class="line">myHashSet.add(1);      // set = [1]</span><br><span class="line">myHashSet.add(2);      // set = [1, 2]</span><br><span class="line">myHashSet.contains(1); // 返回 True</span><br><span class="line">myHashSet.contains(3); // 返回 False ，（未找到）</span><br><span class="line">myHashSet.add(2);      // set = [1, 2]</span><br><span class="line">myHashSet.contains(2); // 返回 True</span><br><span class="line">myHashSet.remove(2);   // set = [1]</span><br><span class="line">myHashSet.contains(2); // 返回 False ，（已移除）</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$0 &lt;= key &lt;= 10^{6}$</li><li>最多调用 $10^{4}$ 次 $add$、$remove$ 和 $contains$</li></ul><h1 id="方法一-链地址法"><a href="#方法一-链地址法" class="headerlink" title="方法一:链地址法"></a>方法一:链地址法</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>哈希表长度最好为素数，这样可以减少哈希冲突，这里取857，然后使用链地址法解决哈希冲突，即使用链表存储哈希冲突的元素。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashSet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> BASE=<span class="number">857</span>;</span><br><span class="line">    <span class="keyword">private</span> LinkedList[] data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[BASE];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;BASE; i++)&#123;</span><br><span class="line">            data[i]=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = data[loc].iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(element==key)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data[loc].offerLast(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = data[loc].iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(element==key)&#123;</span><br><span class="line">                data[loc].remove(element);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = data[loc].iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(element==key)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key%BASE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 哈希表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_389. 找不同</title>
      <link href="/post/51932/"/>
      <url>/post/51932/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个字符串 $s$ 和 $t$ ，它们只包含小写字母。</p><p>字符串 $t$ 由字符串 $s$ 随机重排，然后在随机位置添加一个字母。</p><p>请找出在 $t$ 中被添加的字母。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, t = &quot;abcde&quot;</span><br><span class="line">输出：&quot;e&quot;</span><br><span class="line">解释：&#x27;e&#x27; 是那个被添加的字母。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&quot;, t = &quot;y&quot;</span><br><span class="line">输出：&quot;y&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$0 &lt;= s.length &lt;= 1000$</li><li>$t.length == s.length + 1$</li><li>$s$ 和 $t$ 只包含小写字母</li></ul><h1 id="方法一-哈希表"><a href="#方法一-哈希表" class="headerlink" title="方法一:哈希表"></a>方法一:哈希表</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历<code>s</code>，使用<code>map</code>记录每个字符出现的次数，然后遍历<code>t</code>,遍历字符，若在<code>map</code>中没有出现返回该字符，若出现该字符其出现次数-1，如果出现次数减为0则说明该字符比<code>s</code>中多，返回该字符。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> map.containsKey(ch) ? map.get(ch) : <span class="number">0</span> ;</span><br><span class="line">            map.put(ch,++cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> t.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(ch))&#123;</span><br><span class="line">                <span class="keyword">return</span> ch;               </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> map.get(ch);</span><br><span class="line">            <span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ch;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(ch,--cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二-ascii码相加"><a href="#方法二-ascii码相加" class="headerlink" title="方法二:ascii码相加"></a>方法二:ascii码相加</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>初始化变量<code>sum=0</code>,遍历<code>s</code>和<code>t</code>,将<code>t</code>中每个字符的ascii码相加，然后将<code>s</code>中每个字符的ascii码相减，最后返回<code>sum</code>+<code>t</code>中最后一个字符的ascii码。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            sum+=t.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            sum-=s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法三-异或"><a href="#方法三-异或" class="headerlink" title="方法三:异或"></a>方法三:异或</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>依次遍历<code>s</code>和<code>t</code>,将<code>s</code>和<code>t</code>中每个字符进行异或，最后返回异或的结果。<br>因为两个相同的字符异或操作的结果是0，所以最后剩下的字符就是<code>t</code>中多出来的字符。</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            sum^=t.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            sum^=s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 哈希表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_217. 存在重复元素</title>
      <link href="/post/4098/"/>
      <url>/post/4098/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数数组 $nums$ 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 $true$ ；如果数组中每个元素互不相同，返回 $false$ 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^{5}$</li><li>$-10^{9} &lt;= nums[i] &lt;= 10^{9}$</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line"><span class="comment">//     public boolean containsDuplicate(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">//         Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         for(int i=0;i&lt;nums.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//             if(map.containsKey(nums[i]))&#123;</span></span><br><span class="line"><span class="comment">//                 return true;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             map.put(nums[i],1);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return false;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。插入和搜索时间复杂度为 $O(1)$</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 哈希表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/post/48230/"/>
      <url>/post/48230/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><ul><li><p>登录</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh USERNAME@IP</span><br></pre></td></tr></table></figure><ul><li><p>列出当前文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls </span><br></pre></td></tr></table></figure><p>以列表形式显示文件信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>显示隐藏文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure></li><li><p>显示用户当前工作目录路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure></li><li><p>跳转目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /PATH</span><br></pre></td></tr></table></figure><p>返回上一级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>返回<code>/root</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd </span><br></pre></td></tr></table></figure></li><li><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch a.txt</span><br></pre></td></tr></table></figure><p>创建一堆文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch a.x1 b.x2 c.x3</span><br></pre></td></tr></table></figure><p>创建一堆文件格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch a&#123;1..3&#125;.txt</span><br></pre></td></tr></table></figure><blockquote><p>结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zei66vqqa9mhaqwtqyxZ my]# ls</span><br><span class="line">a1.txt  a2.txt  a3.txt</span><br></pre></td></tr></table></figure></blockquote></li><li><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这将输出<code>hello</code>到终端</p></blockquote><p>输出字符串到a.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello&quot; &gt; a.txt</span><br></pre></td></tr></table></figure></li><li><p>快速查看文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt</span><br></pre></td></tr></table></figure></li><li><p>安全删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shred a.txt</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir newDir</span><br></pre></td></tr></table></figure></li><li><p>复制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp source.file /target</span><br></pre></td></tr></table></figure><blockquote><p>可以是<code>cp source.file /target/source.file</code></p></blockquote></li></ul></li><li><p>移动文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv source.file /target</span><br></pre></td></tr></table></figure><blockquote><p> 可以是<code>cp source.file /target/source.file</code></p></blockquote></li><li><p>删除文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm a.txt</span><br></pre></td></tr></table></figure><p>  删除文件夹(递归删除,会提醒)</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r dir</span><br></pre></td></tr></table></figure><p>  删除文件夹(不提醒)</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r -f dir</span><br></pre></td></tr></table></figure></li><li><p>建立软链接</p><blockquote><p>Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在<strong>另外一个位置建立一个同步的链接</strong>。</p><p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><p><strong>软链接</strong>：</p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p><strong>硬链接</strong>：</p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul></blockquote><p>  创建软链接</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /sourceFilePath newLink </span><br></pre></td></tr></table></figure><p>  此时<code>newLink</code>已经指向源文件，访问<code>newLink</code>相当于访问<code>/sourceFilePath</code></p><ul><li><p>清空终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure></li><li><p>显示自身用户名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure></li><li><p>添加用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser username</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure></li><li><p>查看所有用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>设置用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure></li><li><p>切换用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su username</span><br></pre></td></tr></table></figure></li><li><p>以root身份执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo command</span><br></pre></td></tr></table></figure></li><li><p>压缩(递归地)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r html.zip /home/html</span><br></pre></td></tr></table></figure></li><li><p>解压(并且查看解压信息)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -l a.zip</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>随意浏览文件，支持翻页和搜索</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less file.txt</span><br></pre></td></tr></table></figure></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-习题</title>
      <link href="/post/57696/"/>
      <url>/post/57696/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="DFA"><a href="#DFA" class="headerlink" title="DFA"></a>DFA</h2><p>确定的有限自动机DFA M是一个五元组$M =(S，\sum，δ ，S_0 ，F )$</p><p>(1) S 是一个非空有限集，它的每个元素称为一个状态。</p><p>(2) $\sum$ 是一个有穷字母表，它的每个元素称为一个输入符号，所以也称为输入符号字母表。</p><p>(3) δ是状态转换函数，是在$S×\sum→S$上的<strong>单值映射</strong>。</p><p>(4) $s0,  s0 ∈S$，是<strong>唯一</strong>的一个初态。</p><p>(5) $F, F\subseteq S$，可空,是一个终态集,终态也称可接受状态或结束状态。</p><h1 id="NFA"><a href="#NFA" class="headerlink" title="NFA"></a>NFA</h1><p>定义 一个NFA M是五元式$M=(S,\sum,δ,S_0,F)$</p><p>$S$  有穷非空状态集合</p><p>$\sum$  有穷的输入字母表集合</p><p>δ 从$S\subseteq∑^<em>→2S$映射$S_0\subseteq S$ 是S的非空子集，称为初始状态集合F  S 是S的子集(可空),称为终止状态集合NFA和DFA的不同在于δ的值域是S的子集，δ：S  Σ</em> →2S开始状态有不止一个接受ε作为输入符号</p><h1 id="正规式转DFA"><a href="#正规式转DFA" class="headerlink" title="正规式转DFA"></a>正规式转DFA</h1><ul><li><p>1(0|1)*101</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    flowchart LR</span><br><span class="line">        A(A)--1--&gt;B</span><br><span class="line">        B--$--&gt;E</span><br><span class="line">        E--0--&gt;E</span><br><span class="line">        E--1--&gt;E</span><br><span class="line">        E--$--&gt;D</span><br><span class="line">        D--1--&gt;F</span><br><span class="line">        F--0--&gt;G</span><br><span class="line">        G--1--&gt;H((G))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- 1(1010\*|1(010)\*1)*0</span><br><span class="line"></span><br><span class="line">```mermaid</span><br><span class="line">flowchart LR</span><br><span class="line">A(A)--1--&gt;B</span><br><span class="line">B--$--&gt;C</span><br><span class="line">C--$--&gt;D</span><br></pre></td></tr></table></figure></li></ul><h1 id="NFA确定化—子集法"><a href="#NFA确定化—子集法" class="headerlink" title="NFA确定化—子集法"></a>NFA确定化—子集法</h1><p>  对给定的NFA N构造一张表，表的构成如下：</p><p>（1）设$∑={ a1,…, ak }$，表的每行含有$k+1$列。</p><p>（2）置首行首列为$ε-closure(S_0)$。</p><p>（3）若某行首列状态子集已确定,记为I，则置该行     的第i+1列为$I_{ai}(i=1, …, k)$。</p><p>（4）检查该行所有状态子集，将未出现在第一列者     填入到后面空行的第一列。</p><p>（5）重复(3)(4)直到第一列中状态子集不再扩大为止(在第$i+1$列上的所有状态子集均已        在第一列上出现)。  此时，将该表看成是一个状态转换矩阵。</p><p>（6）将该状态转换矩阵中所有状态子集重新命名，     得到状态转换矩阵，其所示的是与        给定的NFA N     等价的DFA M（未化简的DFA）。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> MSP430 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/3/"/>
      <url>/post/3/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>Description<br>给定含有$n$个元素的多重集合$S$，每个元素在$S$中出现的次数称为该元素的重数。多重集$S$中重数最大的元素称为众数。例如，$S={1,2,2,2,3,5}$。多重集S的众数是$2$，其重数为$3$。对于给定的由n 个自然数组成的多重集$S$，计算$S$的众数及其重数。如果出现多个众数，请输出最小的那个。</p><p>Input<br>输入数据的第1行是多重集$S$中元素个数$n\ (n&lt;1300000)$；接下来的n行中，每行有一个最多含有5位数字的自然数，。</p><p>Output<br>输出数据的第1行给出众数，第2行是重数。</p><p>Samples<br>Sample #1</p><div class="table-container"><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td>6<br/>1<br/>2<br/>2 <br/>2<br/>3<br/>5</td><td>2 <br/>3</td></tr></tbody></table></div><h1 id="方法一-map映射法"><a href="#方法一-map映射法" class="headerlink" title="方法一:map映射法"></a>方法一:map映射法</h1><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>遍历多重集合$S$,由于本题考查的是集合的众数和重数，两者有一种天然的一一对应关系，可以使用一个<code>map</code>维护一个元素与其重数的映射关系。每遍历一个元素<code>num</code>，使<code>map[num]++</code></p><p>遍历完成后，<code>map</code>中保存了每个元素的重数，然后遍历map，找到最大的重数，它就是要输出的重数，其对应的<code>key</code>就是要输出的众数。</p><p><code>std::map</code>基于红黑树，其遍历顺序依据标准库要求按照键值升序遍历，符合题目要求:</p><blockquote><p>如果出现多个众数，请输出最小的那个。</p></blockquote><p>这也是为什么没有使用<code>std::unordered_map</code>的原因，因为它的遍历是无序的，基于哈希表实现，即使它的插入和查找操作达到了 $O(1)$</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(n)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>-&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">input</span>(num)</span><br><span class="line">    map[num]++</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> zs=<span class="number">0</span>,cs=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(key in map)&#123;</span><br><span class="line">    <span class="keyword">if</span>(map[key]&gt;cs)&#123;</span><br><span class="line">        zs=key</span><br><span class="line">        cs=map[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(zs)</span><br><span class="line"><span class="built_in">print</span>(cs)</span><br></pre></td></tr></table></figure><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; myMap;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,num;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        myMap[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> zs=<span class="number">0</span>,cs=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=myMap.<span class="built_in">begin</span>();it!=myMap.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second&gt;cs)&#123;</span><br><span class="line">            zs=it-&gt;first;</span><br><span class="line">            cs=it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;zs&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;cs&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>第一个循环:</li></ul><p>​        $N<em>1=0+\sum</em>{i=1}^{n-1} log\ i=log \ (n-1)! $</p><ul><li><p>第二个循环:</p><p>  $N_2=n \cdot log \ n  $</p></li></ul><p>$N=N_1+N2=nlogn+log(n-1)!$</p><p>因为当$n&gt;=1$时,$N_2&gt;=N_1$</p><blockquote><p>$proof:$</p><p>$令f(n)=log \ (n-1)!$ </p><p>$g(n)=nlogn$</p><p>$做e的指数,不会改变两者的大小关系:$</p><p>$e^{f(n)}$和$e^{g(n)}$</p><p>$即:$</p><p>$e^{log \ (n-1)!}=(n-1)!$</p><p>$e^{nlogn}=n^n$</p><p>当$n&gt;=1$时，$(n-1)!&lt;=n^n$</p><p>即:$g(n)&gt;=f(n),\ \ \ n&gt;=1$</p></blockquote><p><img src="%E4%BC%97%E6%95%B0%E9%97%AE%E9%A2%98.assets/image-20230917164705433.png" alt="image-20230917164705433"></p><p>所以时间复杂度是$O(NlogN)$</p><h1 id="方法二-排序法"><a href="#方法二-排序法" class="headerlink" title="方法二: 排序法"></a>方法二: 排序法</h1><h2 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h2><p>可以通过排序来获得元素与其重数的对应关系，因为集合中的元素在排序后，相同的元素，肯定是排列在一起的。然后我们遍历排序后的S数组，使用打擂台的方式得出众数和重数。</p><h3 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(n)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>-&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">input</span>(s[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s[])</span><br><span class="line"><span class="type">int</span> temp_zs=s[<span class="number">0</span>],temp_cs=<span class="number">0</span>,zs=<span class="number">0</span>,cs=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>-&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==temp_zs)&#123;</span><br><span class="line">        temp_cs++;</span><br><span class="line">        <span class="keyword">if</span>(i!=s.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp_cs&gt;cs)&#123;</span><br><span class="line">            zs=temp_zs</span><br><span class="line">            cs=temp_cs;</span><br><span class="line">        &#125;</span><br><span class="line">        temp_zs=s[i]</span><br><span class="line">        temp_cs=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(zs)</span><br><span class="line"><span class="built_in">print</span>(cs)</span><br></pre></td></tr></table></figure><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a[i];a[i]=a[j];a[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>,j=r+<span class="number">1</span>,mid=s[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(s[i]&lt;mid);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(s[j]&gt;mid);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;        </span><br><span class="line">            <span class="built_in">swap</span>(s,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qsort</span>(l,j);</span><br><span class="line">    <span class="built_in">qsort</span>(j+<span class="number">1</span>,r);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,num;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        s.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qsort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> temp_zs=s[<span class="number">0</span>],temp_cs=<span class="number">0</span>,zs=<span class="number">0</span>,cs=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==temp_zs)&#123;</span><br><span class="line">            temp_cs++;</span><br><span class="line">            <span class="keyword">if</span>(i!=s.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp_cs&gt;cs)&#123;</span><br><span class="line">            zs=temp_zs;</span><br><span class="line">            cs=temp_cs;</span><br><span class="line">        &#125;</span><br><span class="line">        temp_zs=s[i];</span><br><span class="line">        temp_cs=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;zs&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;cs&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><p>第一个循环</p><p>  $N_1=O(N)$</p></li><li><p>排序</p><p>  $N_2=O(NlogN)$</p></li><li><p>第二个循环</p><p>  $N_3=O(N)$</p></li></ul><p>综上复杂度是$O(NlogN)$</p><h1 id="方法三-分治法"><a href="#方法三-分治法" class="headerlink" title="方法三:分治法"></a>方法三:分治法</h1><h2 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h2><p>可以采用分治的思想，对于集合$S$中序列的众数和对应重数，我们可以将从$S$的规模入手，进行子问题的分割，递归的分割，直到集合分为单元素集合时，停止分割，此时每个单元素是该单元素集合的众数，重数是1,然后合并子问题，得到原集合$S$的众数和重数。此方法的难点之一是如何进行子问题的合并，我们可以采用关联容器<code>map</code>来保存元素和其重数的映射关系，这样保证了分割子问题之间的数据共享。</p><h3 id="伪代码-2"><a href="#伪代码-2" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">findModeAndCount</span><span class="params">(<span class="type">int</span> s[], <span class="type">int</span> l, <span class="type">int</span> r, myMap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;<span class="comment">//递归出口</span></span><br><span class="line">        mYmap[s[l]]++</span><br><span class="line">        <span class="keyword">return</span> &#123;s[l],myMap[s[l]]&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="comment">//子问题分割</span></span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; lRes=<span class="built_in">findModeAndCount</span>(s,l,mid)</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; rRes=<span class="built_in">findModeAndCount</span>(s,mid+<span class="number">1</span>,r)    </span><br><span class="line"> <span class="comment">//合并子问题</span></span><br><span class="line">    <span class="keyword">if</span>(lRes.second==rRes.second)&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.first&lt;rRes.first?lRes:rRes</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.second&gt;rRes.second?lRes:rRes</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    <span class="built_in">input</span>(n)</span><br><span class="line">    <span class="built_in">input</span>(s[])</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res = <span class="built_in">findModeAndCount</span>(<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.first)</span><br><span class="line">    <span class="built_in">print</span>(res.second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">findModeAndCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; s, <span class="type">int</span> l, <span class="type">int</span> r, unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; myMap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;<span class="comment">//递归出口</span></span><br><span class="line">        myMap[s[l]]++;</span><br><span class="line">        <span class="keyword">return</span> &#123;s[l],myMap[s[l]]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//子问题分割</span></span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; lRes = <span class="built_in">findModeAndCount</span>(s,l,mid,myMap);</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; rRes = <span class="built_in">findModeAndCount</span>(s,mid+<span class="number">1</span>,r,myMap);</span><br><span class="line">    <span class="comment">//子问题合并</span></span><br><span class="line">    <span class="keyword">if</span>(lRes.second==rRes.second)&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.first&lt;rRes.first?lRes:rRes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lRes.second&gt;rRes.second?lRes:rRes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; myMap;</span><br><span class="line">    <span class="type">int</span> n,num;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        s.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res = <span class="built_in">findModeAndCount</span>(s,<span class="number">0</span>,n<span class="number">-1</span>,myMap);</span><br><span class="line">    cout&lt;&lt;res.first&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;res.second&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><p>输入$S$：</p><p>  $O(N)$</p></li><li><p>函数<code>findModeAndCount()</code></p><p>  考虑分治策略，每次都是从集合的中部分割,每次递归内操作皆是常数操作，可以写出时间复杂函数的递推式:</p><script type="math/tex; mode=display">  \begin{equation}  \left\{      \begin{aligned}       &T(n)=2\cdot T(n/2)+O(1),\ n>=2 \\      &T(1)=O(1)\ , n=1      \end{aligned}   \right.  \end{equation}</script><p>  依据解决关于递归函数时间复杂度的<a href="https://blog.csdn.net/qq_40773984/article/details/127096776?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E4%B8%BB%E5%AE%9A%E7%90%86&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-3-127096776.nonecase&amp;spm=1018.2226.3001.4450">Master Theorem</a>,$T(n)=aT(n/b)+f(n)$</p><p>  $a=2,b=2,f(n)=O(1)$</p><p>  $n^{log_b{a}}=n^{log_21}=1=f(n)$</p></li></ul><p>​        $T(n)=O(n^{log_b{a}}logn)=O(logn)$</p><p>​        所以时间复杂度:$O(logN)$</p><p>综上时间复杂度是$O(N)$</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理OJ</title>
      <link href="/post/64665/"/>
      <url>/post/64665/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p><a href="https://acm.sdut.edu.cn/onlinejudge3/problems/3666">A - 小C语言—词法分析程序</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string kind[<span class="number">5</span>] = &#123; <span class="string">&quot;keyword&quot;</span>,<span class="string">&quot;identifier&quot;</span>,<span class="string">&quot;integer&quot;</span>,<span class="string">&quot;boundary&quot;</span>,<span class="string">&quot;operator&quot;</span> &#125;;</span><br><span class="line">string key[<span class="number">6</span>] = &#123; <span class="string">&quot;main&quot;</span>,<span class="string">&quot;if&quot;</span>,<span class="string">&quot;else&quot;</span>,<span class="string">&quot;for&quot;</span>,<span class="string">&quot;while&quot;</span>,<span class="string">&quot;int&quot;</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Check</span><span class="params">(string token)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(token[<span class="number">0</span>]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;token[<span class="number">0</span>]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">2</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;token&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(token==key[i])&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;token&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;token&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;str)&#123;</span><br><span class="line">        string token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">//遇到界符，往往表示单词结束，判断</span></span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>||str[i] == <span class="string">&#x27;)&#x27;</span>||str[i]==<span class="string">&#x27;&#123;&#x27;</span>||str[i]==<span class="string">&#x27;&#125;&#x27;</span>||str[i]==<span class="string">&#x27;,&#x27;</span>||str[i]==<span class="string">&#x27;;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(token.<span class="built_in">length</span>())&#123;</span><br><span class="line">                    <span class="built_in">Check</span>(token);</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">3</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;str[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;<span class="comment">//遇到运算符，往往表示单词结束，判断是否为双目运算符，是则输出，否则单目运算符，输出单目运算符</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;+&#x27;</span>||str[i]==<span class="string">&#x27;-&#x27;</span>||str[i]==<span class="string">&#x27;*&#x27;</span>||str[i]==<span class="string">&#x27;/&#x27;</span>||str[i]==<span class="string">&#x27;=&#x27;</span>||str[i]==<span class="string">&#x27;&gt;&#x27;</span>||str[i]==<span class="string">&#x27;&lt;&#x27;</span>||str[i]==<span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(token.<span class="built_in">length</span>())&#123;</span><br><span class="line">                    <span class="built_in">Check</span>(token);</span><br><span class="line">                &#125;</span><br><span class="line">                token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;len&amp;&amp;str[i+<span class="number">1</span>]==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">4</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;str[i]&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;kind[<span class="number">4</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;str[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//该字符不是界符也不是运算符，加入token中</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                token+=str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="comment">//每次循环结束，判断token是否为空，不为空则检查其类型</span></span><br><span class="line">        <span class="keyword">if</span>(token.<span class="built_in">length</span>())&#123;</span><br><span class="line">            <span class="built_in">Check</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://acm.sdut.edu.cn/onlinejudge3/contests/4108/problems/B">B - 识别浮点常量问题</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNum</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findP</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countP</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;       </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSign</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>||c==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSmallNum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p_l=<span class="built_in">findP</span>(l,r,s);</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//判断小数点个数</span></span><br><span class="line"><span class="keyword">if</span>(!(<span class="built_in">countP</span>(l,r,s)==<span class="number">1</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//判小数点左侧是否有数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p_l;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//判小数点右侧是否有数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p_l+<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==l&amp;&amp;<span class="built_in">isSign</span>(s[l]))&#123;</span><br><span class="line"><span class="keyword">if</span>(r-l+<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindE</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;e&#x27;</span>||s[i]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isInt</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==l&amp;&amp;<span class="built_in">isSign</span>(s[l]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(r-l+<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNum</span>(s[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;;               </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>, r=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[l]==<span class="string">&#x27; &#x27;</span>) l++;</span><br><span class="line">    <span class="keyword">while</span>(s[r]==<span class="string">&#x27; &#x27;</span>) r--;</span><br><span class="line">    <span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//3e-.3</span></span><br><span class="line">    <span class="type">int</span> res=<span class="built_in">FindE</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isSmallNum</span>(l, r, s))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res==l||res==r)&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isSmallNum</span>(l, res<span class="number">-1</span>, s)&amp;&amp;!<span class="built_in">isInt</span>(l,res<span class="number">-1</span>,s))&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isInt</span>(res+<span class="number">1</span>,r,s))&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_496. 下一个更大元素 I</title>
      <link href="/post/14061/"/>
      <url>/post/14061/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>$nums1$ 中数字 $x$ 的 <strong>下一个更大元素</strong> 是指 $x$ 在 $nums2$ 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 $x$ 大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 $nums1$ 和 $nums2$ ，下标从 <strong>0</strong> 开始计数，其中$nums1$ 是 $nums2$ 的子集。</p><p>对于每个 $0 &lt;= i &lt; nums1.length$ ，找出满足 $nums1[i] == nums2[j]$ 的下标 $j$ ，并且在 $nums2$ 确定 $nums2[j]$ 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 $-1$ 。</p><p>返回一个长度为 $nums1.length$ 的数组 $ans$ 作为答案，满足 $ans[i]$ 是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,1,2], nums2 = [1,3,4,2].</span><br><span class="line">输出：[-1,3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br><span class="line">- 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [2,4], nums2 = [1,2,3,4].</span><br><span class="line">输出：[3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000$</li><li>$0 &lt;= nums1[i], nums2[i] &lt;= 10^{4}$</li><li>$nums1$和$nums2$中所有整数 <strong>互不相同</strong></li><li>$nums1$ 中的所有整数同样出现在 $nums2$ 中</li></ul><p><strong>进阶：</strong>你可以设计一个时间复杂度为 $O(nums1.length + nums2.length)$ 的解决方案吗？</p><p>首先暴力写一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums2.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==nums2.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    nums1[i]=-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums2[j]==nums1[i])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=j+<span class="number">1</span>;k&lt;nums2.length;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nums2[k]&gt;nums1[i])&#123;</span><br><span class="line">                            nums1[i]=nums2[k];</span><br><span class="line">                            flag=<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(k==nums2.length-<span class="number">1</span>)&#123;</span><br><span class="line">                            nums1[i]=-<span class="number">1</span>;</span><br><span class="line">                            flag=<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>$O(N^3)$的时间复杂度，有点哈人，想想还有什么好方法？</p><p>看了题解，发现可以用栈来做，我实在想不出这道题和栈有什么关系？</p><p>看了看官方题解，发现和单调栈有关系。单调栈是啥？已经忘了，复习一下。</p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><a href="https://oi-wiki.org/ds/monotonous-stack/">来自OiWiki的定义</a></p><p>不学了，累了，明天再写。</p><hr><p>9.5更新:</p><p>单调栈内的元素是是按照一定的大小来排列的。<strong>由栈顶到栈底为序</strong>分为单调递增栈和单调递减栈。</p><p>对于一组数字序列，入单调递增栈，遍历：</p><ul><li>如果此时栈为空或者当前入栈元素&gt;栈顶元素，则入栈</li><li>如果入栈元素&lt;栈顶元素，则将当前栈顶元素弹出，继续进行此步骤，直到满足条件一</li></ul><p>这个过程，有什么作用呢？最典型的例子，我们可以通过此种方式找到某个数右边比它大的第一个数。</p><p>为什么？</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><h3 id="proof1-在原序列中，证明栈顶-b-的左边最小数是它所压的元素-a"><a href="#proof1-在原序列中，证明栈顶-b-的左边最小数是它所压的元素-a" class="headerlink" title="$proof1:$在原序列中，证明栈顶$b$的左边最小数是它所压的元素$a$"></a>$proof1:$在原序列中，证明栈顶$b$的左边最小数是它所压的元素$a$</h3><p>首先对于单调递减栈内，$b$上面压着$a$，在原序列中,有以下的事实:</p><script type="math/tex; mode=display">\begin{aligned}&0.\ b在a的右边\\&1.\ b>a(满足规则1)\\&2.\ b和a之间的数字nums都有:nums>a(如果nums<a，意味着a将被弹出，ab无法相遇)\\&3.\ 考察nums和b由于b需要与a相遇，意味着b需要使nums弹出，此时应该满足:b<nums\end{aligned}</script><p>因此对于序列$[…a…nums…b…]$有</p><ul><li>$a&lt;b$</li><li>$nums&gt;a$</li><li>$nums&gt;b$</li></ul><p>也就是说$b$左边最小的数就是$a$.</p><h3 id="proof2-在原序列中-证明新来元素-c-是当前栈顶-b-的右边最小元素"><a href="#proof2-在原序列中-证明新来元素-c-是当前栈顶-b-的右边最小元素" class="headerlink" title="$proof2:$在原序列中,证明新来元素$c$是当前栈顶$b$的右边最小元素"></a>$proof2:$在原序列中,证明新来元素$c$是当前栈顶$b$的右边最小元素</h3><p>在$proof1$基础上，我们继续遍历序列此时遇到一个待考察入栈元素$c$,他有以下两种情况:</p><ul><li>允许直接入栈,此时$c&gt;b$,相关证明已经在$proof1$阐述。</li><li>不允许直接入栈,此时$c&lt;b$</li></ul><p>如果触发第二种条件，对于$[…b…nums…c…]$,说明:</p><ul><li>$nums&gt;b$，否则b将会在$c$到来之前弹出</li><li>$nums&gt;c$，否则nums不会弹出，$c$也不会和$b$相遇</li></ul><p>也就是说$b$右边最小的数就是$c$</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>对于序列$[…a…nums1…b…nums2…c…]$,当使用单调递减栈对其遍历时，对于栈顶$b$,其所压元素$a$和代入考察入栈元素$c$有:</strong></p><ul><li><strong>$b$的最左边最小元素是$a$</strong></li><li><strong>如果$c$入栈使$b$弹出，则$b$右边最小元素是$c$</strong>.</li></ul><p>对于临界条件,比如遍历完成后剩余的栈元素，下面压着的是其左边最小的元素，右边最小的元素都不存在。</p><hr><p>回到这个题他说找下一个更大的数，我直接用单调递增栈来做好吧，既然是”下一个”也就是说我不用关系$proof1$中的相关结论。</p><p>直接写代码好吧:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack =<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums2.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()||stack.peek()&gt;nums2[i])&#123;</span><br><span class="line">                stack.add(nums2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">                    <span class="keyword">if</span>(num&lt;nums2[i])&#123;</span><br><span class="line">                        map.put(stack.pop(),nums2[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(num&gt;nums2[i]||stack.isEmpty())&#123;</span><br><span class="line">                        stack.add(nums2[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] answers = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">            answers[i]=map.getOrDefault(nums1[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码也是调试了一个小时才通好吧。</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_20. 有效的括号</title>
      <link href="/post/932/"/>
      <url>/post/932/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>给定一个只包括 <code>(</code>，<code>)</code>，<code>&#123;</code>，<code>&#125;</code>，<code>[</code>，<code>]</code> 的字符串 $s$ ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= s.length &lt;= 10^{4}$</li><li>$s$ 仅由括号 $’()[]{}’$ 组成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            Character character=s.charAt(i);  </span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()||(!(map.get(stack.peek()).equals(character))))&#123;</span><br><span class="line">                stack.push(character);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(map.get(stack.peek())==character)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次思路是这样的，就是维护一个栈，遍历字符串获取字符，如果栈空或者两者不匹配直接入栈，否则(即两者匹配)直接弹出栈顶。字符串遍历完毕后，如果栈空则是合法字符串，否则不合法。<br>我这样做时间和空间都只打败了百分之十几的玩家。想想还有哪里可以优化呢？</p><p>尝试把for循环优化一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">char</span> character:s.toCharArray())</span><br></pre></td></tr></table></figure><br>不行，只提高了一丢丢，急了。。。</p><p>把map给优化了，奶奶的用直接if判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> character:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">                stack.push(character);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==<span class="string">&#x27;(&#x27;</span>&amp;&amp;character==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==<span class="string">&#x27;&#123;&#x27;</span>&amp;&amp;character==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==<span class="string">&#x27;[&#x27;</span>&amp;&amp;character==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(character==<span class="string">&#x27;&#125;&#x27;</span>||character==<span class="string">&#x27;)&#x27;</span>||character==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>充分运用了<code>if-else if</code>的特性，随之而来的是代码可读性的下降，时空效率超过了50%玩家,满足了。。。</p><p>也就是说hashmap的取效率比if判断低，这个也是可以理解的，两者都是常数级$O(1)$的时间复杂度,但是hashmap是要计算hash值的，哈希冲突太多会退化到$O(N)$,而if判断只是简单的比较。</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_933. 最近的请求次数</title>
      <link href="/post/60702/"/>
      <url>/post/60702/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>写一个 $RecentCounter$ 类来计算特定时间范围内最近的请求。</p><p>请你实现 $RecentCounter$ 类：</p><ul><li>$RecentCounter()$ 初始化计数器，请求数为 0 。</li><li>$int ping(int t)$ 在时间 $t$ 添加一个新请求，其中 $t$ 表示以毫秒为单位的某个时间，并返回过去 $3000$ 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 $[t-3000, t]$ 内发生的请求数。</li></ul><p><strong>保证</strong> 每次对 $ping$ 的调用都使用比之前更大的 $t$ 值。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]</span><br><span class="line">[[], [1], [100], [3001], [3002]]</span><br><span class="line">输出：</span><br><span class="line">[null, 1, 2, 3, 3]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">RecentCounter recentCounter = new RecentCounter();</span><br><span class="line">recentCounter.ping(1);     // requests = [1]，范围是 [-2999,1]，返回 1</span><br><span class="line">recentCounter.ping(100);   // requests = [1, 100]，范围是 [-2900,100]，返回 2</span><br><span class="line">recentCounter.ping(3001);  // requests = [1, 100, 3001]，范围是 [1,3001]，返回 3</span><br><span class="line">recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= t &lt;= 10^{9}$</li><li>保证每次对 $ping$ 调用所使用的 $t$ 值都 <strong>严格递增</strong></li><li>至多调用 $ping$ 方法 $10^{4}$ 次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecentCounter</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecentCounter</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ping</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        queue.add(t);</span><br><span class="line">        <span class="keyword">while</span>(t-queue.peek()&gt;<span class="number">3000</span>)&#123;</span><br><span class="line">            queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目第一次看，看不懂，后来看懂了，还是不会，看了讲解视频顿悟。因为<code>ping t</code>是递增的，所以过去3000ms的边界到队尾的元素肯定是&lt;=3000ms的，我们只需要维护这段队列就可以了，ping请求发生时，我们让他入队，然后直接用当前时间减去队首，如果大于3000ms，就把队首元素出队，直到队首元素小于等于3000ms，然后返回队列的长度就可以了。</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_206. 反转链表</title>
      <link href="/post/39001/"/>
      <url>/post/39001/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>给你单链表的头节点 $head$ ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure></p><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure></p><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 $[0, 5000]$</li><li>$-5000 &lt;= Node.val &lt;= 5000$</li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> p.next;</span><br><span class="line">            p.next=pre;</span><br><span class="line">            pre=p;</span><br><span class="line">            p=next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个我一开始没做出来，看了题解才会，呜呜呜。</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_203. 移除链表元素</title>
      <link href="/post/2591/"/>
      <url>/post/2591/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>给你一个链表的头节点 $head$ 和一个整数 $val$ ，请你删除链表中所有满足 $Node.val == val$ 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure></p><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>列表中的节点数目在范围 $[0, 10^{4}]$ 内</li><li>$1 &lt;= Node.val &lt;= 50$</li><li>$0 &lt;= val &lt;= 50$</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p0</span> <span class="operator">=</span> p;</span><br><span class="line">        <span class="keyword">while</span>(p.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.next.val==val)&#123;</span><br><span class="line">                p.next=p.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p=p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p0.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里产生了疑惑，对于下面两行代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">p0</span> <span class="operator">=</span> p;</span><br></pre></td></tr></table></figure><br><code>p</code>在后续的操作中会改变，但是<code>p0</code>不会改变，这是为什么呢？两者是同一对象的引用啊。通过询问chatgpt4，得到了答案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是因为在Java中，引用变量（比如 p 和 p0）实际上存储的是对象在内存中的地址。当我们说 &quot;p 和 p0 是同一个对象的引用&quot; 时，我们的意思是它们存储的地址是一样的，也就是说它们都指向内存中的同一个位置。</span><br><span class="line"></span><br><span class="line">然而，当我们在代码中写 p = p.next; 时，我们实际上改变的是 p 存储的地址，而不是这个地址指向的对象本身。这行代码的意思是 &quot;让 p 存储 p.next 当前存储的地址&quot;。这就导致了 p 现在指向了链表中的下一个节点，而 p0 还是指向原来的节点。</span><br><span class="line"></span><br><span class="line">因此，p 的改变并不会影响 p0。因为 p 和 p0 是独立的变量，当我们改变 p 存储的地址时，p0 存储的地址并不会改变。这就是为什么在 while 循环后，p 和 p0 的值会不同。</span><br><span class="line"></span><br><span class="line">这是Java语言中对引用的处理方式，也是很多其他面向对象语言的通用规则。希望这个解释能帮助你理解。</span><br></pre></td></tr></table></figure><hr><p> 2024.2.5</p><p>使用c++<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* t = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;val==val)&#123;</span><br><span class="line">                t-&gt;next=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                t-&gt;next=cur;</span><br><span class="line">                t=t-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>这种方法使用了三个指针，<code>dummy</code>负责建立一个空头节点，<code>cur</code>负责遍历原链表，<code>t</code>负责随着<code>cur</code>的遍历而移动以建立新链表。这种方法是自然而然想到的。</p><p>还有一种方法，使用两个指针就可以，把<code>t</code>优化掉:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* cur=dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;</span><br><span class="line">                cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><strong>为什么使用<code>cur-&gt;next</code>而不是<code>cur</code>?</strong></p><p>我的理解是使用<code>cur-&gt;next</code>可以使<code>cur</code>节点在遍历的<strong>一开始</strong>可以有选择地回避一些不符合要求地节点，<code>cur</code>的作用是在遍历的同时穿起一个符合要求的链表。而<code>dummy</code>起到一个记录起点的作用。也是因为无法无脑落地的原因,所以使用它的<code>dummy.next</code>，</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_27. 移除元素</title>
      <link href="/post/64945/"/>
      <url>/post/64945/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>给你一个数组 $nums$ 和一个值 $val$，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 $val$ 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 $O(1)$ 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a> 修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$0 &lt;= nums.length &lt;= 100$</li><li>$0 &lt;= nums[i] &lt;= 50$</li><li>$0 &lt;= val &lt;= 100$</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=val)&#123;</span><br><span class="line">                nums[idx++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种类似的思路在283中也运用了。</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_283. 移动零</title>
      <link href="/post/14321/"/>
      <url>/post/14321/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>给定一个数组 $nums$，编写一个函数将所有 $0$ 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li>$1 &lt;= nums.length &lt;= 10^{4}$</li><li>$-2^{31} &lt;= nums[i] &lt;= 2^{31} - 1$</li></ul><p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ok=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-ok;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    nums[j]=nums[j+<span class="number">1</span>];    </span><br><span class="line">                &#125;</span><br><span class="line">                ok++;</span><br><span class="line">                nums[nums.length-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[idx++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=idx;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双指针:</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_485. 最大连续 1 的个数</title>
      <link href="/post/17812/"/>
      <url>/post/17812/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p><a href="https://leetcode.cn/problems/max-consecutive-ones/">485. 最大连续 1 的个数</a></p><p>给定一个二进制数组 $nums$ ， 计算其中最大连续 $1$ 的个数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,0,1,1,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,1,1,0,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^{5}$</li><li>$nums[i]$ 不是 $0$ 就是 $1$.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length)&#123;</span><br><span class="line">            <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;nums.length&amp;&amp;nums[i++]==<span class="number">1</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;j)&#123;</span><br><span class="line">                max=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我遇到了一个问题，就是内循环的条件<code>i&lt;nums.length&amp;&amp;nums[i++]==1</code>当我交换位置时，就会报数组越界的错误，我知道原因是因为<code>i++</code>的自增导致后面<code>i&lt;num.length</code>的判断失误，但是当我改成<code>nums[i++]==1&amp;&amp;i-1&lt;nums.length</code>还是会错。。。</p><p>直接写一个debug程序追踪一下这些变量打断点逐步观察这些变量，发现<code>nums[i++]</code>会越界。</p><p>结论就是条件表达式是自左而右依次进行的，第一个条件表达式的相关变量会影响后续表达式的值，对于<code>&amp;&amp;</code>，第一个表达式为<code>false</code>则后续条件表达式不会执行，这也正是题解所写那样写不会越界的原因。</p></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三-每日任务</title>
      <link href="/post/44917/"/>
      <url>/post/44917/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>四级没过,内心受到沉重打击，且临近毕业，碌碌无为，一事无成。因此发奋图强，以一雪前耻，以求无怨无悔。</p><h1 id="2023-08"><a href="#2023-08" class="headerlink" title="2023-08"></a>2023-08</h1><h2 id="2023-08-29"><a href="#2023-08-29" class="headerlink" title="2023-08-29"></a>2023-08-29</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>编译原理</p>            </div><!-- <div class='checkbox red times'><input type="checkbox" />            <p>checked</p>            </div> --><h2 id="2023-08-31"><a href="#2023-08-31" class="headerlink" title="2023-08-31"></a>2023-08-31</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>算法副本定档</p>            </div><blockquote><p>经过斟酌，我选择通过以分模块的方式来刷leetcode的题来提高和巩固我的算法能力</p></blockquote><h2 id="2023-09-01"><a href="#2023-09-01" class="headerlink" title="2023-09-01"></a>2023-09-01</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>leetcode-链表</p>            </div><h2 id="2023-09-02"><a href="#2023-09-02" class="headerlink" title="2023-09-02"></a>2023-09-02</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>leetcode-队列，栈</p>            </div><blockquote><p>单调栈知识欠缺</p><h2 id="2023-09-05"><a href="#2023-09-05" class="headerlink" title="2023-09-05"></a>2023-09-05</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>编译原理</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>单调栈问题解决</p>            </div><h2 id="2023-09-09"><a href="#2023-09-09" class="headerlink" title="2023-09-09"></a>2023-09-09</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>背单词</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>编译原理</p>            </div></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六级作文</title>
      <link href="/post/11144/"/>
      <url>/post/11144/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>In the modern era, social progress enables an increasingly number of people to fetch numerous infortmation, with more and more people using Internet. There is a necessity for us to have a clear mind to think critically,and to make rational chioce. The grounds and evidence for my position are outlined below.<br>First and foremost, it’s beyond dispute that we shoud have </p><h1 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h1><p>in modern eras, social progress enables an increasing number <strong> to </strong> with <strong><br>There is a necessity that </strong> . The grounds and evidence for my position are outlined below.</p><h1 id="谚语"><a href="#谚语" class="headerlink" title="谚语"></a>谚语</h1><p>Speaking of __ ，viewpoints differ voilently, but it’s ackonwledged by all that。 The grounds and evidence for my position are outlined below.</p><h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p><strong> . Speaking of this subject.viewpoint differ violently, but it’s acknowledged that </strong></p><p>万能理由：<br><strong>CHEMIST</strong><br>convience<br>health<br>environment<br>money<br>interpersonal/relationship<br>success work, studyo0</p><p>The Qinghai-Tibet Plateau, located in southwest of China, covers area of 2.3 millon kilometers square. With above the altitude of 4000 meters, it is enjoying repution of “World Roof”. </p></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringBoot解决跨域请求</title>
      <link href="/post/5998/"/>
      <url>/post/5998/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当我用js的axios库向指定api发送请求获取数据时常常会遇到跨域请求问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Access</span> to <span class="title class_">XMLHttpRequest</span> at <span class="string">&#x27;https://www.**&#x27;</span> <span class="keyword">from</span> origin <span class="string">&#x27;http://127.0.0.1:5501&#x27;</span> has been blocked by <span class="variable constant_">CORS</span> <span class="attr">policy</span>: <span class="title class_">No</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>我尝试使用springboot代理此次请求。</p><p>编写一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">proxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPic</span><span class="params">(String kwd)</span>&#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        RestTemplate restTemplate=<span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">        String url1=<span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br><span class="line">        Map&lt;String, String&gt;params=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;p&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        HttpEntity&lt;Map&lt;String, String&gt;&gt; entity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(params, headers);</span><br><span class="line">        String url=<span class="string">&quot;https://www.pixivs.cn/ajax/search/artworks/&quot;</span>+kwd;</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        headers.add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>);</span><br><span class="line">        String res= restTemplate.exchange(url,HttpMethod.GET,entity ,String.class).getBody();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止谷歌重定向</title>
      <link href="/post/62924/"/>
      <url>/post/62924/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>我用的是谷歌的 Chrome 浏览器，默认的 Google 搜索引擎，用的是 Google.com 的网址，可不知咋的，这两天所有的搜索结果都转到了 Google.com.hk 上去了。</p><p>在 Google 首页及搜索设置中找了一圈，也没能把它改回为Google.com 的搜索结果。只好上网寻找解决办法，发现其实相当简单，不用其它类似文章写的那么复杂。</p><p>原理：只要告诉 <strong>Google</strong>.com 不要进行区域重定向（No Country Redirection，简称NCR）。</p><p>具体做法：在网址栏打入：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.google.com/ncr</span><br></pre></td></tr></table></figure><br>然后回车即可。</p><p>还没有改过来？哦，你忘了最重要的一步，即在完成上步操作后，立即重启 Google Chrome 浏览器。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 实用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java爬虫——Jsoup</title>
      <link href="/post/dbcc2e41/"/>
      <url>/post/dbcc2e41/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="Jsoup介绍"><a href="#Jsoup介绍" class="headerlink" title="Jsoup介绍"></a>Jsoup介绍</h1><p><a href="https://jsoup.org/">官网</a></p><h1 id="下载和使用"><a href="#下载和使用" class="headerlink" title="下载和使用"></a>下载和使用</h1><p><a href="https://jsoup.org/download">下载jar包</a></p><p>通过添加Libraries的方式引入：</p><p>1、首先在根目录下创建一个 libs 的目录</p><p>2、打开 File -&gt; Project Structure</p><p>3、单击 Libraries -&gt; “+” -&gt; “Java” -&gt; 选择我们导入的项目主目录，点击OK</p></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYDB</title>
      <link href="/post/4/"/>
      <url>/post/4/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>MYDB 分为后端和前端，前后端通过 socket 进行交互。前端（客户端）的职责很单一，读取用户输入，并发送到后端执行，输出返回结果，并等待下一次输入。MYDB 后端则需要解析 SQL，如果是合法的 SQL，就尝试执行并返回结果。不包括解析器，MYDB 的后端划分为五个模块，每个模块都又一定的职责，通过接口向其依赖的模块提供方法。五个模块如下：</p><ol><li>Transaction Manager（TM）</li><li>Data Manager（DM）</li><li>Version Manager（VM）</li><li>Index Manager（IM）</li><li>Table Manager（TBM）<br><img src="https://shinya.click/images/mydb0.jpg" alt=""></li></ol><p>创建数据库目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">exec</span>:java <span class="string">&#x27;-Dexec.mainClass=&quot;top.guoziyang.mydb.backend.Launcher&quot;&#x27;</span> <span class="string">&#x27;-Dexec.args=&quot;-create F:\\WorkSpace\JavaWeb\MYDB\db_loc\db&quot;&#x27;</span></span><br></pre></td></tr></table></figure><br>启动数据库服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">exec</span>:java <span class="string">&#x27;-Dexec.mainClass=&quot;top.guoziyang.mydb.backend.Launcher&quot;&#x27;</span> <span class="string">&#x27;-Dexec.args=&quot;-open F:\\WorkSpace\JavaWeb\MYDB\db_loc\db&quot;&#x27;</span></span><br></pre></td></tr></table></figure><br>这时数据库服务就已经启动在本机的 9999 端口。重新启动一个终端，执行以下命令启动客户端连接数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">exec</span>:java <span class="string">&#x27;-Dexec.mainClass=&quot;top.guoziyang.mydb.client.Launcher&quot;&#x27;</span></span><br></pre></td></tr></table></figure></p><h1 id="Transaction-Manager（TM）"><a href="#Transaction-Manager（TM）" class="headerlink" title="Transaction Manager（TM）"></a>Transaction Manager（TM）</h1><blockquote><p>TM 通过维护 XID 文件来维护事务的状态，并提供接口供其他模块来查询某个事务的状态。</p></blockquote><p>每个事务都有一个XID，这个ID<strong>唯一标识</strong>了这个事务。从1开始。并<strong>特殊</strong>规定0是一个超级事务，当一些操作想在没有申请事务的情况下进行，那么可以将操作的 XID 设置为 0。XID 为 0 的事务的状态永远是 committed。</p><p>TransactionManager 维护了一个 XID 格式的文件，用来记录各个事务的状态。MYDB 中，每个事务都有下面的<strong>三种状态</strong>：</p><ol><li>active，正在进行，尚未结束</li><li>committed，已提交</li><li>aborted，已撤销（回滚）</li></ol><ul><li><p>TransactionManager 负责维护一个 XID 格式的文件，用于记录各个事务的状态。</p></li><li><p>XID 文件中为每个事务分配了一个字节的空间，用来保存其状态。</p></li><li><p>XID 文件的头部保存了一个 8 字节的数字，记录了这个 XID 文件管理的事务的个数。</p></li><li><p>因此，事务 XID 在文件中的状态存储在 (XID-1)+8 字节的位置处，其中 XID-1 是因为 XID 0（超级事务）的状态不需要记录。<br><img src="https://pic.zjcspace.xyz/b/202407211936467.png" alt=""></p></li></ul><p>在<code>TransactionManager</code>中提供了一些接口供其他模块调用，用来创建事务和查询事务的状态；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">begin</span><span class="params">()</span>; <span class="comment">//开启事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">long</span> xid)</span>;  <span class="comment">//提交事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abort</span><span class="params">(<span class="type">long</span> xid)</span>;   <span class="comment">//撤销或回滚事务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isActive</span><span class="params">(<span class="type">long</span> xid)</span>; <span class="comment">//查询一个事务的状态是否正在运行</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCommitted</span><span class="params">(<span class="type">long</span> xid)</span>;  <span class="comment">//查询一个事务的状态是否已经提交</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAborted</span><span class="params">(<span class="type">long</span> xid)</span>;    <span class="comment">//查询一个事务的状态是否撤销或回滚</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;   <span class="comment">//关闭事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何实现TM？"><a href="#如何实现TM？" class="headerlink" title="如何实现TM？"></a>如何实现TM？</h2><p>定义常量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XID文件头长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEN_XID_HEADER_LENGTH</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 每个事务的占用长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">XID_FIELD_SIZE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 事务的三种状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_ACTIVE</span>   <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_COMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_ABORTED</span>  <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 超级事务，永远为commited状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SUPER_XID</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// XID 文件后缀</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">XID_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.xid&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>文件读写都采用了 NIO 方式的 FileChannel，读写方式都和传统 IO 的 Input/Output Stream 都有一些区别，不过区别主要是接口方面，熟悉使用即可。</p><p>TM在初始化时，会检测XID文件的合法性，具体是通过检测头信息的期望长度和文件的实际长度做对比，如果不同，说明XID文件不合法，抛出异常。<br>对于校验没有通过的，会直接通过 panic 方法，强制停机。在一些基础模块中出现错误都会如此处理，无法恢复的错误只能直接停机。<br><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/22796888/1713080408220-5daf7b9f-4683-4a73-80eb-23e5aa8213df.jpeg#averageHue=%23fdfdfc&amp;clientId=u7a44b2f6-3158-4&amp;from=paste&amp;height=769&amp;id=ua47dde84&amp;originHeight=961&amp;originWidth=667&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=38141&amp;status=done&amp;style=none&amp;taskId=ua7fd9621-a4b8-4741-8943-b0e83550159&amp;title=&amp;width=533.6" alt="checkXidCounter.jpg"><br>然后是一些事务xid的相关api:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionManagerImpl</span> <span class="keyword">implements</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// XID文件头长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEN_XID_HEADER_LENGTH</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 每个事务的占用长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">XID_FIELD_SIZE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务的三种状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_ACTIVE</span>   <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_COMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FIELD_TRAN_ABORTED</span>  <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超级事务，永远为commited状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SUPER_XID</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">XID_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.xid&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> RandomAccessFile file;</span><br><span class="line">    <span class="keyword">private</span> FileChannel fc;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> xidCounter;</span><br><span class="line">    <span class="keyword">private</span> Lock counterLock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，获得使用的文件指针和文件通道</span></span><br><span class="line">    TransactionManagerImpl(RandomAccessFile raf, FileChannel fc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.file = raf;</span><br><span class="line">        <span class="built_in">this</span>.fc = fc;</span><br><span class="line">        counterLock = <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        checkXIDCounter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查XID文件是否合法</span></span><br><span class="line"><span class="comment">     * 读取XID_FILE_HEADER中的xidcounter，根据它计算文件的理论长度，对比实际长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkXIDCounter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化文件长度</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">fileLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得文件长度,RandomAccessFile在构造函数中赋值</span></span><br><span class="line">            fileLen = file.length();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            <span class="comment">// 读取过程出错，则抛出BadXIDFileException错误</span></span><br><span class="line">            Panic.panic(Error.BadXIDFileException);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果文件长度小于XID头部长度，抛出BadXIDFileException错误</span></span><br><span class="line">        <span class="keyword">if</span>(fileLen &lt; LEN_XID_HEADER_LENGTH) &#123;</span><br><span class="line">            Panic.panic(Error.BadXIDFileException);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在内存中分配一个长度为XID头部长度的ByteBuffer</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(LEN_XID_HEADER_LENGTH);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将文件通道的位置设置为0，从文件起始位置读取</span></span><br><span class="line">            fc.position(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 尝试将数据从通道中读取并写入到缓冲区 buf</span></span><br><span class="line">            fc.read(buf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 如果读取过程出现异常，抛出错误</span></span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把header的8字节转化为字节数组然后进一步解析为Long类型</span></span><br><span class="line">        <span class="built_in">this</span>.xidCounter = Parser.parseLong(buf.array());</span><br><span class="line">        <span class="comment">// 根据header的Xid条目大小判断，是否和文件实际长度符合</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> getXidPosition(<span class="built_in">this</span>.xidCounter + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(end != fileLen) &#123;</span><br><span class="line">            Panic.panic(Error.BadXIDFileException);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据事务xid取得其在xid文件中对应的位置</span></span><br><span class="line">    <span class="comment">// xid!=0，因为它是超级事务。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getXidPosition</span><span class="params">(<span class="type">long</span> xid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LEN_XID_HEADER_LENGTH + (xid-<span class="number">1</span>)*XID_FIELD_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新xid事务的状态为status</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateXID</span><span class="params">(<span class="type">long</span> xid, <span class="type">byte</span> status)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得xid条目应该插入的位置</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> getXidPosition(xid);</span><br><span class="line">        <span class="type">byte</span>[] tmp = <span class="keyword">new</span> <span class="title class_">byte</span>[XID_FIELD_SIZE];</span><br><span class="line">        <span class="comment">// 在当前item存储该事务xid对应状态，该id不需要存储，因为其在文件位置隐含了xid</span></span><br><span class="line">        tmp[<span class="number">0</span>] = status;</span><br><span class="line">        <span class="comment">// 将字节数组包装到缓冲区中。</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.wrap(tmp);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入磁盘</span></span><br><span class="line">            fc.position(offset);</span><br><span class="line">            fc.write(buf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 强制将文件通道中的所有未写入的数据写入到磁盘</span></span><br><span class="line">            fc.force(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将XID加一，并更新XID Header</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">incrXIDCounter</span><span class="params">()</span> &#123;</span><br><span class="line">        xidCounter ++;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.wrap(Parser.long2Byte(xidCounter));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fc.position(<span class="number">0</span>);</span><br><span class="line">            fc.write(buf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fc.force(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始一个事务，并返回XID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 锁定计数器，防止并发问题</span></span><br><span class="line">        counterLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//自增xid</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> xidCounter + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 写入</span></span><br><span class="line">            updateXID(xid, FIELD_TRAN_ACTIVE);</span><br><span class="line">            incrXIDCounter();</span><br><span class="line">            <span class="keyword">return</span> xid;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            counterLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交XID事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">long</span> xid)</span> &#123;</span><br><span class="line">        updateXID(xid, FIELD_TRAN_COMMITTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回滚XID事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abort</span><span class="params">(<span class="type">long</span> xid)</span> &#123;</span><br><span class="line">        updateXID(xid, FIELD_TRAN_ABORTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测XID事务是否处于status状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkXID</span><span class="params">(<span class="type">long</span> xid, <span class="type">byte</span> status)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> getXidPosition(xid);</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.wrap(<span class="keyword">new</span> <span class="title class_">byte</span>[XID_FIELD_SIZE]);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fc.position(offset);</span><br><span class="line">            fc.read(buf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.array()[<span class="number">0</span>] == status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isActive</span><span class="params">(<span class="type">long</span> xid)</span> &#123;</span><br><span class="line">        <span class="comment">// 都会检查是否为超级事务</span></span><br><span class="line">        <span class="keyword">if</span>(xid == SUPER_XID) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> checkXID(xid, FIELD_TRAN_ACTIVE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCommitted</span><span class="params">(<span class="type">long</span> xid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xid == SUPER_XID) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> checkXID(xid, FIELD_TRAN_COMMITTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAborted</span><span class="params">(<span class="type">long</span> xid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xid == SUPER_XID) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> checkXID(xid, FIELD_TRAN_ABORTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fc.close();</span><br><span class="line">            file.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Panic.panic(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TM模块主要用于<strong>管理事务，包括开始、提交、回滚事务</strong>，以及检查事务的状态。在类中需要定义一些常量来管理事务如<code>LEN_XID_HEADER_LENGTH、XID_FIELD_SIZE、FIELD_TRAN_ACTIVE、FIELD_TRAN_COMMITTED、FIELD_TRAN_ABORTED、SUPER_XID和XID_SUFFIX</code>，分别表示XID文件头长度、每个事务的占用长度、事务的三种状态、超级事务、XID文件后缀。 还需定义一个<code>RandomAccessFile</code> 类型的<code>file</code>和一个<code>FileChannel</code>类型的<code>fc</code>，用于操作<code>XID</code>文件。还有一个<code>xidCounter</code>用于记录事务的数量，以及一个Lock类用于保证线程安全。然后会在构造函数中给file和fc赋值，然后调用<code>checkXIDCounter</code>方法检查<code>XID</code>文件是否合法。 <code>**begin**</code>方法用于开始一个新的事务，<code>**commit**</code>方法用于提交事务，<code>**abort**</code>方法用于回滚事务。这三个方法内部都会调用<code>**updateXID**</code>方法，将事务ID和事务状态写入到XID文件中。<code>**begin**</code>还会调用另外一个<code>**incrXIDCounter**</code>方法，用于将XID +1并更新XID Header。 <code>isActive、isCommitted</code>和<code>isAborted</code>方法用于检查事务是否处于活动、已提交或已回滚状态。这三个方法内部都会调用checkXID方法，检查XID文件中的事务状态是否与给定的状态相等；close方法用于关闭文件通道和文件。</p><h1 id="Data-Manager（DM）"><a href="#Data-Manager（DM）" class="headerlink" title="Data Manager（DM）"></a>Data Manager（DM）</h1><p>上层模块和文件系统之间的一个抽象层</p><p>职能:</p><ul><li>向下直接读写文件</li><li>向上提供数据的包装DataItem</li><li>日志功能<br>无论是向上还是向下，DM 都提供了一个缓存的功能，用内存操作来保证效率。</li></ul><p>内存淘汰算法的选择：</p><ul><li>LRU<br>LRU 在缓存满时自动驱逐最少使用的数据，可能导致上层模块无法强制将关键数据刷回数据源，造成数据一致性问题。<br>如何放到缓存，如果此时缓存满了，又会驱逐新的资源，造成缓存抖动。<br>当然可以添加额外信息解决，比如添加最后修改时间，和驱逐时间<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- **记录最后修改时间**：每次资源被修改时，记录其最后修改时间。</span><br><span class="line">- **记录驱逐时间**：当资源被驱逐出缓存时，记录其驱逐时间。</span><br><span class="line">- **判断是否回源**：</span><br><span class="line">    - 当上层模块需要强制将资源刷回数据源时，检查资源的最后修改时间和驱逐时间。</span><br><span class="line">    - 如果最后修改时间早于驱逐时间，说明资源在驱逐前已经修改过，需要进行回源操作。</span><br><span class="line">    - 如果最后修改时间晚于驱逐时间，说明资源在驱逐后未被修改，可以避免无效回源。</span><br></pre></td></tr></table></figure></li></ul><ul><li>引用计数<br>问题的根源还是，LRU 策略中，资源驱逐不可控，上层模块无法感知。而引用计数策略正好解决了这个问题，只有上层模块主动释放引用，缓存在确保没有模块在使用这个资源了，才会去驱逐资源。</li></ul><p>这就是引用计数法了。增加了一个方法 <code>release(key)</code>，用于在上册模块不使用某个资源时，释放对资源的引用。当引用归零时，缓存就会驱逐这个资源。</p><p>同样，在缓存满了之后，引用计数法无法自动释放缓存，此时应该直接报错（和 JVM 似的，直接 OOM）</p><h2 id="如何实现DM"><a href="#如何实现DM" class="headerlink" title="如何实现DM"></a>如何实现DM</h2><h3 id="引用计数缓存框架"><a href="#引用计数缓存框架" class="headerlink" title="#  引用计数缓存框架"></a>#  引用计数缓存框架</h3><p>首先定义一个<code>AbstractCache&lt;T&gt;</code>抽象类，定义两个抽象方法，留给实现类实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当资源不在缓存时的获取行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title function_">getForCache</span><span class="params">(<span class="type">long</span> key)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当资源被驱逐时的写回行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">releaseForCache</span><span class="params">(T obj)</span>;</span><br></pre></td></tr></table></figure></p><ol><li><p><code>**private HashMap&lt;Long, T&gt; cache;**</code>：这是一个 <strong>HashMap</strong> 对象，用于存储实际缓存的数据。键是资源的唯一标识符（通常是资源的ID或哈希值），值是缓存的资源对象（类型为 <strong>T</strong>）。在这个缓存框架中，<strong>cache</strong> 承担了普通缓存功能，即存储实际的资源数据。</p></li><li><p><code>**private HashMap&lt;Long, Integer&gt; references;**</code>：这是另一个 <strong>HashMap</strong> 对象，用于记录每个资源的引用个数。键是资源的唯一标识符，值是一个整数，表示该资源当前的引用计数。引用计数表示有多少个模块或线程正在使用特定的资源。通过跟踪引用计数，可以确定何时可以安全地释放资源。</p></li><li><p><code>**private HashMap&lt;Long, Boolean&gt; getting;**</code>：这是第三个 <strong>HashMap</strong> 对象，用于记录哪些资源当前正在从<strong>数据源</strong>获取中。键是资源的唯一标识符，值是一个布尔值，表示该资源是否正在被获取中。在多线程环境下，当某个线程尝试从数据源获取资源时，需要标记该资源正在被获取，以避免其他线程重复获取相同的资源。这个 <strong>getting</strong> 映射用于处理多线程场景下的并发访问问题。</p></li></ol><p>方法梗概,既然是缓存框架，肯定有获得缓存的内容，释放缓存，还有安全关闭缓存</p><ul><li><code>protected T get(long key)</code>获取指定id的资源，进入一个轮询状态，尝试从缓存获取，首先判断缓存中是否有线程正在从磁盘中获取，如果有则sleep一段时间重新获取，(如果直接获取会导致会导致<strong>重复读取</strong>耗费io资源，因为多个线程读取都会写到同一个key；<strong>数据不一致</strong>，多个线程可能获取到不同版本的资源，导致数据不一致)。确保该资源没有其他线程从磁盘读取后，判断缓存是否存在，如果存在直接返回，不存在从磁盘读取。</li><li><code>protected void release(long key)</code>释放指定资源，如果引用为0，写回磁盘，否则，ref-1.</li><li><p><code>protected void close()</code>关闭缓存，写回所有资源到缓存。</p><h3 id="数据页的缓存与管理"><a href="#数据页的缓存与管理" class="headerlink" title="数据页的缓存与管理"></a>数据页的缓存与管理</h3><p>缓存单项结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageImpl</span> <span class="keyword">implements</span> <span class="title class_">Page</span> &#123;  </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageNumber;  <span class="comment">// 该页的页号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] data;  <span class="comment">// 实际数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> dirty;  <span class="comment">// 是否为脏数据</span></span><br><span class="line"><span class="keyword">private</span> Lock lock;  <span class="comment">// 页锁</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> PageCache pc; <span class="comment">// 缓存页的操作接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PageCache定义了Page的一些操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_SIZE</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">newPage</span><span class="params">(<span class="type">byte</span>[] initData)</span>;</span><br><span class="line">Page <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> pgno)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Page page)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">truncateByBgno</span><span class="params">(<span class="type">int</span> maxPgno)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getPageNumber</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flushPage</span><span class="params">(Page pg)</span>;</span><br></pre></td></tr></table></figure></li><li><p>[x] 暂停缓存页的相关操作 ✅ 2024-07-28</p></li></ul><h3 id="数据页管理"><a href="#数据页管理" class="headerlink" title="数据页管理"></a>数据页管理</h3><p>第一页不用来存储数据，用来启动检查，原理：每次启动在100-107字节随机生成。如果数据库正常关闭，这些字节会拷贝到108-115。如是数据库启动时都会判断两处字节是否对应，如果不一致说明上次异常关闭，需要执行数据恢复流程。</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/post/33757/"/>
      <url>/post/33757/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h1><p><strong>本地仓库配置</strong>：</p><p><code>conf-&gt;settings.xml</code>里设置本地仓库存储路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并在IDEA设置中设置其主目录路径，配置文件路径和仓库路径。</p><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><p>java项目的修改需要重启项目，开发效率低很麻烦，可以进行热部署。</p><p>Spring Boot提供了<strong>spring-boot-devtools</strong>组件，使得无须手动重启SpringBoot应用即可重新编译、启动项目，大大缩短编译启动的时间。</p><p>devtools会监听classpath下的文件变动，触发Restart类加载器重新加载该类，从而实现类文件和属性文件的热部署。</p><p>并不是所有的更改都需要重启应用(如静态资源、视图模板)，可以通过设置spring.devtools.restart.exclude属性来指定一些文件或目录的修改不用重启应用。</p><ul><li><p><strong>引入spring-boot-devtools</strong>：</p><p>  加入依赖   在<code>pom.xml</code>将以下标签加入到<code>&lt;dependencies&gt;ADD_IT&lt;/dependencies&gt;</code>:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后同步依赖，如果没有会下载。</p></li><li><p>在<code>application.properties</code>中配置<code>devtools</code>:</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热部署生效</span></span><br><span class="line"><span class="attr">spring.devtools.restart.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 监听目录</span></span><br><span class="line"><span class="attr">spring.devtools.restart.additional-paths</span>=<span class="string">src/main/java</span></span><br></pre></td></tr></table></figure></li><li><p>在设置中找到<code>构建执行部署-&gt;编译器</code>勾选<code>自动构建项目</code></p></li><li><p>在设置中找到<code>高级设置-&gt;编译器</code>勾选<code>即使开发的应用程序当前正在运行，也允许自动make启动</code></p></li></ul><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><ul><li>Spring Boot将传统Web开发的mvc、json、tomcat等框架整合，提供了spring-boot-starter-web组件，简化了Web应用配置。</li><li>创建SpringBoot项目勾选Spring Web选项后，会自动将spring-boot-starter-web组件加入到项目中</li><li>spring-boot-starter-web启动器主要包括web、webmvc、json、tomcat等基础依赖组件，作用是提供Web开发场景所需的所有底层依赖。</li><li>webmvc为Web开发的基础框架，json为JSON数据解析组件，tomcat为自带的容器依赖。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121029003.png" alt="image-20230712102857157"></p><p><strong><code>@RestController</code>会将对象数据以<code>json</code>的形式返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由映射：</p><ul><li>RequestMapping注解主要负责URL的路由映射。它可以添加在Controller<strong>类</strong>或者具体的<strong>方法</strong>上。</li><li>如果添加在Controller类上，则这个Controller中的所有路由映射都将会映射规则，如果添加在方法上，则只对当前方法生效。</li><li>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则用的属性参数如下:<ul><li>value:请求URL的路径，支持URL模板、正则表达式</li><li>method: HTTP请求方法</li><li>consumes:请求的媒体类型(Content-Type)，如application/jsonproduces:响应的媒体类型</li><li>headers:请求的参数及请求头的值</li></ul></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307301019158.png" alt="image-20230730101858020"></p><h1 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h1><p>使用IDEA创建Spring Boot项目，会默认创建出classpath:/static/目录，静态资源一般放在这个目录下即可。<br>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略。<br>在application.properties中直接定义过滤规则和静态资源位置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/static</span></span><br></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121054747.png" alt="image-20230712105412775"></p><p>Spring Boot工程嵌入的tomcat限制了请求的文件大小，每个文件的配置最大为1Mb，单次请求的文件的总数不能大于10Mb。<br>要更改这个默认值需要在配置文件（如application.properties）中加入两个配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure><p>一个文件上传的demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">uploadController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(String nickname, MultipartFile photo, HttpServletRequest httpServletRequest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 打印一系列值</span></span><br><span class="line">        System.out.println(nickname);</span><br><span class="line">        System.out.println(photo.getOriginalFilename()+photo.getSize());</span><br><span class="line">        System.out.println(photo.getContentType());</span><br><span class="line">        <span class="comment">//获取/upload目录的物理路径</span></span><br><span class="line">        String path=httpServletRequest.getServletContext().getRealPath(<span class="string">&quot;/upload/&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        saveFile(photo,path);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">saveFile</span><span class="params">(MultipartFile photo, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        File dir= <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(path+photo.getOriginalFilename());</span><br><span class="line">        System.out.println(file.getPath());</span><br><span class="line">        <span class="comment">// 保存到指定文件</span></span><br><span class="line">        photo.transferTo(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器在Web系统中非常常见，对于某些全局统一的操作，我们可以把它提取到拦截器中实现。总结起来，拦截器大致有以下几种使用场景:</p><ul><li><strong>权限检查</strong>:如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面。</li><li><strong>性能监控</strong>:有时系统在某段时间莫名其妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时</li><li><strong>通用行为</strong>:读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有提取Locale、Theme信息等，只要是多个处理程序都需要的，即可使用拦截器实现。</li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121235074.png" alt="image-20230712123537213"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307121237054.png" alt="image-20230712123743141"></p><p>拦截器demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoginInterceptor&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).addPathPatterns(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h1><p>api接口文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加s wagger2相关功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加swagger-ui相关功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//告诉Spring容器，这个类是一个配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">//启用Swagger2功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//com包下所有API都交给Swagger2管理</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//API文档页面显示信息</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;演示项目API&quot;</span>)<span class="comment">//标题</span></span><br><span class="line">                .description(<span class="string">&quot;学习Swagger2的演示项目&quot;</span>)<span class="comment">//描述</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mvc配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1><p>加入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatisPlus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysq1驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据连接池druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="comment"># 数据库连接池技术</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"># 数据库驱动</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/qq?useSSL=false</span></span><br><span class="line"><span class="comment"># 账号密码</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">111111</span></span><br><span class="line"><span class="comment"># 日志输出格式</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>在主启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com/example/first_demo/Mapper&quot;)</span></span><br></pre></td></tr></table></figure><p>在mapper接口实现查询数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">qqMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM qq WHERE qq=3417759874&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">Select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Controller调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">qqController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> qqMapper qqMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list=qqMapper.Select();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>CURD操作数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">userMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user va1ues(#&#123;id&#125; , #&#123;username&#125; ,#&#123;password&#125; ,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username &#125; , password=#&#123;password&#125; ,birthday=#&#123;birthday&#125; where id=#&#123;id]&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="meta">@sel1ect( &quot;select * from user where id=#&#123;id&#125;&quot;)</span>User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="meta">@select(&quot;select * from user&quot;)</span>List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>特性，在plus版本上述也可省略:他会自动寻找，<strong>前提是实体和表名一致</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface qqMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h2><div class="table-container"><table><thead><tr><th>注解</th><th>功能</th></tr></thead><tbody><tr><td>@Insert</td><td>实现插入</td></tr><tr><td>@Update</td><td>实现更新</td></tr><tr><td>@Delete</td><td>实现删除</td></tr><tr><td>@Select</td><td>实现查询</td></tr><tr><td>@Result</td><td>实现结果集封装</td></tr><tr><td>@Results</td><td>可以与@Result一起使用，封装多个结果集</td></tr><tr><td>@one</td><td>实现一对一结果集封装</td></tr><tr><td>@Many</td><td>实现一对多结果集封装</td></tr></tbody></table></div><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>demo1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">link</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addC&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">!flag</span>&gt;</span>消失<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;u in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span>&#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(u,i) in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span>&#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;,&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">img</span>:<span class="string">&#x27;./107702902_p0_master1200.jpg&#x27;</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">user_List</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">addC</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">flag</span>=!<span class="variable language_">this</span>.<span class="property">flag</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p><code>v-html</code>会渲染html标签</p></li><li><p><code>:属性</code>用于给html标签的属性赋值，原型是<code>v-bind:属性</code></p></li><li><p><code>v-on:click</code>是Vue对<code>button</code>标签封装的用于监听事件的新属性，可以简写为<code>@click</code></p></li><li><p><code>v-if</code>用于标签的取舍<code>v-if=true</code>保留，否则取消，同样的还有<code>v-else-if</code>,<code>v-else</code>,一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 或者 <code>v-else-if</code> 元素后面，否则它将不会被识别。</p></li><li><p><code>`v-for</code> 是 Vue.js 框架中的一个指令，用于在模板中循环渲染列表数据。使用 <code>v-for</code>，您可以遍历一个数组或对象，并为每个元素或属性生成对应的 HTML 元素或组件。可使用<code>u in user_List</code>和<code>(u,i) in user_List</code>两种风格来遍历。需要注意的是，为了优化渲染性能，每个循环项都应该有一个唯一的 <code>key</code> 属性。这可以帮助 Vue.js 更好地跟踪和更新列表中的元素。</p></li><li><p><code>v-model</code>页面&lt;—-&gt;属性，<code>:value</code>页面&lt;—-属性,需要给列表加<code>key</code>否则在列表的元素状态不会绑定</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;u in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> &#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(u,i) in user_List&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;u.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;u.name&#125;&#125;,&#123;&#123;u.age&#125;&#125;,&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">message</span>: <span class="string">&#x27;Hello Vuzze!&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">img</span>:<span class="string">&#x27;107702902_p0_master1200.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">flag</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">link</span>: <span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;链接&lt;/a&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">user_List</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">id</span>:<span class="number">1</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">id</span>:<span class="number">2</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="attr">id</span>:<span class="number">3</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">nextId</span>:<span class="number">4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="title function_">addC</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">flag</span>=!<span class="variable language_">this</span>.<span class="property">flag</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="title function_">addUser</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">user_List</span>.<span class="title function_">unshift</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="variable language_">this</span>.<span class="property">name</span>,<span class="string">&quot;age&quot;</span>:<span class="variable language_">this</span>.<span class="property">age</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">nextId</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307131734863.png" alt="image-20230713173436881"></p><p>安装指令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p>这一指令将会安装并执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具。你将会看到一些诸如 TypeScript 和测试支持之类的可选功能提示：</p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ul><li>在<code>./components</code>创建自己的组件<code>my.vue</code></li><li>将<code>my.vue</code>导入到<code>App.vue</code></li><li><code>npm run dev</code></li></ul><h2 id="组件间的传值"><a href="#组件间的传值" class="headerlink" title="组件间的传值"></a>组件间的传值</h2><p>组件可以由内部的Data提供数据，也可以由父组件通过<code>prop</code>的方式传值。兄弟组件之间可以通过<code>Vuex</code>等统─数据源提供数据共享。</p><p>在<code>App.vue</code>和<code>my.vue</code>传值：</p><ul><li><p>在<code>App.vue</code>导入</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> myy <span class="keyword">from</span> <span class="string">&#x27;./components/my.vue&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注册</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="title class_">HelloWorld</span>,</span><br><span class="line">      <span class="title class_">TheWelcome</span>,</span><br><span class="line">      myy</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;爱来自App.vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>  现在在<code>App.vue</code>中可以使用<code>my.vue</code></p></li><li><p>在<code>my.vue</code>添加</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  即可在<code>App.vue</code>导入后作为属性使用</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;myy titlse=<span class="string">&quot;哈哈哈&quot;</span> ccc=<span class="string">&quot;大大&quot;</span>&gt; &lt;/myy&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="ElementUi"><a href="#ElementUi" class="headerlink" title="ElementUi"></a>ElementUi</h1><ul><li><p>安装</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure></li><li><p>导入<code>main.js</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用in<code>main.js</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">//一定要放最后挂载</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>导入样例(以表格为例):</p><ul><li>找到源码,放入<code>Table.vue</code></li><li>在<code>App.vue</code>导入，引用，注册，正常显示</li></ul></li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>在实际项目开发中，前端页面所需要的数据往往需要从服务器端获取，这必然涉及与服务器的通信。<br>Axios是一个基于promise 网络请求库，作用于node.js和浏览器中。<br>Axios在浏览器端使用XMLHttpRequests发送网络请求，并能自动完成JSON数据的转换。</p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><ul><li><p>导入<code>main.js</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li><p>GET请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>POST请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>生命周期</strong>:Vue.js 是一个基于组件的前端框架，它有一套生命周期钩子函数，<strong>用于在组件的不同阶段执行特定的代码</strong>。这些生命周期钩子函数允许您    在组件创建、更新和销毁的不同时间点执行自定义逻辑。</p><ol><li><code>beforeCreate</code>：在实例初始化之后、数据观测 (data observation) 和事件配置 (event/watcher setup) 之前被调用。在这个阶段，组件实例还没有被创建，因此无法访问到组件的数据和方法。</li><li><code>created</code>：在实例创建完成后被调用。在这个阶段，组件实例已经创建，可以访问到组件的数据和方法。通常在这个阶段进行一些初始化操作，如获取数据、订阅事件等。</li><li><code>beforeMount</code>：在组件挂载到 DOM 之前被调用。在这个阶段，模板已经编译完成，但尚未将组件渲染到页面上。</li><li><code>mounted</code>：在组件挂载到 DOM 后被调用。在这个阶段，组件已经被渲染到页面上，可以进行 DOM 操作、发送请求等。通常在这个阶段进行一些需要操作 DOM 的初始化工作。</li><li><code>beforeUpdate</code>：在组件更新之前被调用，即在数据发生变化导致组件重新渲染之前。在这个阶段，可以对组件的数据进行修改或进行一些准备工作。</li><li><code>updated</code>：在组件更新完成后被调用。在这个阶段，组件已经完成数据的更新和重新渲染。</li><li><code>beforeUnmount</code>：在组件销毁之前被调用。在这个阶段，组件实例仍然可用，可以进行一些清理工作，如取消订阅、清除定时器等。</li><li><code>unmounted</code>：在组件销毁后被调用。在这个阶段，组件实例已经被销毁，无法再访问到组件的数据和方法。</li></ol><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>在create阶段进行数据请求:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App.vue created&#x27;</span>)</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/user&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此时请求会出现跨域请求（CROS）阻截</p><blockquote><p>为了保证浏览器的安全，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源，称为同源策略，同源策略是浏览器安全的基石<br>同源策略(Sameoriginpolicy)是一种约定，它是浏览器最核心也最基本的安全功能<br>所谓同源（即指在同一个域）就是两个页面具有相同的协议(protocol)，主机(host)和端口号(port)<br><strong>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</strong>，<strong>此时无法读取非同源网页的Cookie，无法向非同源地址发送AJAX请求</strong></p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>CORS (Cross-Origin Resource Sharing）是由W3C制定的一种跨域资源共享技术标准，其目的就是为了解决前端的跨域请求。</p><p>CORS可以在不破坏即有规则的情况下，通过后端服务器实现CORS接口，从而实现跨域通信。</p><p>CORS将请求分为两类:简单请求和非简单请求，分别对跨域通信提供了支持。</p><ul><li><p>简单请求</p><p>  请求方法:GET、POST、HEAD<br>  除了以下的请求头字段之外，没有自定义的请求头:<br>  Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type<br>  Content-Type的值只有以下三种:<br>  text/plain、multipart/form-data、application/x-www-form-urlencoded</p><ul><li><p>处理</p><p>  对于简单请求，CORS的策略是请求时在请求头中增加一个Origin字段，</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost :8080</span><br><span class="line">Origin: http://localhost:8081</span><br><span class="line">Referer: http://localhost:8081/index.html</span><br></pre></td></tr></table></figure><p>  服务器收到请求后，根据该字段判断是否允许该请求访问，如果允许，则在HTTP头信息中添加Access-Control-Allow-Origin字段。<br>  坛</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-origin<span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost:8081</span></span><br><span class="line">Content-Length<span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">Content-Type<span class="punctuation">:</span>text/plain;</span><br><span class="line">charset=UTF<span class="number">-8</span></span><br><span class="line">Date<span class="punctuation">:</span> Thu<span class="punctuation">,</span><span class="number">12</span> Jul <span class="number">2018</span> <span class="number">12</span><span class="punctuation">:</span><span class="number">51</span><span class="punctuation">:</span><span class="number">14</span> GMT</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>非简单请求</p><p>  简单请求之外都是非简单请求</p><p>  对于非简单请求的跨源请求，浏览器会在真实请求发出前增加一次OPTION请求，称为预检请求(preflight request)<br>  预检请求将真实请求的信息，包括请求方法、自定义头字段、源信息添加到HTTP头信息字段中，询问服务器是否允许这样的操作。<br>  例如一个GET请求:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /test HTTP/1.1</span><br><span class="line">Origin: http://www.test.com</span><br><span class="line">Access-Control-Request-Method: GET</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: www.test.com</span><br></pre></td></tr></table></figure><p>  Access-Control-Request-Method表示请求使用的HTTP方法，Access-Control-Request-Headers包含请求的自定义头字段</p></li></ul><pre><code>服务器收到请求时，需要分别对Origin、Access-Control-Request-Method、Access-Control-Request-Headers进行验证，验证通过后，会在返回HTTP头信息中添加:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http: //www.test.com</span><br><span class="line">Access-Control-Allow-Methods: GET,POST,PUT,DELETE</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials:true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>Access-Control-Allow-Methods、Access-Control-Allow-Headers:真实请求允许的方法、允许使用的字段Access-Control-Allow-Credentials:是否允许用户发送、处理cookieAccess-Control-Max-Age:预检请求的有效期，单位为秒，有效期内不用重新发送预检请求。</code></pre><p>在Springboot中在mvc配置类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span> <span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//允许跨域访问的路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//允许跨域访问的源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)<span class="comment">//允许请求方</span></span><br><span class="line">                .maxAge(<span class="number">168000</span>)<span class="comment">//预检间隔时间</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);<span class="comment">//允许头部设置</span></span><br><span class="line"><span class="comment">//                .allowCredentials(true);//是否发送cookie ps.这个加了就无法生效我也不知道为什么</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>如果不想自定义策略使用默认配置，只需要在相关Controller中添加注解<code>@CrossOrigin</code>即可</strong></p><h1 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h1><p>掌握了以上的知识，我们尝试将后端的数据渲染到前端页面。</p><p>我们尝试从数据库取出数据，以表格形式显示在前端。</p><ul><li><p>前端通过<code>axios</code>向后端发送请求</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">qq</span>: string</span><br><span class="line">  <span class="attr">phone</span>: string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tableData = ref&lt;<span class="title class_">User</span>[]&gt;([]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Table.vue created&#x27;</span>)</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/user&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">   tableData.<span class="property">value</span>= response.<span class="property">data</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>  这是Vue3的语法，<code>created</code>变成了<code>onMounted</code></p><p>  <code>()=&#123;&#125;</code>是回调函数</p></li></ul><ul><li><p>后端开启<code>/user</code>路由，返回数据：</p><ul><li><p>Mapper接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">QQMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM qq WHERE qq=3417759874\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot; OR qq=690420902\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot; OR qq=669630546\n&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;qq_phone&gt; <span class="title function_">find</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span><span class="comment">//跨域请求允许</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QQMapper qqMapper;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;qq_phone&gt; <span class="title function_">query</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;qq_phone&gt; list=qqMapper.find();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>前端得到数据渲染</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      :row-class-name=&quot;tableRowClassName&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;qq&quot; label=&quot;qq&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;phone&quot; label=&quot;phone&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在实际项目开发中，几乎每个组件中都会用到axios 发起数据请求。此时会遇到如下两个问题:</p><ul><li>每个组件中都需要导入axios</li><li>每次发请求都需要填写完整的请求路径</li></ul><p>可以通过全局配置的方式解决上述问题在<code>main.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置请求根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line"><span class="comment">// 全局属性</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios</span><br></pre></td></tr></table></figure><p>在某个组件中<code>xxx.vue</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curInstance= <span class="title function_">getCurrentInstance</span>()！;<span class="comment">//添加非空断言&#x27;!&#x27;否则编译器报错可能为空，即使项目正常运行</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Table.vue created&#x27;</span>)  </span><br><span class="line">    <span class="keyword">const</span> &#123;$axios&#125;=curInstance.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>;</span><br><span class="line">    $axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">     tableData.<span class="property">value</span>= response.<span class="property">data</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>Vue路由<code>vue-router</code>是官方的路由插件，能够轻松的管理SPA项目中组件的切换。<br>Vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来<br>vue-router目前有3.x的版本和4.x的版本，vue-router 3.x只能结合vue2进行使用，vue-router 4.x只能结合vue3进行使用</p><p><a href="https://router.vuejs.org/zh/introduction.html">官方文档</a></p><p>安装: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>有三个组件:<code>Discover.vue</code> <code>Friends.vue</code> <code>My.vue</code>，我想通过<code>/discover</code>,<code>/friends</code>,<code>/my.vue</code>这三个路由来控制它们的显示</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>新建文件夹<code>router</code>保存路由文件</p></li><li><p>新建<code>index.js</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Discover</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Discover.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">My</span> <span class="keyword">from</span> <span class="string">&#x27;../components/My.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friends</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Friends.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/discover&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Discover</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">My</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/friends&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Friends</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> route;</span><br></pre></td></tr></table></figure><ul><li><code>main.js</code>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Vue Router</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>在根组件通过<code>&lt;router-link to=&quot;/name&quot;&gt;&lt;/router-link&gt;</code>来进行跳转，组件内容会渲染到<code>&lt;router-view&gt;&lt;/router-view&gt;</code></li></ul><h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><p>在参数”<code>route</code>中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/my&#x27;<span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> My<span class="punctuation">,</span></span><br><span class="line">    children<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span>path<span class="punctuation">:</span>&#x27;sing&#x27;<span class="punctuation">,</span>component<span class="punctuation">:</span>Sing<span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>这样写当访问<code>/my/sing</code>时会渲染<code>Sing.vue</code>的内容</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>在参数”<code>route</code>中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attr">routes</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attr">routes</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/product/1&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,           </span><br><span class="line">       &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/product/2&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,           </span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/product/2&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>,           </span><br><span class="line">       &#125;,        </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们给每个商品做对应渲染，如果按照刚才的方法代码复用性很差，有1亿个商品，难不成我要配置1亿个路由？</p><p>因此需要动态路由。</p><p><strong>动态路由</strong>指的是:把Hash地址中可变的部分定义为参数项，从而提高路由规则的复用性。在vue-router 中使用英文的冒号(:)来定义路由的参数项。示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">path</span>: <span class="string">&#x27;/product/:id &#x27;</span>,component :<span class="title class_">Product</span>&#125;</span><br></pre></td></tr></table></figure><p>在组件中可以通过<code>$route.params.id</code>获取<code>id</code>的值，名字不一定非得是<code>id</code></p><h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><p>对于组件化开发来说，大型应用的状态往往跨越多个组件。在多层嵌套的父子组件之间传递状态已经十分麻烦，而Vue更是没有为兄弟组件提供直接共享数据的办法。<br>基于这个问题，许多框架提供了解决方案——使用全局的状态管理器，将所有分散的共享数据交由状态管理器保管，Vue也不例外。<br>Vuex是一个专为Vue.js应用程序开发的状态管理库，采用集中式存储管理应用的所有组件的状态。<br>简单的说，<strong>Vuex用于管理分散在Vue各个组件中的数据。</strong></p><p><a href="https://vuex.vuejs.org/zh/index.html">官网地址</a></p><ul><li><p>安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure></li></ul><p>每一个Vuex应用的核心都是一个store，与普通的全局对象不同的是，基于Vue数据与视图绑定的特点，当store中的状态发生变化时，与之绑定的视图也会被重新渲染。<br>store中的状态不允许被直接修改，改变store中的状态的唯一途径就是显式地提交(commit) mutation，这可以让我们方便地跟踪每一个状态的变化。在大型复杂应用中，如果无法有效地跟踪到状态的变化，将会对理解和维护代码带来极大的困扰。<br>Vuex中有5个重要的概念: State、Getter、Mutation、Action、Module。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307151140442.png" alt="image-20230715114007596"></p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>State用于维护所有应用层的状态，并确保应用只有唯一的数据源.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的 store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  state () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果我们想在其他组件访问<code>count</code>可以用<code>this.$store.count</code>获取</p><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>Getter维护由State派生的一些状态，这些状态随着State状态的变化而变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createstore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        todos : [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>,<span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">2</span>,<span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters : &#123;</span><br><span class="line">            doneTodos : <span class="function">(<span class="params">state</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">done</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>在组件中，可以直接使用store.commit来提交mutation,也可以先用mapMutation辅助函数将其映射下来</p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action类似Mutation，不同在于:</p><p>Action不能直接修改状态，只能通过提交mutation来修改，</p><p>Action可以包含异步操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createstore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations : &#123;</span><br><span class="line">        increment (state) &#123;</span><br><span class="line">            state.<span class="property">count</span>++ <span class="comment">//直接修改状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions : &#123;</span><br><span class="line">        increment (context) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>) <span class="comment">//只能提交来修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中，可以直接使用<code>this.$store.dispatch(&#39;xxx&#39;)</code>分发action，或者使用<code>mapActions</code>辅助函数先将其映射下来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods : &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([</span><br><span class="line">    <span class="string">&#x27;increment &#x27;</span>,<span class="comment">// 将`this.increment()映射为“‘this.$store.dispatch( &#x27; increment &#x27;)</span></span><br><span class="line">    <span class="comment">//mapActions`也支持载荷:</span></span><br><span class="line">    <span class="string">&#x27;incrementBy&#x27;</span><span class="comment">//将‘this. incrementBy(amount)”映射为‘this.$store.dispatch(&#x27; incrementBy&#x27;，amount))])，</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    state () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">      increment (state) &#123;</span><br><span class="line">        state.<span class="property">count</span>++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> app.<span class="title function_">use</span>(store);</span><br></pre></td></tr></table></figure><h1 id="Mock-js"><a href="#Mock-js" class="headerlink" title="Mock.js"></a>Mock.js</h1><p>Mock.js是一款前端开发中拦截Ajax请求再生成随机数据响应的工具，可以用来模拟服务器响应.<br>优点是非常简单方便,无侵入性,基本覆盖常用的接口数据类型..<br>支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。</p><p><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">官方文档</a></p><p>安装: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs</span><br></pre></td></tr></table></figure><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307151351102.png" alt="image-20230715135128820"></p></div>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
            <tag> 全栈 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法模板</title>
      <link href="/post/33810/"/>
      <url>/post/33810/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l-<span class="number">1</span>,j=r+<span class="number">1</span>,x=a[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(a[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(x&lt;a[j]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a,l,j);</span><br><span class="line">    qsort(a,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的思想很简单，但是它的边界处理真的很傻x，稍不留神就会无限递归或无线循环。</p><p><strong>我曾如是写道:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> begin, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin&gt;=end) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=begin,j=end,x=arr[begin+end&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[i]&lt;x) i++;</span><br><span class="line">        <span class="keyword">while</span>(x&lt;arr[j]) j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">            swap(arr,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(arr,begin, i-<span class="number">1</span>);</span><br><span class="line">    qsort(arr, i+<span class="number">1</span>,end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当它在以下测试用例会无限循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><p>它会进入<strong>无限循环</strong>，<code>i</code>,<code>j</code>指针连动都不带动的！！！</p><p>而<code>do while</code>则会一言不合先动指针，然后再判断，这样指针就不会停滞下来。</p><p><strong>我曾如是写道:</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i=l-<span class="number">1</span>,j=r+<span class="number">1</span>,x=a[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(a[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(x&lt;a[j]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            swap(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(a,l,i-<span class="number">1</span>);</span><br><span class="line">    qsort(a,i+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况会造成<strong>无限递归</strong>的问题，实际上<code>x=a[l+r&gt;&gt;1]</code>和<code>qsort(a,l,j); qsort(a,j+1,r);</code>是相关联的，你也许会对分界点<code>j</code>的处理感到困扰。</p><p>且看<strong>证明</strong>：</p><p><strong>1.</strong>进行边界分析是为了避免分治时出现被分为0和n的情况，造成无限分治内存超限问题。<br><strong>2</strong>.若以j为分界点，对于<code>quick_sort(q, l, j)</code>, <code>quick_sort(q, j + 1, r)</code>，<code>j</code>有可能取<code>l~r</code>的任何一个值，若<code>j</code>取<code>l</code>，则<code>quick_sort(q, l + 1, r)</code>执行时会产生分割，不会出现<code>0</code>和<code>n</code>的情况；若<code>j</code>取<code>r</code>，则<code>quick_sort(q, l, r)</code>执行时会分割为<code>n</code>，会导致无限分治。<strong>本条结论：若在递归分治前保持<code>j = r</code>，那么就会出现无限分治的情况</strong><br><strong>3</strong>.所以只要在进入分治前不要让<code>j</code>取到<code>r</code>就可以了。那什么时候会取到r呢？初始化完毕时，<code>j</code>的值为<code>r + 1</code>，当执行过一次<code>do j--; while(q[j] &gt; x)</code>后，<code>j</code>变为<code>r</code>，并且恰好在此之后j都不会发生改变，即<code>do j--; while(q[j] &gt; x)</code>只会执行一次，如果保持<code>j = r</code>不变的话，那么<code>i</code>会在此之前一直自增到<code>i = r</code>，此时<code>j = r</code>; <code>i = r</code>不满足<code>i &lt; j</code>循环结束，此时，整个<code>while(i &lt; j) &#123;&#125;</code>循环只进行了<code>1</code>轮，分治，从而导致分治出了<code>0</code>和<code>n</code>两个情况。<strong>本条结论：若要在递归分治前保持<code>j = r</code>，那么<code>while(i &lt; j) &#123;&#125;</code>只能执行一次</strong><br><strong>4</strong>.现在把焦点转移到<code>x</code>的取值上，第3点说到，若出现无限分治问题，<code>i</code>会一直自增到<code>i = r</code>，若出现这种情况，那么<code>x</code>的取值一定是<code>q[r]</code>，因为如果<code>x</code>的值不为<code>q[r]</code>，那么一定会在x处存在<code>q[i] == x</code>，而<code>q[i] == x</code>会导致i自增暂时停止，那么就会往下执行，执行<code>do j--;</code>，判断后进入第二轮<code>while(i &lt; j) &#123;&#125;</code>循环，进入第二轮循环会使j自减至少两次，而他的初值为<code>r + 1</code>，也就是说，j的值不会一直保持在<code>j = r</code>上，也就不会导致无限分治。<strong>本条结论：若<code>x</code>的取值不为<code>q[r]</code>，那么<code>while(i &lt; j) &#123;&#125;</code>会至少执行两次，因此在进行递归分治前，<code>j</code>的值是一定小于<code>r</code>的。</strong><br><strong>5</strong>.<code>l + r &gt;&gt; 1</code>的值一定是小于r的，不会取到r，而<code>l + r + 1 &gt;&gt; 1</code>的值一定是大于<code>l</code>的，不会取到l<br>所以综合2、3、4、5的结论就得出了<strong>若以j为分界点，x取<code>q[l + r &gt;&gt; 1]</code>，此时不会出现无限分治的情况；若以<code>i</code>为分界点，<code>x</code>取<code>q[l + r + 1 &gt;&gt; 1]</code>，此时不会出现无限分治的情况</strong></p><blockquote><p>坑是真的多</p></blockquote><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(low&gt;high) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                <span class="keyword">return</span> binary_search(mid+<span class="number">1</span>, high, nums, target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                <span class="keyword">return</span> binary_search(low, mid-<span class="number">1</span>, nums, target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="number">0</span>, nums.length-<span class="number">1</span>, nums, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/post/31301/"/>
      <url>/post/31301/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念:"></a>关键概念:</h1><ul><li><p><strong>前缀</strong>：指除了最后一个字符以外，一个字符串的全部头部组合。</p></li><li><p><strong>后缀</strong>：指除了第一个字符以外，一个字符串的全部尾部组合。</p></li><li><p><strong>部分匹配值</strong>：”前缀”和”后缀”的最长的共有元素的长度。</p></li></ul><h1 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;haystack.<span class="built_in">size</span>()&amp;&amp;j&lt;needle.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(haystack[i]==needle[j])&#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i=i-j+<span class="number">1</span>;j=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> i-j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int strStr(string haystack, string needle) &#123;</span><br><span class="line">    int i=0,j=0;</span><br><span class="line">    while(i&lt;haystack.size()&amp;&amp;j&lt;needle.size())&#123;</span><br><span class="line">        if(j==-1||haystack[i]==needle[j])&#123;//两个条件可合并</span><br><span class="line">            i++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            j=next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        if(j==needle.size())&#123;</span><br><span class="line">            return i-j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成next数组"><a href="#生成next数组" class="headerlink" title="生成next数组"></a>生成next数组</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>给出字符串<code>aabaaf</code>,求其next数组。</p><p>next数组记录的是模式串的最大相等前后缀的情况。<code>next[i]</code>表示的是，字符串从<code>i</code>(包括<code>i</code>)往前的最大相等前后缀长度。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>使用双指针<code>i</code>,<code>j</code></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>数组初始化:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next[0]=-1 //因为一个字符的最大相等前后缀长度=0</span><br></pre></td></tr></table></figure><p>指针初始化:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=0; //前缀</span><br><span class="line">j=-1 //后缀</span><br></pre></td></tr></table></figure><blockquote><p>对于<code>j</code>将会利用接下来的<code>for</code>循环特性进行初始化。</p></blockquote><h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// while(i&lt;s.size())&#123;//不能这么写，size_t是无符号整数</span><br><span class="line">int n = s.size();</span><br><span class="line">while(i&lt;n)</span><br><span class="line">if(j==-1||s[i]=s[j])&#123;</span><br><span class="line">i++;j++;</span><br><span class="line">next[i]=j</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯相关(待更)</title>
      <link href="/post/49978/"/>
      <url>/post/49978/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题"><a href="#2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题" class="headerlink" title="2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题"></a><a href="https://www.dotcpp.com/oj/train/1097/">2023年第十四届蓝桥杯大赛软件类省赛Java大学B组真题</a></h1></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSP430单片机课设</title>
      <link href="/post/3645/"/>
      <url>/post/3645/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>我们组完成的项目是远程温度检测系统设计。</p><h1 id="要实现的东西"><a href="#要实现的东西" class="headerlink" title="要实现的东西"></a>要实现的东西</h1><p>课设要做温度监视并且通过串口发送到PC和阿里云。主要功能是通过ds18b20传感器获取温度信息传给单片机，然后单片机通过串口给pc发送温度信息，同时给esp8266发送指令将温度信息上传到阿里云。</p><p>材料:</p><ul><li>DS18B20温度传感器</li><li>MSP430f169</li><li>esp8266</li><li>杜邦线</li></ul><h1 id="学习一下DS18B20"><a href="#学习一下DS18B20" class="headerlink" title="学习一下DS18B20"></a>学习一下DS18B20</h1><p>ds18b20是一个单总线的传感器，只通过一个引脚DQ便可进行数据传输。</p><ul><li>测温范围为-55℃到+125℃，在-10℃到+85℃范围内误差为±0.4°。</li><li>返回16位二进制温度数值</li></ul><p>引脚图：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302008086.png" alt="image-20230630163247929"></p><p>内部由 <strong>64 位ROM，高速暂存器，存储器</strong> 组成。</p><ul><li><p>64位ROM</p><p>  64 位ROM存储独有的序列号。</p><p>  ROM中的64位序列号是出厂前被光刻好的，它可以看作是该DS18B20的地址序列码，每个DS18B20的64位序列号均不相同。这样就可以实现一根总线上挂接多个DS18B20的目的。（但是我们不挂载多个）</p></li><li><p>高速暂存器</p><ul><li>温度传感器</li><li>一个字节的温度上限和温度下限报警触发器(TH和TL)</li><li><strong>配置寄存器允许用户设定9位，10位，11位和12位的温度分辨率，分别对应着温度的分辨率为：0.5°C，0.25°C，0.125°C，0.0625°C，默认为12位分辨率，</strong></li></ul></li><li><p>存储器：由一个高速的RAM和一个可擦除的EEPROM组成，EEPROM存储高温和低温触发器(TH和TL)以及配置寄存器的值，(就是存储低温和高温报警值以及温度分辨率)</p></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007739.png" alt="image-20230630170054847"></p><p>高速暂存器由9个字节组成</p><ul><li>字节0~1 是温度存储器，用来存储转换好的温度。第0个字节存储温度低8位，第一个字节存储温度高8位</li><li>字节2~3 是用户用来设置最高报警和最低报警值(TH和TL)。</li><li>字节4 是配置寄存器，用来配置转换精度，可以设置为9~12 位。</li><li>字节5~7 保留位。芯片内部使用</li><li>字节8 CRC校验位。是64位ROM中的前56位编码的校验码。由CRC发生器产生。</li></ul><h2 id="温度存储机制"><a href="#温度存储机制" class="headerlink" title="温度存储机制"></a>温度存储机制</h2><p>DS18B20的核心功能是直接温度-数字测量。其温度转换可由用户自定义为9、10、11、12位精度分别为0.5℃、0.25℃、0.125℃、0.0625℃分辨率。DS18B20采用16位补码的形式来存储温度数据，温度是摄氏度。当温度转换命令发布后，经转换所得的温度值以二字节补码形式存放在高速暂存存储器的第0和第1个字节。</p><p>高字节的五个S为符号位，温度为正值时S=1,温度为负值时S=0</p><p>剩下的11位为温度数据位，对于12位分辨率，所有位全部有效，对于11位分辨率，位0(bit0)无定义，对于10位分辨率，位0和位1无定义,对于9位分辨率，位0，位1，和位2无定义。<br><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007871.png" alt="image-20230630170742227"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007294.png" alt="image-20230630170857707"></p><h2 id="配置寄存器"><a href="#配置寄存器" class="headerlink" title="配置寄存器"></a>配置寄存器</h2><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007877.png" alt="image-20230630171111477"></p><p>在配置寄存器中，我们可以通过R0和R1设置DS18B20的转换分辨率，DS18B20在上电后默认R0=1和R1=1(12分辨率)，寄存器中的第7位和第0位到4位保留给设备内部使用。</p><h2 id="工作步骤"><a href="#工作步骤" class="headerlink" title="工作步骤"></a>工作步骤</h2><p>DS18B20的工作步骤可以分为三步：</p><p>1.初始化DS18B20<br>2.执行ROM指令<br>3.执行DS18B20功能指令</p><p><strong>其中第二步执行ROM指令，也就是访问每个DS18B20，搜索64位序列号，读取匹配的序列号值，然后匹配对应的DS18B20，如果我们仅仅使用单个DS18B20，可以直接跳过ROM指令。而跳过ROM指令的字节是0xCC。</strong></p><h3 id="1-初始化DS18B20"><a href="#1-初始化DS18B20" class="headerlink" title="1.初始化DS18B20"></a>1.初始化DS18B20</h3><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007086.png" alt="image-20230630171557953"></p><p>DQ管脚的常态是高电平。</p><p>根据时序图我们得出初始化的步骤：</p><ul><li>1.单片机拉低总线至少480us，产生复位脉冲，然后释放总线（拉高电平）转为接收模式。</li><li>2.这时DS8B20检测到请求之后，会拉低信号，大约持续60~240us表示应答。</li><li>3.DS8B20拉低电平的60~240us之间，单片机读取总线的电平，如果是低电平，那么表示初始化成功</li><li>4.DS18B20拉低电平60~240us之后，会释放总线。</li></ul><p>根据此我们可以写出MSP430的初始化代码(我把DQ接到了单片机的P10端口)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DS18B20_Reset</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">  DQDIR|=BIT0;<span class="comment">//输出模式</span></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低电平,单片机拉低总线至少480us</span></span><br><span class="line">  delay_us(<span class="number">500</span>);</span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高电平</span></span><br><span class="line">  delay_us(<span class="number">70</span>); <span class="comment">//60-240内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">DS18B20_Check</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> retry=<span class="number">0</span>;</span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//置为输入模式，DS18B20会拉低电平</span></span><br><span class="line">  <span class="keyword">while</span>((DQIN&amp;BIT0)&amp;&amp;retry&lt;<span class="number">270</span>)&#123;</span><br><span class="line">    delay_us(<span class="number">1</span>);</span><br><span class="line">    retry++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(retry&gt;=<span class="number">270</span>)&#123;<span class="comment">//检测是否拉低了电平</span></span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没拉</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//拉了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-执行ROM指令"><a href="#2-执行ROM指令" class="headerlink" title="2.执行ROM指令"></a>2.执行ROM指令</h3><p>我们首先需要掌握，如何向DS18B20写数据。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007165.png" alt="image-20230630173848300"></p><p><strong>总线控制器通过控制单总线高低电平持续时间从而把逻辑1或0写DS18B20中。每次只传输1位数据</strong></p><p>根据时序图我们得出以下结论</p><p><strong>写0</strong>:</p><ul><li>1.拉低总线持续60-120us</li><li>2.释放总线(拉高电平)</li></ul><p><strong>写1:</strong></p><ul><li>拉低总线2-15us</li><li>释放总线</li></ul><p>代码实现:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DS_Write_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span>&#123;</span><br><span class="line">  DQDIR|=BIT0;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> temp;    </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">    temp=data&amp;<span class="number">0x01</span>;<span class="comment">//处理位：最低位，通过移位来L-H逐位处理</span></span><br><span class="line">    data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp)&#123;<span class="comment">//1</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//0</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>掌握了写操作，我们还需要知道写什么：</p><p>常用的是：</p><p><strong>跳过ROM0xCC</strong></p><p><strong>温度转换 0x44</strong></p><blockquote><p>开启温度读取转换，读取好的温度会存储在高速暂存器的第0个和第一个字节中</p></blockquote><p><strong>读取温度 0xBE</strong></p><blockquote><p>读取高速暂存器存储的数据（共9个Byte）</p></blockquote><p><strong>对于本步骤我们选择直接跳过ROM指令</strong></p><h3 id="3-执行DS18B20功能指令"><a href="#3-执行DS18B20功能指令" class="headerlink" title="3.执行DS18B20功能指令"></a>3.执行DS18B20功能指令</h3><p>在此之前我们先了解以下怎么读DS18B20来自的数据</p><p><strong>读操作和写操作一样，也是按位读取，从低位向高位</strong></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007647.png" alt="image-20230630175657075"></p><p>根据时序图，我们总结如下步骤</p><ul><li>拉低总线至少1us，然后释放总线</li><li>开始读取，在一个读时隙内，若为1则释放总线为高电平，若为0则拉低电平。</li></ul><p>因此代码这样写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Bit</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data;</span><br><span class="line">  DQDIR|=BIT0;<span class="comment">//输出模式</span></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">  delay_us(<span class="number">2</span>);  </span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高，释放总线</span></span><br><span class="line">  </span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//输入</span></span><br><span class="line">  delay_us(<span class="number">12</span>); </span><br><span class="line">  <span class="keyword">if</span>(DQIN&amp;BIT0)&#123;</span><br><span class="line">    data=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    data=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  delay_us(<span class="number">50</span>); </span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Byte</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> data=<span class="number">0</span>,j;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">     data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">     j=DS_Read_Bit();</span><br><span class="line">     <span class="keyword">if</span>(j)&#123;</span><br><span class="line">      data|=<span class="number">0x80</span>; </span><br><span class="line">     &#125;</span><br><span class="line">     delay_us(<span class="number">30</span>);    </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了以上函数我们就可以从DS18B20取出温度的数据了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="title function_">Read_Temper</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> TH,TL,sign=<span class="number">0</span>;</span><br><span class="line">  <span class="type">short</span> tem;</span><br><span class="line">  DS18B20_Start() ;</span><br><span class="line">  DS18B20_Reset(); <span class="comment">//DS18B20复位</span></span><br><span class="line">  DS18B20_Check(); </span><br><span class="line">  DS_Write_Byte(<span class="number">0xcc</span>);<span class="comment">// skip rom</span></span><br><span class="line">  DS_Write_Byte(<span class="number">0xbe</span>);<span class="comment">// convert</span></span><br><span class="line">delay_us(<span class="number">750</span>);<span class="comment">//等待转换</span></span><br><span class="line">  TL=DS_Read_Byte();</span><br><span class="line">  TH=DS_Read_Byte();</span><br><span class="line">  <span class="keyword">if</span>(TH&lt;&lt;<span class="number">8</span>)&#123;<span class="comment">//负数，获取原码</span></span><br><span class="line">    TH=~TH;</span><br><span class="line">    TL=~TL;</span><br><span class="line">    sign=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tem=TH;</span><br><span class="line">  tem&lt;&lt;=<span class="number">8</span>;</span><br><span class="line">  tem+=TL;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//(((TH&lt;&lt;8) | TL)*0.0625);</span></span><br><span class="line">  tem=(<span class="type">float</span>)tem*<span class="number">0.625</span>;</span><br><span class="line">  <span class="keyword">if</span>(sign)&#123;</span><br><span class="line">    <span class="keyword">return</span> -tem;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> tem;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个疑点：为什么得到的数值要乘0.625呢？</strong></p><p>关于这个我思考了很久，一直在想0.625和12位分辨率的关系，结果发现官方文档里写了他们的对应关系，也就是说这不是算出来的是规定的，这也推出了一些结论：</p><p>小数位是低四位因为 $2^{-4}=0.0625$ 也就是说，寄存器内每步进1相当于温度步进0.0625。因需要如此处理，而代码中乘0.625是原来真实的值扩大了十倍，最后取整相当于保留了小数点后一位。而<code>（float）expression</code>的作用则是使计算更精确。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306302007038.png" alt="image-20230630195438080"></p><h1 id="学习一下串口"><a href="#学习一下串口" class="headerlink" title="学习一下串口"></a>学习一下串口</h1><p>司马自动更新操你妈</p><p><a href="https://baike.baidu.com/item/串口通信/3775296?fromModule=lemma_inlink">串口通信</a>(Serial Communication)， 是指外设和计算机间，通过数据<a href="https://baike.baidu.com/item/信号线/8807477?fromModule=lemma_inlink">信号线</a> 、地线、控制线等，按位进行传输数据的一种通讯方式。</p><p><strong>UART</strong>是通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器,是设备间进行异步通信的关键模块。UART负责处理数据总线和串行口之间的串/并、并/串转换，并规定了帧格式；通信双方只要采用相同的帧格式和波特率，就能在未共享时钟信号的情况下，仅用两根信号线（Rx 和Tx）就可以完成通信过程，因此也称为异步串行通信。</p><h2 id="MSP430UART初始化配置步骤"><a href="#MSP430UART初始化配置步骤" class="headerlink" title="MSP430UART初始化配置步骤:"></a>MSP430UART初始化配置步骤:</h2><ul><li><p><code>SWRT</code>复位(UxCTL)</p><p>  该位的状态影响着其他一些控制位和状态位的状态。在串行口的使用过程中，这一位是比较重要的控制位。一次正确的 USART 模块初始化应该是这样的顺序：先在 SWRST=1 情况下设置串行口；然后设置<br>  SWRST=0；最后如果需要中断，则设置相应的中断使能。  </p>  <table>      <tr>          <td>SWRT</td><td>0</td>      </tr>      <tr>              <td>SWRT</td><td>1</td>      </tr>  </table></li><li><p>设置字符长度<code>CHAR</code>(UxCTL)</p>  <table>      <tr>          <td>0</td><td>7位</td>      </tr>      <tr>              <td>1</td><td>8位</td>      </tr>  </table></li><li><p>设置串口时钟<code>SSEL</code>(UxTCTL )</p><p>  这两位确定波特率发生器的时钟源  </p>  <table>          <tr>                  <td>0</td><td>外部时钟 UCLKI</td>          </tr>          <tr>                  <td>1</td><td>辅助时钟 ACLK</td>          </tr>          <tr>                  <td>2</td><td>子系统时钟 SMCLK</td>          </tr>          <tr>                  <td>3</td><td>子系统时钟 SMCLK</td>          </tr>  </table></li><li><p>设置波特率寄存器UxBRx</p><p>  UxBR0 和 UxBR1 两个寄存器用于存放波特率分频因子的整数部分。<br>  其中 UXBR0 位低字节，UXBR1 为高字节。两字节和起来为一个 16 位字，成为 UBR。在异步通信时，UBR 的允许值不小于 3。如果 UBR&lt;3，则接收和发送会发生不可预测的错误  </p>  <table>          <tr>                  <td>UxBR0</td><td>低字节</td>          </tr>          <tr>                  <td>UxBR1</td><td>高字节</td>          </tr>     </table></li><li><p>设置UxMCTL 波特率调整寄存器  </p><p>  如果波特率发生器的输入频率BRCLK不是所需的波特率的整数倍，带有一小数，则整数部分写入UBR<br>  寄存器，小数部分由调整控制寄存器 UxCTL 的内容反映。波特率由以下公式计算：<br>  波特率 = BRCLK / (UBR+ (M7+M6+..+M0) / 8 )<br>  其中 M0,M1,…M6 及 M7 为控制器 UxMCTL 中的各位。调整寄存器的 8 为分别对应 8 次分频，如果<br>  M＝1，则相应次的分频增加一个时钟周期；如果 Mi＝0，则分频计数器不变  </p></li><li><p>配置串口模块控制寄存器<code>MEx</code></p>  <table>          <tr>                  <td>UTXE0</td><td>串口 0 的发送允许</td>          </tr>          <tr>                  <td>URXE0</td><td>串口 0 的接收允许</td>          </tr>          <tr>                  <td>UTXE1</td><td>串口 1 的发送允许</td>          </tr>          <tr>                  <td>URXE1</td><td>串口 1 的接收允许</td>          </tr>            <tr>                  <td>0</td><td>禁止</td>          </tr>             <tr>                  <td>1</td><td>允许</td>          </tr>  </table></li><li><p>SWRST=0</p></li><li><p>配置接收中断控制<code>IE</code></p>  <table>          <tr>                  <td>UTXIE0</td><td>串口 0 的发送中断允许</td>          </tr>          <tr>                  <td>URXIE0</td><td>串口 0 的接收中断允许</td>          </tr>          <tr>                  <td>UTXIE1</td><td>串口 1 的发送中断允许</td>          </tr>          <tr>                  <td>URXIE1</td><td>串口 1 的接收中断允许</td>          </tr>            <tr>                  <td>0</td><td>禁止</td>          </tr>             <tr>                  <td>1</td><td>允许</td>          </tr>  </table></li><li><p>设置IO口为普通I/O模式，设置IO口方向为输出</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P3SEL|= BIT4;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">P3DIR|= BIT4;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">P3SEL|= BIT5;</span><br></pre></td></tr></table></figure></li></ul><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UART0_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该位的状态影响着其他一些控制位和状态位的状态。在串行口的使用过程中，这一位是比较重要的控</span></span><br><span class="line"><span class="comment">  制位。一次正确的 USART 模块初始化应该是这样的顺序：先在 SWRST=1 情况下设置串行口；然后设置</span></span><br><span class="line"><span class="comment">  SWRST=0；最后如果需要中断，则设置相应的中断使能。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  U0CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U0CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U0TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U0BR1=baud_h;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U0BR0=baud_l;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U0MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME1|=UTXE0;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME1|=URXE0;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U0CTL&amp;=~SWRST;</span><br><span class="line">  IE1|=URXIE0;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT4;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT4;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送函数"><a href="#发送函数" class="headerlink" title="发送函数"></a>发送函数</h2><p>IFG1 中断标志寄存器 1<br>IFG2 中断标志寄存器 2</p><table>        <tr>                <td>UTXIFG0</td><td>串口 0 的发送中断标志</td>        </tr>        <tr>                <td>URXIFG0</td><td>串口 0 的接收中断标志</td>        </tr>        <tr>                <td>UTXIFG1</td><td>串口 1 的发送中断标志</td>        </tr>        <tr>                <td>URXIFG1</td><td>串口 1 的接收中断标志</td>        </tr>          <tr>                <td>0</td><td>无中断请求标志</td>        </tr>           <tr>                <td>1</td><td>有中断请求标志</td>        </tr></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte</span><span class="params">(uchar data)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>((IFG1&amp;UTXIFG0)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U0TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Str</span><span class="params">(uchar *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte(*s++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相应的中断函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART0RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART0_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data=<span class="number">0</span>;</span><br><span class="line">  data=U0RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>我的温度数据是short型两个字节，而串口是按字节逐位发送如何发送呢？</p><p>我目前只能一个字节一个字节的发，结果是整数十六进制的形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> highByte = (tt &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>; <span class="comment">// 高字节</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> lowByte = tt &amp; <span class="number">0xFF</span>; <span class="comment">// 低字节</span></span><br></pre></td></tr></table></figure><p>（写完整篇后更新）解决了，可以数字转换成字符串形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">Do_Num2Str</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">  <span class="type">char</span> str[<span class="number">5</span>]=&#123;<span class="number">0x30</span>+t/<span class="number">100</span>,<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>+t%<span class="number">10</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_temp_toPc</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* str=Do_Num2Str(t);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> v=<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">    Send_Str_to_0(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学习一下ESP8266"><a href="#学习一下ESP8266" class="headerlink" title="学习一下ESP8266"></a>学习一下ESP8266</h1><p><strong>ESP8266</strong> 是一款由上海<a href="https://zh.wikipedia.org/w/index.php?title=乐鑫信息科技&amp;action=edit&amp;redlink=1">乐鑫信息科技</a><a href="https://zh.wikipedia.org/wiki/ESP8266开发板#cite_note-Espressif_ESP8266-1">[1]</a>开发的可以作为<a href="https://zh.wikipedia.org/wiki/微控制器">微控制器</a>使用的成本极低且具有完整<a href="https://zh.wikipedia.org/wiki/TCP/IP协议栈">TCP/IP协议栈</a>的Wi-Fi <a href="https://zh.wikipedia.org/wiki/IoT">IoT</a>控制芯片。</p><p><strong>MQTT</strong>：一种通讯协议</p><p>我们只是使用，并不关注其原理</p><h2 id="烧写固件"><a href="#烧写固件" class="headerlink" title="烧写固件"></a>烧写固件</h2><p>一般的esp8266芯片需要烧录MQTT固件才能进行连接阿里云的功能</p><p>首先在<a href="https://docs.ai-thinker.com/esp8266">安信可的网站</a>下载固件，和烧录相关程序。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027436.png" alt="image-20230703161027070"></p><p>其中esp8266与USB-串口连线如下：</p><table>        <tr>                <td>TTL</td><td>ESP8266</td>        </tr>        <tr>                <td>3V3</td><td>3V3</td>        </tr>        <tr>                <td>GND</td><td>GND</td>        </tr>        <tr>                <td>GND</td><td>IO0</td>        </tr>          <tr>                <td>RX/TX</td><td>TX/RX</td>        </tr>           <tr>                <td>GND</td><td>RST</td>        </tr></table><p>当程序显示<code>等待上电复位时</code>让RST接地,然后拉高。</p><p>这样就完成了烧录</p><h2 id="完成与阿里云的通讯"><a href="#完成与阿里云的通讯" class="headerlink" title="完成与阿里云的通讯"></a>完成与阿里云的通讯</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AT+RST</span><br><span class="line">//用于重置</span><br><span class="line"> </span><br><span class="line">AT+CWMODE=1</span><br><span class="line">//设置当前模式为STA模式</span><br><span class="line"> </span><br><span class="line">AT+CWLAP</span><br><span class="line">//查看当前环境下的WIFI</span><br><span class="line"> </span><br><span class="line">AT+CWJAP=&quot;WIFI名称&quot;,&quot;WIFI密码&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AT+MQTTUSERCFG=0,1,&quot;client_id&quot;,&quot;username&quot;,&quot;password&quot;,0,0,&quot;&quot;</span><br><span class="line">//client_id随便写，username和password填生成的参数</span><br><span class="line"> </span><br><span class="line">AT+MQTTCLIENTID=0,&quot;ClientId&quot;</span><br><span class="line">//ClientId填生成的参数，注意要在每个逗号前加分隔符&quot;\&quot;</span><br><span class="line"> </span><br><span class="line">AT+MQTTCONN=0,&quot;连接域名&quot;,1883,1</span><br><span class="line">//连接域名填上面生成的，注意要去掉端口号1883，因为后面已经设置了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关参数由该软件生成。<img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027801.png" alt="image-20230703161938924"></p><p>成功之后阿里云的云平台的相关设备会显示在线。</p><h1 id="与阿里云进行数据交互"><a href="#与阿里云进行数据交互" class="headerlink" title="与阿里云进行数据交互"></a>与阿里云进行数据交互</h1><h2 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h2><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027063.png" alt="image-20230703163750214"></p><p>复制内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AT+MQTTSUB=0,&quot;topic&quot;,1</span><br><span class="line">//&quot;topic&quot;改为我们刚刚复制的内容</span><br><span class="line"><span class="meta prompt_">///sys/iknjuQejQ6d/$</span><span class="language-bash">&#123;deviceName&#125;/thing/service/property/set</span></span><br><span class="line"><span class="meta prompt_">//$</span><span class="language-bash">&#123;deviceName&#125;用我们上文新建设备时候的name</span></span><br></pre></td></tr></table></figure><p>成功则显示在下图</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027281.png" alt="image-20230703164938420"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>按顺序操作</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027448.png" alt="image-20230703165357091"></p><p>可以看见右方返回参数，串口助手也返回了相关信息</p><h2 id="上报数据"><a href="#上报数据" class="headerlink" title="上报数据"></a>上报数据</h2><p>复制该内容</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027951.png" alt="image-20230703165552998"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AT+MQTTPUB=0,&quot;topic&quot;,&quot;data&quot;,1,0</span><br><span class="line">//&quot;topic&quot;选择复制的/sys/iknjuQejQ6d/$&#123;deviceName&#125;/thing/event/property/post</span><br><span class="line"><span class="meta prompt_">//$</span><span class="language-bash">&#123;deviceName&#125;填对应的deviceName</span></span><br><span class="line">//&quot;data&quot;采用json数据格式，&#123;\&quot;params\&quot;:&#123;\&quot;temperature\&quot;:20&#125;&#125;，其中temperature为属性的标识符</span><br></pre></td></tr></table></figure><p>成功上传数据！！！<img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027931.png" alt="image-20230703170245805"></p><h1 id="esp8266与MSP430f149的交互"><a href="#esp8266与MSP430f149的交互" class="headerlink" title="esp8266与MSP430f149的交互"></a>esp8266与MSP430f149的交互</h1><p>先找到引脚功能表</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050027824.png" alt="image-20230703183526488"></p><p>UART0在MSP430f169有现成的接口，用于和PC通信，UART1的TXD和RXD分别位于<code>P36</code>和<code>P37</code>这两个IO接口。</p><p>如下初始化设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UART1_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  U1CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U1CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U1TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U1BR1=<span class="number">0</span>;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U1BR0=<span class="number">69</span>;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U1MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME2|=UTXE1;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME2|=URXE1;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U1CTL&amp;=~SWRST;</span><br><span class="line">  IE2|=URXIE1;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT6;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT6;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UART1对应esp8266芯片，向其发送数据，相当于对它发送命令，其向主控机返回的信息，可以通过中断函数向UART0发送数据，显示在串口调试助手用于调试。</p><p>定义相关功能函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_0</span><span class="params">(uchar data)</span><span class="comment">//发至UART0</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG1&amp;UTXIFG0)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U0TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_1</span><span class="params">(uchar data)</span><span class="comment">//发至UART1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG2&amp;UTXIFG1)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U1TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_0</span><span class="params">( uchar *s)</span><span class="comment">//发至UART1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_0(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_1</span><span class="params">( <span class="type">char</span> *s)</span><span class="comment">//发至UART1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_1(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART1RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART1_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U1RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART0RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART0_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U0RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上功能就可以完成向阿里云转发上传温度数据了！</p><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;msp430f169.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DQOUT P1OUT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DQDIR P1DIR</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DQIN P1IN</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Port_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">P4SEL = <span class="number">0x00</span>;</span><br><span class="line">  P4DIR = <span class="number">0xFF</span>;                   <span class="comment">//数据口输出模式</span></span><br><span class="line">  P5SEL = <span class="number">0x00</span>;</span><br><span class="line">  P5DIR|= BIT5 + BIT6 + BIT7;     <span class="comment">//控制口设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DS18B20_Reset</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">  DQDIR|=BIT0;<span class="comment">//输出模式</span></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低电平,单片机拉低总线至少480us</span></span><br><span class="line">  delay_us(<span class="number">500</span>);</span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高电平</span></span><br><span class="line">  delay_us(<span class="number">70</span>); <span class="comment">//60-240内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">DS18B20_Check</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> retry=<span class="number">0</span>;</span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//置为输入模式，DS18B20会拉低电平</span></span><br><span class="line">  <span class="keyword">while</span>((DQIN&amp;BIT0)&amp;&amp;retry&lt;<span class="number">270</span>)&#123;</span><br><span class="line">    delay_us(<span class="number">1</span>);</span><br><span class="line">    retry++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(retry&gt;=<span class="number">270</span>)&#123;<span class="comment">//检测是否拉低了电平</span></span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没拉</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    delay_us(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//拉了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.单片机拉低总线至少480us，产生复位脉冲，然后释放总线（拉高电平）。</span></span><br><span class="line"><span class="comment">2.这时DS8B20检测到请求之后，会拉低信号，大约60~240us表示应答。</span></span><br><span class="line"><span class="comment">3.DS8B20拉低电平的60~240us之间，单片机读取总线的电平，如果是低电平，那么表示初始化成功</span></span><br><span class="line"><span class="comment">4.DS18B20拉低电平60~240us之后，会释放总线。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DS_Write_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span>&#123;</span><br><span class="line">  DQDIR|=BIT0;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> temp;    </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">    temp=data&amp;<span class="number">0x01</span>;<span class="comment">//处理位：最低位，通过移位来L-H逐位处理</span></span><br><span class="line">    data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp)&#123;<span class="comment">//1</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//0</span></span><br><span class="line">       DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">       delay_us(<span class="number">70</span>);</span><br><span class="line">       DQOUT|=BIT0;<span class="comment">//拉高</span></span><br><span class="line">       delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Bit</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data;</span><br><span class="line">  </span><br><span class="line">  DQDIR|=BIT0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  DQOUT&amp;=~BIT0;<span class="comment">//拉低</span></span><br><span class="line">  delay_us(<span class="number">2</span>);  </span><br><span class="line">  DQOUT|=BIT0;<span class="comment">//拉高，释放总线</span></span><br><span class="line">  </span><br><span class="line">  DQDIR&amp;=~BIT0;<span class="comment">//输入</span></span><br><span class="line">  delay_us(<span class="number">12</span>); </span><br><span class="line">  <span class="keyword">if</span>(DQIN&amp;BIT0)&#123;</span><br><span class="line">    data=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    data=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  delay_us(<span class="number">50</span>); </span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS_Read_Byte</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> data=<span class="number">0</span>,j;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">     data&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">     j=DS_Read_Bit();</span><br><span class="line">     <span class="keyword">if</span>(j)&#123;</span><br><span class="line">      data|=<span class="number">0x80</span>; </span><br><span class="line">     &#125;</span><br><span class="line">     delay_us(<span class="number">30</span>);    </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> data;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART0_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该位的状态影响着其他一些控制位和状态位的状态。在串行口的使用过程中，这一位是比较重要的控</span></span><br><span class="line"><span class="comment">  制位。一次正确的 USART 模块初始化应该是这样的顺序：先在 SWRST=1 情况下设置串行口；然后设置</span></span><br><span class="line"><span class="comment">  SWRST=0；最后如果需要中断，则设置相应的中断使能。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  U0CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U0CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U0TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U0BR1=<span class="number">0</span>;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U0BR0=<span class="number">69</span>;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U0MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME1|=UTXE0;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME1|=URXE0;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U0CTL&amp;=~SWRST;</span><br><span class="line">  IE1|=URXIE0;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT4;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT4;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART1_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  U1CTL|=SWRST;               <span class="comment">//复位SWRST</span></span><br><span class="line">  U1CTL|=CHAR;                <span class="comment">//8位数据模式 </span></span><br><span class="line">  U1TCTL|=SSEL1;              <span class="comment">//SMCLK为串口时钟</span></span><br><span class="line"></span><br><span class="line">  U1BR1=<span class="number">0</span>;               <span class="comment">//BRCLK=8MHZ,Baud=BRCLK/N</span></span><br><span class="line">  U1BR0=<span class="number">69</span>;               <span class="comment">//N=UBR+(UxMCTL)/8</span></span><br><span class="line">  U1MCTL=<span class="number">0x00</span>;                <span class="comment">//微调寄存器为0，波特率9600bps</span></span><br><span class="line">  ME2|=UTXE1;                 <span class="comment">//UART1发送使能</span></span><br><span class="line">  ME2|=URXE1;                 <span class="comment">//UART1接收使能</span></span><br><span class="line">  U1CTL&amp;=~SWRST;</span><br><span class="line">  IE2|=URXIE1;                <span class="comment">//接收中断使能位</span></span><br><span class="line">  </span><br><span class="line">  P3SEL|= BIT6;               <span class="comment">//设置IO口为普通I/O模式</span></span><br><span class="line">  P3DIR|= BIT6;               <span class="comment">//设置IO口方向为输出</span></span><br><span class="line">  P3SEL|= BIT7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_0</span><span class="params">(uchar data)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG1&amp;UTXIFG0)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U0TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Byte_1</span><span class="params">(uchar data)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((IFG2&amp;UTXIFG1)==<span class="number">0</span>);          <span class="comment">//发送寄存器空的时候发送数据</span></span><br><span class="line">    U1TXBUF=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_0</span><span class="params">( uchar *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_0(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_Str_to_1</span><span class="params">( <span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Send_Byte_1(*s++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DS18B20_Start</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;                  </span><br><span class="line">  DS18B20_Reset();   </span><br><span class="line">  aa=DS18B20_Check(); </span><br><span class="line">  DS_Write_Byte(<span class="number">0xcc</span>);<span class="comment">// skip rom</span></span><br><span class="line">  DS_Write_Byte(<span class="number">0x44</span>);<span class="comment">// convert</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="title function_">Read_Temper</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> TH,TL,sign=<span class="number">0</span>;</span><br><span class="line">  <span class="type">short</span> tem;</span><br><span class="line">  DS18B20_Start() ;</span><br><span class="line">  DS18B20_Reset(); <span class="comment">//DS18B20复位</span></span><br><span class="line">  DS18B20_Check(); </span><br><span class="line">  DS_Write_Byte(<span class="number">0xcc</span>);<span class="comment">// skip rom</span></span><br><span class="line">  DS_Write_Byte(<span class="number">0xbe</span>);<span class="comment">// convert</span></span><br><span class="line">  delay_us(<span class="number">750</span>);<span class="comment">//等待转换</span></span><br><span class="line">  TL=DS_Read_Byte();</span><br><span class="line">  TH=DS_Read_Byte();</span><br><span class="line">  <span class="keyword">if</span>(TH&lt;&lt;<span class="number">8</span>)&#123;</span><br><span class="line">    TH=~TH;</span><br><span class="line">    TL=~TL;</span><br><span class="line">    sign=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tem=TH;</span><br><span class="line">  tem&lt;&lt;=<span class="number">8</span>;</span><br><span class="line">  tem+=TL;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">//(((TH&lt;&lt;8) | TL)*0.0625);</span></span><br><span class="line">  tem=(<span class="type">float</span>)tem*<span class="number">0.625</span>;</span><br><span class="line">  <span class="keyword">if</span>(sign)&#123;</span><br><span class="line">    <span class="keyword">return</span> -tem;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> tem;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Display_Temp</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    LCD_write_char(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    t=<span class="number">-1</span>*t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> sw,gw,xs1,xs2;</span><br><span class="line">  <span class="type">short</span> bt=t;</span><br><span class="line">  xs1=bt%<span class="number">10</span>;</span><br><span class="line">  gw=(bt%<span class="number">100</span>-bt%<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">  sw=bt/<span class="number">100</span>;</span><br><span class="line">  LCD_write_char(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0x30</span>+sw);</span><br><span class="line">  LCD_write_char(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0x30</span>+gw);</span><br><span class="line">  LCD_write_char(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  LCD_write_char(<span class="number">4</span>,<span class="number">1</span>,<span class="number">0x30</span>+xs1);</span><br><span class="line">  delay_ms(<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">my_strcat</span><span class="params">(<span class="type">char</span> *str1, <span class="type">char</span> *str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* result; </span><br><span class="line">    <span class="keyword">while</span> (*str1 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        *result = *str1;</span><br><span class="line">        result++;</span><br><span class="line">        str1++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (*str2 != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        *result = *str2;</span><br><span class="line">        result++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *result = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在结果字符串末尾添加字符串结束标志</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">Do_Num2Str</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="type">char</span> str[<span class="number">5</span>]=&#123;<span class="number">0x30</span>+t/<span class="number">100</span>,<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>+t%<span class="number">10</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Send_temp_toPc</span><span class="params">(<span class="type">short</span> t)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* str=Do_Num2Str(t);</span><br><span class="line">    <span class="comment">//Send_Byte_0(0x30+t/100);</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> v=<span class="number">0x30</span>+(t%<span class="number">100</span>-t%<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//Send_Byte_0(v);</span></span><br><span class="line">    <span class="comment">//Send_Byte_0(0x2e);</span></span><br><span class="line">    <span class="comment">//Send_Byte_0(0x30+t%10);</span></span><br><span class="line">    Send_Str_to_0(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WIFI_GOT</span><span class="params">()</span>&#123;</span><br><span class="line">  delay_ms(<span class="number">3000</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+CWJAP=\&quot;SSID\&quot;,\&quot;PWD\&quot;\r\n&quot;</span>); </span><br><span class="line">  delay_ms(<span class="number">6000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Aliyun_conn</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+MQTTUSERCFG=0,1,\&quot;NULL\&quot;,\&quot;DEVICENAME\&quot;,&quot;</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;\&quot;\&quot;,0,0,\&quot;\&quot;\r\n&quot;</span>);</span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+MQTTCLIENTID=0,\&quot;\r\n&quot;</span>);</span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">  Send_Str_to_1(<span class="string">&quot;AT+MQTTCONN=0,\&quot;,1883,1\r\n&quot;</span>); </span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// Stop watchdog timer to prevent time out reset</span></span><br><span class="line">  WDTCTL = WDTPW + WDTHOLD;</span><br><span class="line">  Clock_Init();                       <span class="comment">//系统时钟设置</span></span><br><span class="line">  Port_init();</span><br><span class="line">  UART0_Init();</span><br><span class="line">  UART1_Init();</span><br><span class="line">  delay_ms(<span class="number">100</span>); </span><br><span class="line">  LCD_init();                         <span class="comment">//液晶参数初始化设置</span></span><br><span class="line">  LCD_clear();                     <span class="comment">//清屏</span></span><br><span class="line">  _EINT();</span><br><span class="line">  delay_ms(<span class="number">5000</span>);</span><br><span class="line">  WIFI_GOT();</span><br><span class="line">  Aliyun_conn();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    delay_ms(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">short</span> t=Read_Temper();</span><br><span class="line">    <span class="keyword">if</span>(aa==<span class="number">0</span>)&#123;</span><br><span class="line">      LCD_write_str(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;ok&quot;</span>); </span><br><span class="line">      delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(aa==<span class="number">1</span>)&#123;</span><br><span class="line">      LCD_write_str(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;no&quot;</span>); </span><br><span class="line">      delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Send_temp_toPc(t);</span><br><span class="line">    Display_Temp(t);</span><br><span class="line">    <span class="type">char</span>* temS=Do_Num2Str(t);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      Send_Str_to_1(<span class="string">&quot;AT+MQTTPUB=0,\&quot;/sys/a1grBfxFQal/esp8266/thing/event/property/post\&quot;,\&quot;&#123;\\\&quot;params\\\&quot;:&#123;\\\&quot;CurrentTemperature\\\&quot;:&quot;</span>);</span><br><span class="line">      Send_Str_to_1(temS);</span><br><span class="line">      Send_Str_to_1(<span class="string">&quot;&#125;&#125;\&quot;,1,0\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LCD_clear();</span><br><span class="line">    delay_ms(<span class="number">1000</span>); </span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART1RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART1_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U1RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收中断</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=UART0RX_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">UART0_RX_ISR</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  uchar data;</span><br><span class="line">  data=U0RXBUF;                       <span class="comment">//接收到的数据存起来</span></span><br><span class="line">  Send_Byte_0(data);                    <span class="comment">//将接收到的数据再发送出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过阿里云平台<code>IoT Sutdio</code>可以开发一个物联网APP来方便查看温度</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307050042551.png" alt="image-20230705003904473"></p><h1 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h1><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202307051322217.png" alt="image-20230705132215490"></p><p><strong>An unforgettable journey！！！</strong></p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> MSP430 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS_课设</title>
      <link href="/post/8961/"/>
      <url>/post/8961/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="配置VScode"><a href="#配置VScode" class="headerlink" title="配置VScode"></a>配置VScode</h1><ul><li><p>安装C/C++扩展</p></li><li><p>安装完成之后，直接在VsCode中按 <code>ctrl+shift+p</code>快捷键,选择<code>C/C++编辑UI</code>。</p></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006628.png" alt="image-20230618182000074"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182035387.png" alt="image-20230618171213466"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006081.png" alt="image-20230618171938200"></p><ul><li><p>在目录下新建<code>output</code>文件夹，在task.json中划线部分修改为<code>output</code>，这样生成的<code>exe</code>就会保存至<code>/output</code>文件夹下</p><p>  <img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006200.png" alt="image-20230618182628771"></p></li></ul><p>我想让程序输出在外部终端，发现C/C++插件现在的版本无法做到这一点，需要回退，而我的vscode TMD无法安装这个插件的历史版本，于是经过搜索知道，在<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">网页</a>抓包把版本信息替换为想要的版本 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-vscode/vsextensions/cpptools/1.8.4/vspackage?targetPlatform=win32-x64</span><br></pre></td></tr></table></figure><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006466.png" alt="image-20230618195057503"></p><p>在<code>lauch.json</code>中添加<code>&quot;externalConsole&quot;: true</code></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006392.png" alt="image-20230618195230187"></p><p>输出如图：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182006298.png" alt="image-20230618195535278"></p><p>是的，又出现了中文乱码！！！！而在vscode内部终端则正常，一眼丁真鉴定为，cmd的编码。经过查询，按以下方法可以成功更改编码。</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182007512.png" alt="image-20230618195918187"></p><p>在cmd输入<code>chcp</code>返回<code>Active code page: 65001</code>说明成功更改为<code>utf-8</code></p><p>再次运行：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182007626.png" alt="image-20230618200530767"></p><p>成功！，虽然字体也变了的说，但是也可以接受吧。。。</p><p>不要忘记修改<code>output</code>文件夹配置：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182035173.png" alt="image-20230618202224084"></p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306182035234.png" alt="image-20230618202301910"></p><h1 id="OS文件系统知识梳理"><a href="#OS文件系统知识梳理" class="headerlink" title="OS文件系统知识梳理"></a>OS文件系统知识梳理</h1><ul><li>定义：文件就是一组有意义的信息/数据的集合</li><li>属性<ul><li>文件名 ：同一目录下不允许有重名文件</li><li>标识符：具有唯一性，用于区分各个文件的一种内部名称</li><li>文件类型</li><li>位置：文件存放的路径（用户使用），在外层中的地址（OS使用，对用户透明）</li><li>大小</li><li>创建时间，上次修改时间</li><li>文件所有者信息</li><li>保护信息：对文件进行保护的访问控制信息</li></ul></li></ul><h2 id="文件内部的组织形式（逻辑结构）"><a href="#文件内部的组织形式（逻辑结构）" class="headerlink" title="文件内部的组织形式（逻辑结构）"></a>文件内部的组织形式（逻辑结构）</h2><p>所谓逻辑结构就是站在用户的观点来看，文件内部的数据应该是如何组织起来的</p><ul><li><p>无结构文件,如.txt,由一些二进制和字符流组成，又称为流式文件</p></li><li><p>有结构文件，如.csv,sql_table,由一组相似的记录组成，又称记录文件</p><p>  根据各条长度是否相等，分为定长记录和可变长记录(常见)</p><ul><li><p>记录是一组相关数据项的集合，和sql的元组很像捏</p></li><li><p>逻辑结构</p><ul><li><p>顺序文件：记录间在逻辑上顺序排列，记录可定长可变长</p><ul><li><p>又分为串（记录之间的顺序于关键字无关，通常按存放顺序）和顺序结构（记录之间的顺序按关键字顺序排列）</p></li><li><p>存储</p><ul><li><p>链式存储</p></li><li><p>顺序存储</p><p>  <img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152401.png" alt="image-20230619094303733"></p></li></ul></li><li><p>索引文件</p><ul><li><p>对于可变长的记录文件，使用顺序文件的逻辑结构时，访问第i条记录，需要重头遍历，对于此类文件，我们采用索引文件结构。因为索引文件本身是定长记录，因此可以快速找到第i个记录对应的索引项，将索引号作为关键字，可实现顺序结构，支持折半查找。</p><p>| 索引号 | 长度m | 指针ptr |<br>| :——: | :—-: | ———- |<br>|   0    | $m_0$ |         |<br>|  …   |  …  |         |<br>|   i    | $m_i$ |         |</p></li></ul></li><li><p>索引顺序文件</p><ul><li>每个索引项对应一个记录，可能索引文件会比文件本身大，降低存储空间利用率，因此采用索引文件和顺序文件的折中。</li><li>与索引文件区别是，它的索引项指向的是一组记录</li></ul></li><li><p>多级索引顺序文件</p><ul><li>如果文件超大，需要采用，类似二级页表</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote><p>目录是一种数据结构，用于标志系统中的文件及其物理位置</p><p>供检索时使用</p></blockquote><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152291.png" alt="image-20230619100732670"></p><ul><li><p>文件控制块(FCB)</p><ul><li><p>FCB的有序集合称为文件目录，FCB包括基本信息(文件名，物理地址，逻辑结构，物理结构)，存取控制信息，使用信息。最重要的就是文件名和文件存放的物理地址，可以实现按名存取。</p></li><li><p>操作</p><ul><li><p>搜索，用户使用文件系统需要根据文件名搜索目录，找到该文件对应的目录项</p></li><li><p>创建文件，创建一个新文件，需要在其所属的目录中增加一个目录项</p></li><li><p>删除文件，需要在所属目录删除对应的目录项</p></li><li><p>显示目录，显示目录的文件和属性</p></li><li><p>修改目录，某些文件属性保存在目录中，当这些属性变化时需要修改目录</p></li><li><p>结构</p><ul><li><p>单级目录</p><ul><li>实现了按名存取，但是不允许文件重名</li></ul></li><li><p>两级目录</p><ul><li><p>分为：</p><ul><li><p>主文件目录（MFD）<br>  | 列名1 | 列名2 | 列名3 |<br>  | ——- | ——- | ——- |<br>  | 内容1 | 内容2 | 内容3 |<br>  | 内容4 | 内容5 | 内容6 |</p><p>  |  MFD  |<br>  | ——- |<br>  | User1 |<br>  |  …  |</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>                - 用户文件目录（UFD）                    | 文件名 | ..   | 存放位置 |                    | :-----: | ----- | :-----: |                    |   a    |      |   ...    |                    |   b    |      |    ..    |                两级目录不同用户允许文件重名，也可以实现在目录上实现访问限制            - 多级目录（树形目录结构）                - ![image-20230619110407145](https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152388.png)            - 无环图目录结构                - ![image-20230619111003269](https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152015.png)</code></pre><h2 id="应提供的功能"><a href="#应提供的功能" class="headerlink" title="应提供的功能"></a>应提供的功能</h2><ul><li><p>创建文件</p><ul><li><p>需要提供</p><ul><li>所需外存空间大小(如：一个盘块,1KB)</li><li>文件存放路径(D:/Demo)</li><li><p>文件名</p></li><li><p>OS做的事情:</p><ul><li>在外存中找到文件所需空间</li><li>根据路径信息，找到该目录对应的目录文件</li><li>在目录中添加该文件的目录项</li></ul></li></ul></li></ul></li><li><p>读文件</p><ul><li>需要提供<ul><li>打开文件表的文件编号</li><li>指明读入多少数据</li><li>放在内存的位置</li></ul></li><li>OS做的事情<ul><li>将r指针指向的外存中，将用户指定大小的数据读入用户指定的内存区域</li></ul></li></ul></li><li><p>写文件</p><ul><li>需要提供<ul><li>打开文件表的文件编号</li><li>写回多少数据</li><li>写会外存的数据放在内存中的位置</li></ul></li><li>OS做的事情<ul><li>从指定的内存中，将用户指定大小的数据写回w指针指向的外存</li></ul></li></ul></li><li><p>删除文件</p><ul><li>需要提供<ul><li>存放路径</li><li>文件名</li></ul></li><li>OS做的事情<ul><li>找到文件名对应的目录项</li><li>根据该目录项在外存的位置，文件大小等信息,回收文件占用的磁盘块</li><li>删除对应目录项</li></ul></li></ul></li><li><p>打开文件</p><ul><li><p>需要提供</p><ul><li>存放路径</li><li>文件名</li><li>操作类型（r,rw等）</li></ul></li><li><p>OS做的事情</p><ul><li><p>根据路径找到目录文件</p></li><li><p>检查用户是否具有指定的操作权限</p></li><li><p>将目录项复制到内存中的”打开文件表”中，并将对应表目的编号返回给用户，之后用户使用打开文件表的编号来指明要操作的文件。</p><p>  <img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152267.png" alt="image-20230619113515732"></p></li></ul></li></ul></li><li><p>关闭文件</p><ul><li>需要提供<ul><li>打开文件表</li></ul></li><li>OS做的事情<ul><li>将进程的打开文件表的对应表项删除</li><li>回收分配给该文件的内存空间等资源</li><li>系统表打开计数器-1，如果为0则删除系统表对应表项。</li></ul></li></ul></li></ul><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152802.png" alt="image-20230619115042260"></p><h2 id="如何存放在外存（物理结构）："><a href="#如何存放在外存（物理结构）：" class="headerlink" title="如何存放在外存（物理结构）："></a>如何存放在外存（物理结构）：</h2><p>物理结构就是从OS的观点来看，文件的数据如何存放在外存中的</p><ul><li><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202306191152371.png" alt="image-20230619091646943"></li></ul><p>其他功能：文件共享，文件保护</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string command;<span class="comment">//用户指令</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; path_list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">File</span>&#123;<span class="comment">//定义文件信息</span></span><br><span class="line">    string filename;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    string content=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">time_t</span> time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>&#123;<span class="comment">//定义用户信息</span></span><br><span class="line">    string user_name;</span><br><span class="line">    string pwd; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir</span>&#123; <span class="comment">//目录信息</span></span><br><span class="line">    string dir_name;</span><br><span class="line">    vector&lt;<span class="keyword">struct</span> File&gt; file;</span><br><span class="line">    vector&lt;<span class="keyword">struct</span> Dir&gt; dir;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir_Node</span>&#123;<span class="comment">//目录联系信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir</span> dir;</span><br><span class="line">    vector&lt;<span class="keyword">struct</span> Dir_Node*&gt; child;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Thread_Open_File_Table</span>&#123;<span class="comment">//进程打开文件列表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">File</span> file;</span><br><span class="line">    <span class="type">int</span> permission; <span class="comment">//1读，2写，3读写 </span></span><br><span class="line">    <span class="type">char</span>* p;<span class="comment">//读写指针</span></span><br><span class="line">    <span class="type">int</span> index;<span class="comment">//系统索引号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sys_Open_File_Table</span>&#123;<span class="comment">//系统打开文件列表</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">File</span> file;</span><br><span class="line">    <span class="type">int</span> permission; <span class="comment">//1读，2写，3读写 </span></span><br><span class="line">    <span class="type">char</span>* p;<span class="comment">//读写指针</span></span><br><span class="line">    <span class="type">int</span> index;<span class="comment">//系统索引号</span></span><br><span class="line">    <span class="type">int</span> count;<span class="comment">//引用计数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">struct</span> User&gt; MFD; <span class="comment">//主目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Welcome</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Command_Judge</span><span class="params">(string command)</span></span>; <span class="comment">//判断指令</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_User</span><span class="params">()</span></span>;<span class="comment">//创建用户</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show_User</span><span class="params">()</span></span>; <span class="comment">//显示用户信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Login_In</span><span class="params">(<span class="keyword">struct</span> User u)</span></span>; <span class="comment">//用户登录判定</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dir</span><span class="params">()</span></span>; <span class="comment">////显示当前目录下的文件信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Node_Dir</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd</span><span class="params">(string dir_name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd_Rollback</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MkDir</span><span class="params">(string dir_name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Open</span><span class="params">(string filename)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Read</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Write</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Create</span><span class="params">(string fileName)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showU</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowFileInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *pDir_root=<span class="keyword">new</span> Dir_Node;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *pCurDir=pDir_root; <span class="comment">//当前目录</span></span><br><span class="line">vector&lt;<span class="keyword">struct</span> Sys_Open_File_Table&gt; SOFT; <span class="comment">//系统打开文件表</span></span><br><span class="line">vector&lt;<span class="keyword">struct</span> Thread_Open_File_Table&gt; TOFT;<span class="comment">//进程打开文件表</span></span><br><span class="line"><span class="type">time_t</span> now_time; <span class="comment">//时间戳变量</span></span><br><span class="line">string Login_In_status=<span class="string">&quot;&quot;</span>;<span class="comment">//登录状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Welcome</span>();</span><br><span class="line">    pDir_root-&gt;dir.dir_name=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    pDir_root-&gt;parent=<span class="literal">nullptr</span>;</span><br><span class="line">    path_list.<span class="built_in">push_back</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        now_time=<span class="built_in">time</span>(<span class="literal">NULL</span>);<span class="comment">//实时时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path_list.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==path_list.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                cout&lt;&lt;path_list[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;path_list[i]&lt;&lt;<span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Login_In_status!=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;Login_In_status&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;: &gt;&gt;&gt; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;command;</span><br><span class="line">        <span class="built_in">Command_Judge</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Command_Judge</span><span class="params">(string command)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(command==<span class="string">&quot;help&quot;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;dir-----显示当前目录文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;mkdir-----新建目录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;cd-----切换到指定目录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;cd..-----回退一级目录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;del-----删除文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;open-----打开文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;create-----新建文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;read-----读文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;write-----写文件&quot;</span>&lt;&lt;endl;        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;close-----关闭文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;create_user-----创建用户&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;login-----用户登录&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;showU-----显示用户信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;showF-----显示文件详细信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;dir&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Dir</span>();</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;exit&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;create_user&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Create_User</span>();</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">struct</span> User u;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入用户名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;u.user_name;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入密码&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;u.pwd;</span><br><span class="line">        <span class="built_in">Login_In</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;cd&quot;</span>)&#123;</span><br><span class="line">        string dir_name;</span><br><span class="line">        cin&gt;&gt;dir_name;</span><br><span class="line">        <span class="built_in">Cd</span>(dir_name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;cd..&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Cd_Rollback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;mkdir&quot;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入新建目录名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string dir_name;</span><br><span class="line">        cin&gt;&gt;dir_name;</span><br><span class="line">        <span class="built_in">MkDir</span>(dir_name);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;create&quot;</span>)&#123;</span><br><span class="line">        string fileName;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;fileName;</span><br><span class="line">        <span class="keyword">while</span>(fileName.<span class="built_in">find</span>(<span class="string">&quot;/&quot;</span>)!=std::string::npos)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件名不能包含&#x27;/&#x27; !!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cin&gt;&gt;fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fileName.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>)==std::string::npos||fileName.<span class="built_in">find</span>(<span class="string">&quot;.&quot;</span>)==fileName.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;文件必须有后缀 !!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cin&gt;&gt;fileName;</span><br><span class="line">        &#125;         </span><br><span class="line">       </span><br><span class="line">        <span class="built_in">Os_Create</span>(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;open&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string fileName;</span><br><span class="line">        cin&gt;&gt;fileName;</span><br><span class="line">        <span class="built_in">Os_Open</span>(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;write&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Os_Write</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;read&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Os_Read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;showU&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">showU</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">&quot;showF&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">ShowFileInfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;不是命令&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Login_In</span><span class="params">(<span class="keyword">struct</span> User u)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MFD[i].user_name==u.user_name)&#123;</span><br><span class="line">            <span class="keyword">if</span>(MFD[i].pwd==u.pwd)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;登录成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">                Login_In_status=u.user_name;<span class="comment">//登录状态改变</span></span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==u.user_name)&#123;</span><br><span class="line">                        pCurDir=pCurDir-&gt;child[i];</span><br><span class="line">                        path_list.<span class="built_in">push_back</span>(u.user_name);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;密码错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;用户名不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dir</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;pCurDir-&gt;child[i]-&gt;dir.dir_name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;pCurDir-&gt;dir.file[i].filename&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Node_Dir</span><span class="params">(<span class="keyword">struct</span> Dir_Node *pcurDir, <span class="keyword">struct</span> Dir newDir)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *child_node=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    child_node-&gt;dir=newDir;</span><br><span class="line">    child_node-&gt;parent=pcurDir;</span><br><span class="line"></span><br><span class="line">    pcurDir-&gt;child.<span class="built_in">push_back</span>(child_node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Node_File</span><span class="params">(<span class="keyword">struct</span> Dir_Node *pcurDir, <span class="keyword">struct</span> Dir newDir)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *child_node=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    child_node-&gt;dir.file=newDir.file;</span><br><span class="line">    child_node-&gt;parent=pcurDir;</span><br><span class="line"></span><br><span class="line">    pcurDir-&gt;child.<span class="built_in">push_back</span>(child_node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;非根目录无法创建用户!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">User</span> u;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入用户名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;u.user_name;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入密码&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;u.pwd;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(MFD[i].user_name==u.user_name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户名已存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MFD.<span class="built_in">push_back</span>(u);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *dn=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir</span> d;</span><br><span class="line">    d.dir_name=u.user_name;</span><br><span class="line">    dn-&gt;dir=d;</span><br><span class="line">    <span class="built_in">Insert_Node_Dir</span>(pCurDir, dn-&gt;dir);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd</span><span class="params">(string dir_name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent==<span class="literal">nullptr</span>)&#123;<span class="comment">//判断是否为根目录</span></span><br><span class="line">        <span class="keyword">if</span>(Login_In_status==<span class="string">&quot;no&quot;</span>)&#123;<span class="comment">//判断是否登录</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;请先登录&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(Login_In_status==dir_name)&#123;<span class="comment">//判断是否为当前用户</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==dir_name)&#123;</span><br><span class="line">                        pCurDir=pCurDir-&gt;child[i];</span><br><span class="line">                        path_list.<span class="built_in">push_back</span>(dir_name);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==dir_name)&#123;</span><br><span class="line">            pCurDir=pCurDir-&gt;child[i];</span><br><span class="line">            path_list.<span class="built_in">push_back</span>(dir_name);</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;目录不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cd_Rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent==<span class="literal">nullptr</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已经到达最顶级目录！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        pCurDir=pCurDir-&gt;parent;</span><br><span class="line">        path_list.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MkDir</span><span class="params">(string dir_name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pCurDir-&gt;parent==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;根目录无法创建非用户目录!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;child[i]-&gt;dir.dir_name==dir_name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;目录已存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir_Node</span> *dn=<span class="keyword">new</span> Dir_Node;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Dir</span> d;</span><br><span class="line">    d.dir_name=dir_name;</span><br><span class="line">    dn-&gt;dir=d;</span><br><span class="line">    <span class="built_in">Insert_Node_Dir</span>(pCurDir, dn-&gt;dir);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Open</span><span class="params">(string filename)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==filename)&#123;</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;文件不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Thread_Open_File_Table</span> toft;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Sys_Open_File_Table</span> soft;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;<span class="comment">//标志系统打开文件表是否存在该文件</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;权限: 1:读   2.写    3.读写&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> s;</span><br><span class="line">        cin&gt;&gt;s;<span class="comment">//声明权限</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="number">1</span>)</span><br><span class="line">            toft.permission=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">2</span>)</span><br><span class="line">            toft.permission=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">3</span>)</span><br><span class="line">            toft.permission=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在系统打开表中寻找,根据文件名</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;SOFT.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(SOFT[i].file.filename==filename)&#123;<span class="comment">//存在则计数器加一，并复制到进程的打开文件表中</span></span><br><span class="line">                soft.file.filename=filename;</span><br><span class="line">                SOFT[i].count++;</span><br><span class="line">                toft.file.filename=filename;</span><br><span class="line">                toft.index=i; <span class="comment">//系统打开文件表的编号作为进程打开文件表的索引</span></span><br><span class="line">                TOFT.<span class="built_in">push_back</span>(toft);</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;<span class="comment">//不存在则，加入到系统的打开文件表，并复制到进程的打开文件表中</span></span><br><span class="line">            soft.file.filename=filename;</span><br><span class="line">            soft.count=<span class="number">1</span>;</span><br><span class="line">            SOFT.<span class="built_in">push_back</span>(soft);</span><br><span class="line">            toft.file.filename=filename;</span><br><span class="line">            toft.index=SOFT.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            TOFT.<span class="built_in">push_back</span>(toft);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;打开成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string fileName;</span><br><span class="line">    <span class="type">int</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> flag2=<span class="literal">false</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;fileName;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==fileName)&#123;<span class="comment">//寻找目录是否存在该文件名</span></span><br><span class="line">            flag=<span class="literal">true</span>; <span class="comment">//存在</span></span><br><span class="line">            <span class="comment">// 查找进程打开文件表是否存在</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;TOFT.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(TOFT[j].file.filename==fileName)&#123;</span><br><span class="line">                    flag2=<span class="literal">true</span>; <span class="comment">//存在</span></span><br><span class="line">                    <span class="keyword">if</span>(TOFT[j].permission==<span class="number">2</span>||TOFT[j].permission==<span class="number">3</span>)&#123;<span class="comment">//判断权限</span></span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;输入内容&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        string content;</span><br><span class="line">                        cin&gt;&gt;content;</span><br><span class="line">                        pCurDir-&gt;dir.file[i].content=content;</span><br><span class="line">                        pCurDir-&gt;dir.file[i].size=content.<span class="built_in">size</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;没有写权限&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2==<span class="literal">false</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件未打开&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前目录不存在该文件&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;写入成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> flag2=<span class="literal">false</span>;</span><br><span class="line">    string fileName;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;fileName;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==fileName)&#123;<span class="comment">//判断当前目录是否存在该文件</span></span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;TOFT.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(TOFT[j].file.filename==fileName)&#123;<span class="comment">//判断进程打开文件表是否存在该文件</span></span><br><span class="line">                    flag2=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(TOFT[j].permission==<span class="number">1</span>||TOFT[j].permission==<span class="number">3</span>)&#123;<span class="comment">//判断权限</span></span><br><span class="line">                        cout&lt;&lt;pCurDir-&gt;dir.file[i].content&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;没有读权限&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2==<span class="literal">false</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;文件未打开&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前目录不存在该文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Del</span><span class="params">(string filename)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==filename)&#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            pCurDir-&gt;dir.file.<span class="built_in">erase</span>(pCurDir-&gt;dir.file.<span class="built_in">begin</span>()+i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前目录不存在该文件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;删除成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Create</span><span class="params">(string fileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pCurDir-&gt;dir.file[i].filename==fileName)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;当前目录已存在该文件，无法继续创建&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">File</span> file;</span><br><span class="line">    file.filename=fileName;</span><br><span class="line">    file.size=file.content.<span class="built_in">size</span>();</span><br><span class="line">    file.time=now_time;</span><br><span class="line">    pCurDir-&gt;dir.file.<span class="built_in">push_back</span>(file);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show_User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;MFD[i].user_name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showU</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;用户名&quot;</span>&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MFD.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;MFD[i].user_name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Os_Close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string filename;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入文件名&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;TOFT.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(TOFT[i].file.filename==filename)&#123;</span><br><span class="line">            SOFT[TOFT[i].index].count--;</span><br><span class="line">            <span class="keyword">if</span>(SOFT[TOFT[i].index].count==<span class="number">0</span>)</span><br><span class="line">                SOFT.<span class="built_in">erase</span>(SOFT.<span class="built_in">begin</span>()+TOFT[i].index);</span><br><span class="line">            TOFT.<span class="built_in">erase</span>(TOFT.<span class="built_in">begin</span>()+i);</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;关闭成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowFileInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout.<span class="built_in">setf</span>(ios::right);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;文件名\t\t文件大小\t创建时间戳\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pCurDir-&gt;dir.file.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;pCurDir-&gt;dir.file[i].filename&lt;&lt;<span class="string">&quot;\t\t&quot;</span>&lt;&lt;pCurDir-&gt;dir.file[i].size&lt;&lt;<span class="string">&quot;\t\t&quot;</span>&lt;&lt;pCurDir-&gt;dir.file[i].time&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">        cout.<span class="built_in">unsetf</span>(ios::right);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;欢迎使用文件系统&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入help以查看帮助&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-------------------------------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库复习</title>
      <link href="/post/51347/"/>
      <url>/post/51347/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="1-1-GO"><a href="#1-1-GO" class="headerlink" title="1.1 GO"></a>1.1 GO</h2><p>数据：描述事物的<strong>符号</strong>记录。</p><p>数据库：数据库是长期储存在计算机内、有组织的、可共享的大量数据的<strong>集合</strong>。</p><p>数据库管理系统：数据库管理系统是位于<strong>用户与操作系统</strong>之间的一层数据管理<strong>软件</strong>，它是一个大型复杂的软件系统，它主要用于科学地组织和存储数据、高效地获取和维护数据。</p><ul><li>数据库管理系统的功能：<ul><li>数据定义功能</li><li>数据组织，存储和管理</li><li>数据操纵功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li></ul></li></ul><p>数据库系统=数据库+数据库管理系统+应用程序+数据库管理员（DBA）</p><p><strong>数据库系统的特点：</strong></p><ul><li><p><strong>数据结构化</strong></p><blockquote><p>数据的整体结构化是数据库的主要特征之一，它不再仅仅针对某一个应用，而是面向全组织，不仅数据内部结构化，整体也是结构化的，数据之间具有联系，数据记录可以变长，数据的最小存取单位是数据项。</p></blockquote></li><li><p><strong>数据的共享性高，冗余度低且易扩充</strong></p><ul><li>数据共享好处<ul><li>减少数据冗余，节约存储空间。</li><li>避免数据之间的不相容性与不一致性。</li><li>使系统易于扩充。</li></ul></li></ul></li><li><p><strong>数据独立性高</strong></p><blockquote><p>数据独立性由数据库管理系统的二级映像功能来保证，它主要分为：物理独立性和逻辑独立性。<br>物理独立性：指<strong>用户的应用程序</strong>与数据库中数据的物理存储是相互独立的，当数据的物理存储改变了，应用程序不用改变。<br>逻辑独立性：指<strong>用户的应用程序</strong>与数据库中数据的逻辑结构是相互独立的，当数据的逻辑结构改变了，应用程序不用改变。</p></blockquote></li><li><p><strong>数据由数据库管理系统统一管理和控制</strong></p><blockquote><p>数据库管理系统提供的数据控制功能。<br>（1）、数据的安全性（Security）保护：保护数据以防止不合法的使用造成的数据的泄密和破坏。<br>（2）、数据的完整性（Integrity）检查：保证数据的正确性、有效性和相容性。<br>（3）、并发（Concurrency）控制：对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。<br>（4）、数据库恢复（Recovery）技术：将数据库从错误状态恢复到某一已知的正确状态。</p></blockquote></li></ul><h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p><strong>数据模型</strong>是对现实世界数据特征的抽象</p><p>数据模型是数据库系统的核心和基础。</p><p>数据模型的要求：</p><ul><li>能比较真实地模拟现实世界。</li><li>容易为人所理解。</li><li>便于在计算机上实现。</li></ul><p>两类数据模型：</p><ul><li><p>概念模型</p><blockquote><p>概念模型也称信息模型，它是<strong>按用户的观点</strong>来对数据和信息建模，用于数据库设计.</p></blockquote><p>  概念模型的用途:</p><ul><li>概念模型用于信息世界的建模。</li><li>是现实世界到机器世界的一个中间层次。</li><li>是数据库设计的有力工具。</li><li><p>数据库设计人员和用户之间进行交流的语言。</p><p>概念模型的要求：</p></li><li><p>较强的语义表达能力。</p></li><li><p>简单、清晰、易于用户理解。</p><p>概念模型的表示：</p></li><li><p>实体-联系法，该方法使用E-R图来描述现实世界的概念模型，E-R方法也被称为E-R模型</p><p>信息世界的基本概念：</p></li><li><p>实体（Entity）：客观存在并可相互区别的事物称为实体。</p></li><li>属性（Attribute）：实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画。例如学生实体可以由学号、姓名、性别、出生年份、系、入学时间等属性组成。（94002268，张山，男，1976，计算机系，1994）这些属性组合起来表征了一个学生。</li><li>码（Key）：唯一标识实体的属性集称为码。例如学号是学生实体的码。</li><li>域（Domain）：属性的取值范围称为该属性的域。例如，学号的域为8位整数，姓名的域为字符串集合，年龄的域为小于38的整数，性别的域为（男，女）。</li><li>实体型（Entity Type） ：具有相同属性的实体必然具有共同的特征和性质。用<strong>实体名及其属性名</strong>集合来抽象和刻画同类实体，称为实体型。例如，学生（学号，姓名，性别，出生年份，系，入学时间）就是一个实体型。</li><li>实体集（Entity Set）：同型实体的集合称为实体集。例如，全体学生就是一个实体集。</li><li>联系（Relationship） ：在现实世界中，事物内部以及事物之间是有联系的，这些联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。实体内部的联系通常是指组成实体的各属性之间的联系。实体之间的联系通常是指不同实体集之间的联系。<ul><li>类型<ul><li>1:1</li><li>1:n</li><li>m:n</li></ul></li></ul></li></ul></li><li><p>逻辑模型和物理模型</p><blockquote><ul><li>逻辑模型主要包括层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。<strong>按计算机系统的观点</strong>对数据建模，用于DBMS实现。</li><li>物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li></ul></blockquote></li></ul><p>常见的数据模型：</p><ul><li>层次模型（Hierarchical Model）</li><li>网状模型（Network Model）</li><li>关系模型（Relational Model)）<ul><li>优点<ul><li>建立在严格的数学概念的基础上。</li><li>概念单一。</li><li>关系模型的存取路径对用户透明。</li></ul></li><li>缺点<ul><li>存取路径对用户透明，查询效率往往不如格式化数据模型。</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度。</li></ul></li></ul></li><li>面向对象数据模型（Object Oriented Data Model）</li><li>对象关系数据模型（Object Relational Data Model）</li><li>半结构化数据模型（Semistruture Data Model）</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Git添加代理</title>
      <link href="/post/40467/"/>
      <url>/post/40467/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git config --global 协议.proxy 协议://ip地址:端口号</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">只对github.com</span></span><br><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:7891</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消代理</span></span><br><span class="line">git config --global --unset http.https://github.com.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给markdown文档添加参考文献引用</title>
      <link href="/post/38234/"/>
      <url>/post/38234/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## Markdown 增加文献引用</span><br><span class="line"></span><br><span class="line">这边文章是介绍如何在 Markdown 中增加文献引用。[<span class="tag">&lt;<span class="name">sup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>](#refer-anchor-1)</span><br><span class="line"></span><br><span class="line">## 参考</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- [1] [百度学术](http://xueshu.baidu.com/)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- [2] [Wikipedia](https://en.wikipedia.org/wiki/Main_Page)</span><br></pre></td></tr></table></figure><h2 id="Markdown-增加文献引用"><a href="#Markdown-增加文献引用" class="headerlink" title="Markdown 增加文献引用"></a>Markdown 增加文献引用</h2><p>这边文章是介绍如何在 Markdown 中增加文献引用。<a href="#refer-anchor-1"><sup>1</sup></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div id="refer-anchor-1"></div><ul><li>[1] <a href="http://xueshu.baidu.com/">百度学术</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2] <a href="https://en.wikipedia.org/wiki/Main_Page">Wikipedia</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS_PV操作</title>
      <link href="/post/10384/"/>
      <url>/post/10384/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="什么是PV操作"><a href="#什么是PV操作" class="headerlink" title="什么是PV操作"></a>什么是PV操作</h1><p>PV操作就是荷兰语<strong>P</strong>asseren（通过），<strong>V</strong>rijgeven（释放）的简称。对应的就是wait等待，signal释放操作。</p><p>P操作就是，将进程从运行态转化为阻塞态，直到它被另一个进程唤醒</p><p>V操作就是，将一个处于阻塞态的进程唤醒。</p><h1 id="P操作"><a href="#P操作" class="headerlink" title="P操作"></a>P操作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=s<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span>(s&lt;<span class="number">0</span>)&#123;</span><br><span class="line">P();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="V操作"><a href="#V操作" class="headerlink" title="V操作"></a>V操作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=s+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(s&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">V();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抢占式优先级调度算法和非抢占式优先级调度算法"><a href="#抢占式优先级调度算法和非抢占式优先级调度算法" class="headerlink" title="抢占式优先级调度算法和非抢占式优先级调度算法"></a>抢占式优先级调度算法和非抢占式优先级调度算法</h1><p>抢占式优先级调度算法可以使当前正在执行的进程被更高优先级的进程所打断，并立即切换到新的进程。这种调度算法通常会导致频繁的上下文切换，但是可以保证高优先级进程的响应时间，从而提高系统的实时性能。</p><p>而非抢占式优先级调度算法则不允许其他进程打断当前进程的执行，只有在当前进程自愿放弃CPU控制权时才会进行进程切换。这种调度算法相对稳定，但是可能会导致低优先级进程长时间等待，影响系统的响应速度和实时性能。</p><p>即抢占式优先级调度算法进行V操作时，唤醒的进程为优先级最高的进程，而非抢占式优先级调度算法的V操作则无作为，继续执行当前进程，完成后再执行其他进程。</p></div>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> PV操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_3_无重复字符的最长子串</title>
      <link href="/post/11029/"/>
      <url>/post/11029/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 $s$ ，请你找出其中不含有重复字符的  <strong>最长子串</strong>  的长度。</p><p> <strong>示例 1:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p> <strong>示例 2:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p> <strong>示例 3:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong> </p><ul><li>$0 &lt;= s.length &lt;= 5 * 10^{4}$</li><li>$s$ 由英文字母、数字、符号和空格组成</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>朴素的思想就是设置双重循环，外循环<code>i</code>根据字符串长度确定循环次数，内循环指针<code>j</code>指向，外循环当前的指针<code>i</code>，从<code>j</code>向后遍历一个字符，根据map的特性来得到本轮的最大无重复字串的长度，存储到<code>temp</code>，每轮内循环结束，就比较和<code>max</code>的大小，更新<code>max</code>.</p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDA[初始化map,temp&#x3D;0,max&#x3D;0]--&gt;B[设置双循环,遍历字符串]--&gt;E[外循环 i 从头遍历字符串]--&gt;C[内循环指针j指向外循环变量i,并向后遍历]--&gt;D{当前指针所指\n字符是否已在\nmap的key中?}--是--&gt;F[比较temp与max更新max,打破内循环]--&gt;ED--否--&gt;G[temp++,\n当前字符加入map]--&gt;H{当前字符是\n否到达最后一位?}--是--&gt;I[比较temp和max\n更新max]I--&gt;S{j指到到字符串末尾?}--是--&gt;ES--否--&gt;C  </pre></div><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>; <span class="comment">//存储最大无重复子串长度</span></span><br><span class="line">        <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            temp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;s.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(s.charAt(j)))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;max)&#123;</span><br><span class="line">                        max=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(s.charAt(j), <span class="number">1</span>);</span><br><span class="line">                    temp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s.length()-<span class="number">1</span>==j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;max)&#123;</span><br><span class="line">                        max=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h1><p>其实这是一道滑动窗口问题</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口。</p><p>分类：窗口有两类，一种是固定大小类的窗口，一类是大小动态变化的窗口。</p><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><ul><li>利用滑动窗口获取平滑的数据，如一段连续时间的数据平均值，能够有更好的稳定性，如温度监测。</li></ul><p>什么情况可以用滑动窗口来解决实际问题呢？</p><ul><li>一般给出的数据结构是数组或者字符串</li><li>求取某个子串或者子序列最长最短等最值问题或者求某个目标值时</li><li>该问题本身可以通过暴力求解</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid 语法</title>
      <link href="/post/63932/"/>
      <url>/post/63932/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Mermaid是一种基于Javascript的绘图工具，使用类似于Markdown的语法，使用户可以方便快捷地通过代码创建图表。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>所有流程图均由<strong>节点</strong>、几何形状和<strong>边</strong>、箭头或线组成</p><h3 id="定义流程图的方向"><a href="#定义流程图的方向" class="headerlink" title="定义流程图的方向"></a>定义流程图的方向</h3><ul><li><p>LR——从左到右</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    Start --&gt; Stop  </pre></div></li><li><p>TB——从上到下</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    Start --&gt; Stop  </pre></div></li></ul><ul><li>TD - 自上而下/与TB相同  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    Start --&gt; Stop  </pre></div></li></ul><h3 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h3><ul><li><p>圆角矩形节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1(This is the text in the box)</span><br></pre></td></tr></table></figure> <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1(This is the text in the box)  </pre></div></li><li><p><strong>体育场形节点</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1([This is the text in the box])</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1([This is the text in the box])  </pre></div></li><li><p><strong>子程序形状的节点</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1[[This is the text in the box]]</span><br></pre></td></tr></table></figure> <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1[[This is the text in the box]]  </pre></div></li><li><p>圆柱形节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1[(Database)]</span><br></pre></td></tr></table></figure> <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1[(Database)]  </pre></div></li><li><p><strong>圆圈形式的节点</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1((This is the text in the circle))</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1((This is the text in the circle))  </pre></div></li><li><p><strong>不对称形状的节点</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1&gt;This is the text in the box]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1&gt;This is the text in the box]  </pre></div></li><li><p><strong>菱形</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1&#123;This is the text in the box&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR id1{This is the text in the box}  </pre></div></li></ul><ul><li><p><strong>平行四边形</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    id1[\This is the text in the box\]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD id1[\This is the text in the box\]  </pre></div></li><li><p><strong>平行四边形 （反向）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    id1[/This is the text in the box/]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD id1[&#x2F;This is the text in the box&#x2F;]  </pre></div></li><li><p><strong>梯形</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[/Christmas\]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD A[&#x2F;Christmas\]  </pre></div></li><li><p><strong>梯形（反向）</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    B[\Go shopping/]</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD B[\Go shopping&#x2F;]  </pre></div>    </li></ul><h3 id="节点之间的链接"><a href="#节点之间的链接" class="headerlink" title="节点之间的链接"></a>节点之间的链接</h3><ul><li><p>基本</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flowchart LR</span><br><span class="line">    A--&gt;B</span><br><span class="line">    C---&gt;D</span><br><span class="line">    E --- F</span><br><span class="line">    G-- This is the text! ---H</span><br><span class="line">    I---|This is the text|J</span><br><span class="line">    K-- text --&gt;L</span><br><span class="line">    M-.-&gt;N;</span><br><span class="line">    O-. text .-&gt; P</span><br><span class="line">    Q ==&gt; R</span><br><span class="line">    S == text ==&gt; T</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    A--&gt;B    C---&gt;D    E --- F    G-- This is the text! ---H    I---|This is the text|J    K-- text --&gt;L    M-.-&gt;N;    O-. text .-&gt; P    Q &#x3D;&#x3D;&gt; R    S &#x3D;&#x3D; text &#x3D;&#x3D;&gt; T  </pre></div></li></ul><p>​        </p><ul><li><p>其他用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">   A -- text --&gt; B -- text2 --&gt; C</span><br><span class="line">   a --&gt; b &amp; c--&gt; d</span><br><span class="line">   E &amp; F--&gt; G &amp; H</span><br><span class="line">   I --o J</span><br><span class="line">   K --x L</span><br></pre></td></tr></table></figure>  <div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR   A -- text --&gt; B -- text2 --&gt; C   a --&gt; b &amp; c--&gt; d   E &amp; F--&gt; G &amp; H   I --o J   K --x L  </pre></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;</span><br><span class="line">    B --&gt;|Yes| C[OK]</span><br><span class="line">    C --&gt; D[Rethink]</span><br><span class="line">    D --&gt; B</span><br><span class="line">    B ----&gt;|No| E[End]</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    A[Start] --&gt; B{Is it?}    B --&gt;|Yes| C[OK]    C --&gt; D[Rethink]    D --&gt; B    B ----&gt;|No| E[End]  </pre></div></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 小工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2_两数相加</title>
      <link href="/post/10994/"/>
      <url>/post/10994/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你两个  <strong>非空</strong>  的链表，表示两个非负的整数。它们每位数字都是按照  <strong>逆序</strong>  的方式存储的，并且每个节点只能存储  <strong>一位</strong>  数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p> <strong>示例 1：</strong> </p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure></p><p> <strong>示例 2：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p> <strong>示例 3：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong> </p><ul><li>每个链表中的节点数在范围 $[1, 100]$ 内</li><li>$0 &lt;= Node.val &lt;= 9$</li><li>题目数据保证列表表示的数字不含前导零</li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目给出两个链表，由头节点顺序遍历得到的序列是一个数的逆序列，求两个链表所表示的两数之和。</p><p>我们可以新建一个结果链表<code>res</code>,并设置一个工作指针<code>last</code>。初始化，指向<code>res</code>头节点。设置<code>carry</code>记录当前进位数,初始化为0.</p><p>循环。遍历<code>l1</code> ,<code>l2</code>两个链表</p><p>分为以下种种情况</p><ul><li><p><code>l1!=null&amp;&amp;l2!=null</code></p><p>  此时<code>l1.val</code>和<code>l2.val</code>和<code>carry</code>相加，<code>(l1.val+l2.val+carry)%10</code>是当前位的数,<code>(l1.val+l2.val+carry)/10</code>是当前进位的数。两者顺序不能变。</p><p>  <code>l1</code>,<code>l2</code>,<code>last</code>,后移</p></li><li><p><code>l1!=null&amp;&amp;l2==null</code></p><p>  <code>(l1.val+carry)%10</code>是当前位的数,<code>(l1.val+carry)/10</code>是当前进位的数</p><p>  <code>l1</code>,<code>last</code>,后移</p></li><li><p><code>l1==null&amp;&amp;l2!=null</code></p><p>  <code>(l2.val+carry)%10</code>是当前位的数,<code>(l2.val+carry)/10</code>是当前进位的数</p><p>  <code>l2</code>,<code>last</code>,后移</p></li><li><p><code>l1==null&amp;&amp;l2==null</code></p><p>  这步是收尾工作，判断当前位carry是否为0，是则last.next==null,否则last.next.val=carry<br>  这里仅需判断carry而无需判断高位的情况，因为不存在高位为0的情况</p></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=2 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [2] 两数相加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        ListNode res=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        ListNode last=res;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">null</span>||l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="literal">null</span>&amp;&amp;l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">                last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                last.next.val=(l1.val+l2.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(l1.val+l2.val+carry)/<span class="number">10</span>;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">                last=last.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l2==<span class="literal">null</span>)&#123;</span><br><span class="line">                last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                last.next.val=(l1.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(l1.val+carry)/<span class="number">10</span>;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">                last=last.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1==<span class="literal">null</span>)&#123;</span><br><span class="line">                last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                last.next.val=(l2.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(l2.val+carry)/<span class="number">10</span>;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">                last=last.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l1==<span class="literal">null</span>&amp;&amp;l2==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(carry==<span class="number">0</span>)&#123;</span><br><span class="line">                    last.next=<span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">                    last.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_1_两数之和</title>
      <link href="/post/33805/"/>
      <url>/post/33805/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 $nums$ 和一个整数目标值 $target$，请你在该数组中找出  <strong>和为目标值</strong>  <em>$target$</em>  的那  <strong>两个</strong>  整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p> <strong>示例 1：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p> <strong>示例 2：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p> <strong>示例 3：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong> </p><ul><li>$2 &lt;= nums.length &lt;= 10^{4}$</li><li>$-10^{9} &lt;= nums[i] &lt;= 10^{9}$</li><li>$-10^{9} &lt;= target &lt;= 10^{9}$</li><li><p><strong>只会存在一个有效答案</strong> </p><p><strong>进阶：</strong> 你可以想出一个时间复杂度小于 $O(n^{2})$ 的算法吗？</p></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p> 定义两个指针<code>i</code>,<code>j</code>,<br> 遍历数组求和，当其<code>nums[i]+num[j]=target</code>时，记录两个下标的值<code>[i,j]</code>，最后返回这个数组。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> a[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    a[<span class="number">0</span>]=i;a[<span class="number">1</span>]=j;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性规划</title>
      <link href="/post/40439/"/>
      <url>/post/40439/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h1><p>我想计算一个线性方程组方程组的解</p><script type="math/tex; mode=display">\begin{equation}% \begin{equation*} 加'*'去掉公式编号\left\{\begin{aligned}     %请使用'aligned'或'align*'10x-2y-2z &= 72 \\     %加'&'指定对齐位置-x+10y-2z &= 83 \\-x-y+5z &= 42 \\\end{aligned}\right.\end{equation}% \end{equation*}   加'*'去掉公式编号% 注意：在 markdown 环境下，某些特殊字符，如'\', '*'等，会首先被 markdown 语法转义，然后再被 Latex 转义。% 因此有时候 '\{'需要写作'\\{'，'*'需要写作'\*'，'\\'需要写作'\\\\'等，视不同的解释环境而定</script><p>用python算应该怎么办呢？</p><p>发现有一个叫<code>numpy</code>的库</p><p>它有啥我们先不管,我们先关注于问题本身</p><p>它是一个$AX=b$形式的向量,我可以把它们写成向量的形式啊</p><p>长这样：</p><script type="math/tex; mode=display">\left[\begin{matrix}10 & -2 & -2 \\-1 & 10 & -2 \\-1 & -1 & 5 \\\end{matrix}\right] \left[\begin{matrix}x\\ y\\ z\end{matrix}\right]=\left[\begin{matrix}72\\83\\42\\\end{matrix}\right]</script><p>我需要矩阵乘法和矩阵求逆的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([[<span class="number">10</span>, -<span class="number">2</span>, -<span class="number">2</span>],[-<span class="number">1</span>, <span class="number">10</span>, -<span class="number">2</span>],[<span class="number">1</span>, -<span class="number">1</span>, <span class="number">5</span>]])</span><br><span class="line">b = np.array([<span class="number">72</span>, <span class="number">83</span>, <span class="number">42</span>])</span><br><span class="line">X = np.linalg.inv(A).dot(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我还发现可以用一个方法来解方程<script type="math/tex">AX=b</script></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = np.linalg.solve(A,b)</span><br></pre></td></tr></table></figure><p>它是求解满秩的方程组的函数<br>第一个是系数矩阵，第二个是常数矩阵</p><p>我又了解到一个叫<code>sympy</code>的库,它的计算精度似乎更高<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, Eq, solve</span><br><span class="line"></span><br><span class="line">x,y,z = symbols(<span class="string">&quot;x y z&quot;</span>)  <span class="comment"># 符号化变量</span></span><br><span class="line">equ =[Eq(<span class="number">10</span>*x-<span class="number">2</span>*y-<span class="number">2</span>*z, <span class="number">72</span>),  <span class="comment"># 等式函数</span></span><br><span class="line">    Eq(-x+<span class="number">10</span>*y-<span class="number">2</span>*z, <span class="number">83</span>),</span><br><span class="line">    Eq(-x-y+<span class="number">5</span>*z, <span class="number">72</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solve(equ, [x,y,z]))  <span class="comment">#</span></span><br><span class="line">第一个参数为要解的方程，要求右端等于<span class="number">0</span>，第二个参数为要解的未知数</span><br></pre></td></tr></table></figure><br>可是遇到很多不同类型约束条件应该怎么办呢</p><h2 id="线性规划的标准形式"><a href="#线性规划的标准形式" class="headerlink" title="线性规划的标准形式"></a>线性规划的标准形式</h2><p>$min \quad c^Tx$</p><script type="math/tex; mode=display">\begin{equation}\left\{    \begin{aligned}     Ax &\leq b \\    Aeq·x&=Beq \\    Ib \leq &x \leq ub    \end{aligned} \right.\end{equation}</script><p>比如下面这个 </p><p>$max\quad z=2x_1+3x_2-5x_3$</p><script type="math/tex; mode=display">\begin{equation}\left\{    \begin{aligned}     x_1+x_2+x_3&=7 \\    2x_1-5x_2+x_3&\geq10 \\    x_1+3x_2+x_3&\leq12 \\    x_1,x_2,x_3&\geq 3    \end{aligned} \right.\end{equation}</script><p><strong>求一个变量的最大值我们只要求出这个变量的相反数的最小值就好了</strong></p><p>根据规范式转换为</p><p>$min\quad -z=-2x_1-3x_2+5x_3$</p><script type="math/tex; mode=display">\begin{equation}\left\{    \begin{aligned}     x_1+x_2+x_3&=7 \\    -2x_1+5x_2-x_3&\leq-10 \\    x_1+3x_2+x_3&\leq12 \\    -x_1,-x_2,-x_3&\leq-3    \end{aligned} \right.\end{equation}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pickletools <span class="keyword">import</span> optimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"></span><br><span class="line">c = np.array([-<span class="number">2</span>,-<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line">Aeq = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">beq = np.array([<span class="number">7</span>])</span><br><span class="line">A = np.array([[-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]])</span><br><span class="line">b = np.array([-<span class="number">10</span>,<span class="number">12</span>])</span><br><span class="line">x1,x2,x3 = (<span class="number">0</span>,<span class="literal">None</span>),(<span class="number">0</span>,<span class="literal">None</span>),(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">res = linprog(c,A,b,Aeq,beq,bounds=[x1,x2,x3])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>关于<code>scipy.optimize.linprog</code><br><a href="https://blog.csdn.net/weixin_45288557/article/details/109139303">详细信息</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo x Github的常用指令</title>
      <link href="/post/3429/"/>
      <url>/post/3429/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="Hexo-x-Github常用指令"><a href="#Hexo-x-Github常用指令" class="headerlink" title="Hexo x Github常用指令"></a>Hexo x Github常用指令</h1><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h2><p>在blog目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>预览博客，返回一网页地址</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://hexo.io/themes/">主题</a></p><p>如你所见，其实每个主题都会包含这个三个东西</p><ul><li>预览效果</li><li>项目地址</li><li>配置文档</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p>打开主题项目地址，然后点击<code>CODE</code>，然后点击<code>Download ZIP</code></p><p>  这样可以下载主题文件压缩包</p></li><li><p>解压压缩包，把文件夹放在<code>blog</code>目录下的<code>themes</code>目录，并把文件夹命名为主题的名字</p></li><li><p>在站点<code>_config.yml</code>找到<code>themes</code>这一行，然后将主题名字修改为<code>你的主题的名字</code></p></li><li><p>注意：有些主题你更换之后是暂时无法预览的，因为有的主题还需要安装它需要的依赖，这一般都会在主题的文档里面提到，只有安装它的依赖之后才可以正常预览</p></li></ul><p>​    </p><h2 id="上传到github命令"><a href="#上传到github命令" class="headerlink" title="上传到github命令"></a>上传到github命令</h2><p><code>hexo g -d</code></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="/post/41658/"/>
      <url>/post/41658/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h1 id="Markdown-基本语法一"><a href="#Markdown-基本语法一" class="headerlink" title="Markdown 基本语法一"></a>Markdown 基本语法一</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">...</span><br><span class="line">###.. n级标题</span><br></pre></td></tr></table></figure><p>应该是<code># 标题</code>而不是<code>#标题</code>,在非标准文本编辑器中会报错.</p><h2 id="2-强调"><a href="#2-强调" class="headerlink" title="2.强调"></a>2.强调</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**Hello world**</span><br><span class="line">__ABCD__</span><br></pre></td></tr></table></figure><p><strong>Hello world</strong></p><p><strong>ABCD</strong></p><p>快捷方式: 选中目标 <code>ctrl+B</code></p><h2 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3.斜体"></a>3.斜体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br></pre></td></tr></table></figure><p><em>斜体</em></p><p><strong>若斜体且斜体可</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***鞋儿粗***</span><br><span class="line">___写而卒___</span><br></pre></td></tr></table></figure><p><strong><em>鞋儿粗</em></strong><br><strong><em>写而卒</em></strong></p><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~正确的话会被划掉~~</span><br></pre></td></tr></table></figure><p><del>正确的话会被划掉</del></p><h2 id="5-代码"><a href="#5-代码" class="headerlink" title="5.代码"></a>5.代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```加enter是代码块,`文字`仅有文字代码</span><br></pre></td></tr></table></figure><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 他说</span><br><span class="line">&gt;&gt; 她说 </span><br></pre></td></tr></table></figure><blockquote><p>他说</p><blockquote><p>她说</p></blockquote></blockquote><p>引用是可以<strong>嵌套</strong>的</p><h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h3 id="7-1无序"><a href="#7-1无序" class="headerlink" title="7.1无序"></a>7.1无序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ a</span><br><span class="line">- b</span><br><span class="line">* c</span><br></pre></td></tr></table></figure><ul><li>a</li></ul><ul><li>b</li><li>c</li></ul><p><strong>回车</strong>可以延续</p><p><strong>tab</strong>构建上一级的<strong>子级</strong>列表</p><h3 id="7-2有序"><a href="#7-2有序" class="headerlink" title="7.2有序"></a>7.2有序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. </span><br></pre></td></tr></table></figure><ol><li></li><li><ol><li>a</li><li>b</li></ol></li></ol><p>回车**可以延续</p><p><strong>tab</strong>构建上一级的<strong>子级</strong>列表</p><h2 id="8-角标"><a href="#8-角标" class="headerlink" title="8.角标"></a>8.角标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ F = 10^3 N$</span><br></pre></td></tr></table></figure><p>$F = 10^3 N$</p><h2 id="9-高亮"><a href="#9-高亮" class="headerlink" title="9.高亮"></a>9.高亮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==啊==</span><br></pre></td></tr></table></figure><p>==啊==</p><h2 id="10-注释"><a href="#10-注释" class="headerlink" title="10.注释"></a>10.注释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注释[^num]</span><br></pre></td></tr></table></figure><p>注释<sup><a href="#fn_1" id="reffn_1">1</a></sup></p><p><strong>脚注</strong>：(一般放在最后)</p><h2 id="11-链接"><a href="#11-链接" class="headerlink" title="11. 链接"></a>11. 链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[链接](https://www.baidu.com)</span><br><span class="line">[10:](# 10注释)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com">链接</a></p><p><a href="# 10注释">10:</a></p><h2 id="12-todo列表"><a href="#12-todo列表" class="headerlink" title="12. todo列表"></a>12. todo列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 一件事</span><br><span class="line">- [ ] 两件事</span><br><span class="line">- [x] 三件事</span><br></pre></td></tr></table></figure><ul><li><p>[x] 一件事</p></li><li><p>[ ] 两件事</p></li><li><p>[x] 三件事</p></li></ul><h2 id="13-表格"><a href="#13-表格" class="headerlink" title="13. 表格"></a>13. 表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|奇数|偶数|</span><br><span class="line">| :-- | :--: |</span><br><span class="line">|1|2</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">奇数</th><th style="text-align:center">偶数</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:center">2</td></tr></tbody></table></div><h2 id="14-图片"><a href="#14-图片" class="headerlink" title="14.  图片"></a>14.  图片</h2><p><strong>直接复制粘贴或拖动</strong></p><p><img src="https://img2.baidu.com/it/u=2839134121,3147950360&amp;fm=253&amp;fmt=auto?w=500&amp;h=195" alt="img"></p><p>配置typora+picgo+阿里云oss后，通过图床：</p><p><img src="https://blog-faithererer.oss-cn-qingdao.aliyuncs.com/blog/typoraImg202207221758534.jpg" alt="c5ad1e1202850c193aed802258e80113df477cf7_raw"></p><h2 id="15-分割线"><a href="#15-分割线" class="headerlink" title="15.分割线"></a>15.分割线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***或---以上</span><br></pre></td></tr></table></figure><hr><h2 id="16-emoji表情"><a href="#16-emoji表情" class="headerlink" title="16.emoji表情"></a>16.emoji表情</h2><p>最好直接复制粘贴😊</p><p><a href="https://emojipedia.org">emoji表情网站</a></p><hr><h1 id="Markdown的基本语法二"><a href="#Markdown的基本语法二" class="headerlink" title="Markdown的基本语法二"></a>Markdown的基本语法二</h1><h2 id="1-生成目录"><a href="#1-生成目录" class="headerlink" title="1.生成目录"></a>1.生成目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC](typora特有)</span><br></pre></td></tr></table></figure><h2 id="2-内嵌-LaTeX-公式"><a href="#2-内嵌-LaTeX-公式" class="headerlink" title="2.内嵌$\LaTeX$公式"></a>2.内嵌$\LaTeX$公式</h2><p><a href="https://blog.csdn.net/weixin_42468475/article/details/106015495">latex大全](latex大全</a>)</p><h2 id="3-Typora-的常用快捷键"><a href="#3-Typora-的常用快捷键" class="headerlink" title="3. Typora 的常用快捷键"></a>3. Typora 的常用快捷键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">效果</th><th style="text-align:center">按键</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl</code> + <code>D</code></td><td style="text-align:center">选中当前词</td><td style="text-align:center"><code>Ctrl</code> + <code>L</code></td><td style="text-align:center">选中当前句/行</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>E</code></td><td style="text-align:center">选中当前区块</td><td style="text-align:center"><code>Ctrl</code> + <code>F</code></td><td style="text-align:center">搜索当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>B</code></td><td style="text-align:center">加粗当前选中</td><td style="text-align:center"><code>Ctrl</code> + <code>H</code></td><td style="text-align:center">替换当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>I</code></td><td style="text-align:center">倾斜当前选中</td><td style="text-align:center"><code>Ctrl</code> + <code>U</code></td><td style="text-align:center">下划当前选中</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>K</code></td><td style="text-align:center">将当前选中生成链接</td><td style="text-align:center"><code>Ctrl</code> + <code>J</code></td><td style="text-align:center">滚动屏幕将选中滚至顶部</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>W</code></td><td style="text-align:center">关闭当前窗口</td><td style="text-align:center"><code>Ctrl</code> + <code>N</code></td><td style="text-align:center">打开新窗口</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>O</code></td><td style="text-align:center">打开文件</td><td style="text-align:center"><code>Ctrl</code> + <code>P</code></td><td style="text-align:center">搜索文件并打开</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>回车</code></td><td style="text-align:center">表格下方插入行</td><td style="text-align:center"><code>Ctrl</code> + <code>,</code></td><td style="text-align:center">打开偏好设置</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>.</code></td><td style="text-align:center">切换全角/半角标点</td><td style="text-align:center"><code>Ctrl</code> + <code>/</code></td><td style="text-align:center">切换正常/源代码视图</td></tr><tr><td style="text-align:center"><code>Ctrl</code> + <code>Shift</code> + <code>-</code></td><td style="text-align:center">缩小视图缩放</td><td style="text-align:center"><code>Ctrl</code> + <code>Shift</code> + <code>+</code></td><td style="text-align:center">放大视图缩放</td></tr></tbody></table></div><p>还有一些不常用的/三键的快捷键不在此列出.</p><h2 id="4-Typora-的主题样式与检查元素"><a href="#4-Typora-的主题样式与检查元素" class="headerlink" title="4. *Typora 的主题样式与检查元素"></a>4. *Typora 的主题样式与检查元素</h2><p>Markdown 在编译后约等于 HTML. 而 Typora 的正常视图就是编译后的 Markdown, 故Typora的主题样式本质就是 CSS 文件.</p><p>可以下载各种好看的主题给 Typora换上, 同时也可以自己调整对应的 CSS 文件, 或者自己手搓. </p><p>在 Typora 设置中开启 <code>调试模式</code> 后即可在正常视图右击打开 <code>检查元素</code>, 在其中就可以完全将 Markdown 文件当成 HTML 来编辑.</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="[Markdown基本语法 | Markdown 中文网 (p2hp.com">官网</a>](<a href="http://markdown.p2hp.com/basic-syntax/#code">http://markdown.p2hp.com/basic-syntax/#code</a>))</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/post/9903/"/>
      <url>/post/9903/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107/"/>
      <url>/post/16107/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
